
# 1 "time.c"

# 15 "i2c_1.h"
unsigned char Read(void);

# 26
void Write_time(unsigned char day, unsigned char date, unsigned char month, unsigned char year);

# 37
void Read_time(unsigned char mode);

# 48
unsigned char Read_From_Addr(unsigned char addr);

# 58
void Write_to_Addr(unsigned char data, unsigned char addr);

# 68
extern void ReadBUF(void);

# 79
void Write_I2C(unsigned char c);

# 87
void Write_time_(unsigned char s, unsigned char m, unsigned char h);

# 14 "time.h"
void main(void);

# 24
unsigned char DEC_to_BCD(unsigned char t);

# 34
unsigned char BCD_format(unsigned char *str);

# 44
unsigned char BCD_to_DEC(unsigned char c);

# 54
void Clear_array(unsigned char *e, unsigned char n);

# 65
void Set_time(unsigned char* sec, unsigned char* min, unsigned char* hour, unsigned char mode);

# 75
unsigned char Set_day(void);

# 84
void Set_date(unsigned char* date, unsigned char* month, unsigned char* year);

# 94
unsigned char Get_data(void);

# 104
void Read_sec(unsigned char * e);

# 114
void Read_min(unsigned char * e);

# 124
void Read_hour(unsigned char * e, unsigned char mode);

# 134
void Write_ARR(unsigned char *c, unsigned char * e);

# 144
void write_DAY(unsigned char day);

# 154
void Read_day(void);

# 164
void Read_date(unsigned char * e);

# 175
void Read_month(unsigned char *e);

# 185
void Read_year(unsigned char *e);

# 18 "array.h"
extern unsigned char str[11];
extern unsigned char time[];

# 16 "delay.h"
void delay_ms(unsigned char t);

# 27
void delay_us(unsigned char t);

# 37
void Delay_s(unsigned char t);

# 44
void DelayFor18TCY( void );
extern void DelayXLCD (void);
void DelayXLCD (void);

# 15 "uart.h"
void UsartConfig(unsigned char config1, unsigned char config2);

# 26
void Write(char data);

# 37
void Write_str(unsigned char *c);

# 48
unsigned char Read_char(void);

# 60
void Read_string(unsigned char *str, unsigned char n);

# 4 "C:\Program Files (x86)\Microchip\xc8\v1.21\include\string.h"
typedef int ptrdiff_t;
typedef unsigned size_t;
typedef unsigned short wchar_t;


extern int errno;

# 22
extern void * memcpy(void *, const void *, size_t);
extern void * memmove(void *, const void *, size_t);
extern void * memset(void *, int, size_t);

# 35
extern char * strcat(char *, const char *);
extern char * strcpy(char *, const char *);
extern char * strncat(char *, const char *, size_t);
extern char * strncpy(char *, const char *, size_t);
extern char * strdup(const char *);
extern char * strtok(char *, const char *);


extern int memcmp(const void *, const void *, size_t);
extern int strcmp(const char *, const char *);
extern int stricmp(const char *, const char *);
extern int strncmp(const char *, const char *, size_t);
extern int strnicmp(const char *, const char *, size_t);
extern void * memchr(const void *, int, size_t);
extern size_t strcspn(const char *, const char *);
extern char * strpbrk(const char *, const char *);
extern size_t strspn(const char *, const char *);
extern char * strstr(const char *, const char *);
extern char * stristr(const char *, const char *);
extern char * strerror(int);
extern size_t strlen(const char *);
extern char * strchr(const char *, int);
extern char * strichr(const char *, int);
extern char * strrchr(const char *, int);
extern char * strrichr(const char *, int);

# 25 "time.c"
unsigned char DEC_to_BCD(unsigned char t)
{
return (((t/10)<<4)|(t%10));
}




unsigned char BCD_format(unsigned char *str)
{
unsigned char a;
a = (*str-'0')<<4;
str++;
return (a|(*str-'0'));
}




unsigned char BCD_to_DEC(unsigned char c)
{
return ((c>>4)*10+(c&0x0F)*1);
}




void Clear_array(unsigned char *e, unsigned char n)
{
unsigned char i;
for(i=0;i<n;i++)
{
*e = ' ';
e++;
}
}

# 69
void Set_time(unsigned char* sec, unsigned char* min, unsigned char* hour, unsigned char mode)
{
unsigned char s, m, h, x, y, z;
unsigned char str3[37] = "\nEnter the time in the format HHMMSS";
unsigned char error[] = "\nInvalid Entry..!";
do
{
Write_str(str3);
Read_string(str, 6);
h = BCD_format(str);
m = BCD_format(str+2);
s = BCD_format(str+4);
x = BCD_to_DEC(s);
y = BCD_to_DEC(m);
z = BCD_to_DEC(h);
if((mode==0)||(mode==1))
{
if(((x>=0&&x<=59) && (y>=0&&y<=59) && (z>=1&&z<=12) ))
{
s = s&0x7F;
m = m&0x7F;
h = h&0x1F;
if(mode==0)
h = h|0x40;
else if(mode == 1)
h = h|0x60;
h = h&0x7F;
}
else
Write_str(error);
}
else if(((x>=0&&x<=59) && (y>=0&&y<=59) && (z>=0&&z<=24) ) && (mode==2))
{
h = h|0x00;
h = h&0x7F;
}
else
Write_str(error);
}while(!(((x>=0&&x<=59) && (y>=0&&y<=59) && (z>=1&&z<=12)) || ((x>=0&&x<=59) && (y>=0&&y<=59) && (z>=0&&z<=24) && (mode==2)) ));

*sec = s;
*min = m;
*hour = h;
}


unsigned char Set_day(void)
{
unsigned char error[18] = "\nInvalid Entry..!";
unsigned char str5[] = "\nEnter the DAY SUN-01 MON-02 TUE-03 WED-04 THURS-05 FRI-06 SAT-07\0";

unsigned char day;
Write_str(str5);
Clear_array(str, 8);
do
{
Read_string(str, 2);
day = BCD_format(str);
Write_str(str);
if(day>=1 && day<=7)
{
return (day);
}
else{
Write_str(error);

}
}while(!(day>=1 && day<=7));
}



void Set_date(unsigned char* date, unsigned char* month, unsigned char* year)
{
unsigned char x, y, z;
unsigned char str6[30] = "\nEnter DATE/MONTH/YEAR\tDDMMYY", error[] = "\nInvalid Entry..!";
do
{
Write_str(str6);
Read_string(str, 6);
*date = BCD_format(str);
*month = BCD_format(str+2);
*year = BCD_format(str+4);
x = BCD_to_DEC(*date);
y = BCD_to_DEC(*month);
z = BCD_to_DEC(*year);
if((x>=1&&x<=31) && (y>=1&&y<=12) && (z>=1&&z<=99))
{
*date = *date & 0x3F;
*month = *month & 0x1F;
*year = *year & 0xFF;
}
else
Write_str(error);
}while(!((x>=0&&x<=31) && (y>=0&&y<=12) && (z>=0&&z<=99)));
}




unsigned char Get_data(void)
{
unsigned char s, m, h, day, date, month, year, mode=4;
unsigned char str2[19] = "\nSELECT MODE 12/24";
unsigned char str8[14] = "\nEnter AM/PM?";
unsigned char error[] = "\nInvalid Entry..!";
unsigned char s_1[3] = "12";
unsigned char s_2[3] = "24";
unsigned char s_3[3] = "am";
unsigned char s_4[3] = "AM";
unsigned char s_5[3] = "pm";
unsigned char s_6[3] = "PM";
do
{
Write_str(str2);
Read_string(str, 2);
if(!(strcmp(str, s_1)))
{
do{
Write_str(str8);
Read_string(str, 2);
if(!(strcmp(str, s_3)) || !(strcmp(str, s_4)) )
{
mode = 0;
}
else if(!(strcmp(str, s_5)) || !(strcmp(str, s_6)) )
{
mode = 1;
}
else
{
Write_str(error);
}
}while(!(mode==0||mode==1));
}
else if(!(strcmp(str, s_2)))
{
mode = 2;
}
else
{
Write_str(error);
}
}while(!(mode==0 || mode==1 || mode==2));
Set_time(&s, &m, &h ,mode);
Write_time_(s, m, h);
day = Set_day();
Set_date(&date, &month, &year);
Write_time(day, date, month, year);
return (mode);
}



void Read_sec(unsigned char * e)
{
unsigned char c;
e=e+6;
c = Read();
*e = ((c>>4)&0x07) + '0';
e++;
*e = (c&0x0F) + '0';
e++;
*e = ' ';
}



void Read_min(unsigned char * e)
{
unsigned char c;
e= e+3;
c = Read();
*e = ((c>>4)&0x07) + '0';
e++;
*e = (c&0x0F) + '0';
e++;
*e = ':';
}



void Read_hour(unsigned char * e, unsigned char mode)
{
unsigned char c,i=0;
c = Read();
if((mode==0)||(mode==1))
*e = ((c>>4)&0x01) + '0';
else
*e = ((c>>4)&0x03) + '0';
e++;
*e = (c&0x0F) + '0';
e++;
*e = ':';
while(i!=11)
{
e++;
i++;
}
if((c>>6)&0x01)
{
if((c>>5)&0x01)
*e = 'P';
else
*e = 'A';
e++;
*e = 'M';
}
}

# 284
void Write_ARR(unsigned char *c, unsigned char * e)
{
e = e+17;
while(*c!='\0')
{
*e = *c;
e++;
c++;
}
e = e+2;
*e = ' ';
}



void write_DAY(unsigned char day)
{
unsigned char day_1[4] = "SUN";
unsigned char day_2[4] = "MON";
unsigned char day_3[4] = "TUE";
unsigned char day_4[4] = "WED";
unsigned char day_5[4] = "THU";
unsigned char day_6[4] = "FRI";
unsigned char day_7[4] = "SAT";

switch(day)
{
case 1: Write_ARR(day_1, time);
break;
case 2: Write_ARR(day_2, time);
break;
case 3: Write_ARR(day_3, time);
break;
case 4: Write_ARR(day_4, time);
break;
case 5: Write_ARR(day_5, time);
break;
case 6: Write_ARR(day_6, time);
break;
case 7: Write_ARR(day_7, time);
break;
}
}




void Read_day(void)
{
write_DAY(0x07 & Read());
}



void Read_date(unsigned char * e)
{
unsigned char c;
e= e+23;
*e = ' ';
e++;
c = Read();
*e = ((c>>4)&0x03) + '0';
e++;
*e = (c&0x0F) + '0';
e++;
*e = '/';
}



void Read_month(unsigned char *e)
{
unsigned char c;
e= e+27;
c = Read();
*e = ((c>>4)&0x01) + '0';
e++;
*e = (c&0x0F) + '0';
e++;
*e = '/';
}




void Read_year(unsigned char *e)
{
unsigned char c;
e= e+30;
c = Read();
*e = (c>>4) + '0';
e++;
*e = (c&0x0F) + '0';
e++;
*e = '\r';
e++;
*e = '\0';
}
