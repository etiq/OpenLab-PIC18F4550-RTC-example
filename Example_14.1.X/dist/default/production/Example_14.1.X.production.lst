

Microchip Technology PIC18 LITE Macro Assembler V1.21 build 54009 
                                                                                               Thu Jun 05 11:25:46 2014

Microchip Technology Omniscient Code Generator (Lite mode) build 54009
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataBANK1,global,class=CODE,delta=1
     6                           	psect	idataBANK2,global,class=CODE,delta=1
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    10                           	psect	dataBANK2,global,class=BANK2,space=1,delta=1
    11                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    13                           	psect	text0,global,reloc=2,class=CODE,delta=1
    14                           	psect	text1,global,reloc=2,class=CODE,delta=1
    15                           	psect	text2,global,reloc=2,class=CODE,delta=1
    16                           	psect	text3,global,reloc=2,class=CODE,delta=1
    17                           	psect	text4,global,reloc=2,class=CODE,delta=1
    18                           	psect	text5,global,reloc=2,class=CODE,delta=1
    19                           	psect	text6,global,reloc=2,class=CODE,delta=1
    20                           	psect	text7,global,reloc=2,class=CODE,delta=1
    21                           	psect	text8,global,reloc=2,class=CODE,delta=1
    22                           	psect	text9,global,reloc=2,class=CODE,delta=1
    23                           	psect	text10,global,reloc=2,class=CODE,delta=1
    24                           	psect	text11,global,reloc=2,class=CODE,delta=1
    25                           	psect	text12,global,reloc=2,class=CODE,delta=1
    26                           	psect	text13,global,reloc=2,class=CODE,delta=1
    27                           	psect	text14,global,reloc=2,class=CODE,delta=1
    28                           	psect	text15,global,reloc=2,class=CODE,delta=1
    29                           	psect	text16,global,reloc=2,class=CODE,delta=1
    30                           	psect	text17,global,reloc=2,class=CODE,delta=1
    31                           	psect	text18,global,reloc=2,class=CODE,delta=1
    32                           	psect	text19,global,reloc=2,class=CODE,delta=1
    33                           	psect	text20,global,reloc=2,class=CODE,delta=1
    34                           	psect	text21,global,reloc=2,class=CODE,delta=1
    35                           	psect	text22,global,reloc=2,class=CODE,delta=1
    36                           	psect	text23,global,reloc=2,class=CODE,delta=1
    37                           	psect	text24,global,reloc=2,class=CODE,delta=1
    38                           	psect	text25,global,reloc=2,class=CODE,delta=1
    39                           	psect	text26,global,reloc=2,class=CODE,delta=1
    40                           	psect	text27,global,reloc=2,class=CODE,delta=1
    41                           	psect	text28,global,reloc=2,class=CODE,delta=1
    42                           	psect	text29,global,reloc=2,class=CODE,delta=1
    43                           	psect	text30,global,reloc=2,class=CODE,delta=1
    44                           	psect	text31,global,reloc=2,class=CODE,delta=1
    45                           	psect	text32,global,reloc=2,class=CODE,delta=1
    46                           	psect	text33,global,reloc=2,class=CODE,delta=1
    47                           	psect	text34,global,reloc=2,class=CODE,delta=1
    48                           	psect	text35,global,reloc=2,class=CODE,delta=1
    49                           	psect	text36,global,reloc=2,class=CODE,delta=1
    50                           	psect	text37,global,reloc=2,class=CODE,delta=1
    51                           	psect	text38,global,reloc=2,class=CODE,delta=1
    52                           	psect	text39,global,reloc=2,class=CODE,delta=1
    53                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    54                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    55  0000                     
    56                           	psect	idataBANK1
    57  007615                     __pidataBANK1:
    58                           	opt stack 0
    59                           
    60                           ;initializer for main@F4663
    61  007615  0A                 	db	10
    62  007616  44                 	db	68
    63  007617  6F                 	db	111
    64  007618  20                 	db	32
    65  007619  79                 	db	121
    66  00761A  6F                 	db	111
    67  00761B  75                 	db	117
    68  00761C  20                 	db	32
    69  00761D  77                 	db	119
    70  00761E  61                 	db	97
    71  00761F  6E                 	db	110
    72  007620  74                 	db	116
    73  007621  20                 	db	32
    74  007622  74                 	db	116
    75  007623  6F                 	db	111
    76  007624  20                 	db	32
    77  007625  73                 	db	115
    78  007626  65                 	db	101
    79  007627  74                 	db	116
    80  007628  20                 	db	32
    81  007629  74                 	db	116
    82  00762A  68                 	db	104
    83  00762B  65                 	db	101
    84  00762C  20                 	db	32
    85  00762D  74                 	db	116
    86  00762E  69                 	db	105
    87  00762F  6D                 	db	109
    88  007630  65                 	db	101
    89  007631  3F                 	db	63
    90  007632  20                 	db	32
    91  007633  79                 	db	121
    92  007634  2F                 	db	47
    93  007635  6E                 	db	110
    94  007636  00                 	db	0
    95  007637  00                 	db	0
    96                           
    97                           ;initializer for Set_date@F214
    98  007638  0A                 	db	10
    99  007639  45                 	db	69
   100  00763A  6E                 	db	110
   101  00763B  74                 	db	116
   102  00763C  65                 	db	101
   103  00763D  72                 	db	114
   104  00763E  20                 	db	32
   105  00763F  44                 	db	68
   106  007640  41                 	db	65
   107  007641  54                 	db	84
   108  007642  45                 	db	69
   109  007643  2F                 	db	47
   110  007644  4D                 	db	77
   111  007645  4F                 	db	79
   112  007646  4E                 	db	78
   113  007647  54                 	db	84
   114  007648  48                 	db	72
   115  007649  2F                 	db	47
   116  00764A  59                 	db	89
   117  00764B  45                 	db	69
   118  00764C  41                 	db	65
   119  00764D  52                 	db	82
   120  00764E  09                 	db	9
   121  00764F  44                 	db	68
   122  007650  44                 	db	68
   123  007651  4D                 	db	77
   124  007652  4D                 	db	77
   125  007653  59                 	db	89
   126  007654  59                 	db	89
   127  007655  00                 	db	0
   128                           
   129                           ;initializer for main@F4665
   130  007656  50                 	db	80
   131  007657  6C                 	db	108
   132  007658  65                 	db	101
   133  007659  61                 	db	97
   134  00765A  73                 	db	115
   135  00765B  65                 	db	101
   136  00765C  20                 	db	32
   137  00765D  65                 	db	101
   138  00765E  6E                 	db	110
   139  00765F  74                 	db	116
   140  007660  65                 	db	101
   141  007661  72                 	db	114
   142  007662  20                 	db	32
   143  007663  61                 	db	97
   144  007664  20                 	db	32
   145  007665  76                 	db	118
   146  007666  61                 	db	97
   147  007667  6C                 	db	108
   148  007668  69                 	db	105
   149  007669  64                 	db	100
   150  00766A  20                 	db	32
   151  00766B  64                 	db	100
   152  00766C  61                 	db	97
   153  00766D  74                 	db	116
   154  00766E  61                 	db	97
   155  00766F  2E                 	db	46
   156  007670  2E                 	db	46
   157  007671  21                 	db	33
   158  007672  00                 	db	0
   159                           
   160                           ;initializer for Get_data@F227
   161  007673  0A                 	db	10
   162  007674  53                 	db	83
   163  007675  45                 	db	69
   164  007676  4C                 	db	76
   165  007677  45                 	db	69
   166  007678  43                 	db	67
   167  007679  54                 	db	84
   168  00767A  20                 	db	32
   169  00767B  4D                 	db	77
   170  00767C  4F                 	db	79
   171  00767D  44                 	db	68
   172  00767E  45                 	db	69
   173  00767F  20                 	db	32
   174  007680  31                 	db	49
   175  007681  32                 	db	50
   176  007682  2F                 	db	47
   177  007683  32                 	db	50
   178  007684  34                 	db	52
   179  007685  00                 	db	0
   180                           
   181                           ;initializer for Get_data@F231
   182  007686  0A                 	db	10
   183  007687  49                 	db	73
   184  007688  6E                 	db	110
   185  007689  76                 	db	118
   186  00768A  61                 	db	97
   187  00768B  6C                 	db	108
   188  00768C  69                 	db	105
   189  00768D  64                 	db	100
   190  00768E  20                 	db	32
   191  00768F  45                 	db	69
   192  007690  6E                 	db	110
   193  007691  74                 	db	116
   194  007692  72                 	db	114
   195  007693  79                 	db	121
   196  007694  2E                 	db	46
   197  007695  2E                 	db	46
   198  007696  21                 	db	33
   199  007697  00                 	db	0
   200                           
   201                           ;initializer for Set_date@F216
   202  007698  0A                 	db	10
   203  007699  49                 	db	73
   204  00769A  6E                 	db	110
   205  00769B  76                 	db	118
   206  00769C  61                 	db	97
   207  00769D  6C                 	db	108
   208  00769E  69                 	db	105
   209  00769F  64                 	db	100
   210  0076A0  20                 	db	32
   211  0076A1  45                 	db	69
   212  0076A2  6E                 	db	110
   213  0076A3  74                 	db	116
   214  0076A4  72                 	db	114
   215  0076A5  79                 	db	121
   216  0076A6  2E                 	db	46
   217  0076A7  2E                 	db	46
   218  0076A8  21                 	db	33
   219  0076A9  00                 	db	0
   220                           
   221                           ;initializer for Set_day@F203
   222  0076AA  0A                 	db	10
   223  0076AB  49                 	db	73
   224  0076AC  6E                 	db	110
   225  0076AD  76                 	db	118
   226  0076AE  61                 	db	97
   227  0076AF  6C                 	db	108
   228  0076B0  69                 	db	105
   229  0076B1  64                 	db	100
   230  0076B2  20                 	db	32
   231  0076B3  45                 	db	69
   232  0076B4  6E                 	db	110
   233  0076B5  74                 	db	116
   234  0076B6  72                 	db	114
   235  0076B7  79                 	db	121
   236  0076B8  2E                 	db	46
   237  0076B9  2E                 	db	46
   238  0076BA  21                 	db	33
   239  0076BB  00                 	db	0
   240                           
   241                           ;initializer for Set_time@F200
   242  0076BC  0A                 	db	10
   243  0076BD  49                 	db	73
   244  0076BE  6E                 	db	110
   245  0076BF  76                 	db	118
   246  0076C0  61                 	db	97
   247  0076C1  6C                 	db	108
   248  0076C2  69                 	db	105
   249  0076C3  64                 	db	100
   250  0076C4  20                 	db	32
   251  0076C5  45                 	db	69
   252  0076C6  6E                 	db	110
   253  0076C7  74                 	db	116
   254  0076C8  72                 	db	114
   255  0076C9  79                 	db	121
   256  0076CA  2E                 	db	46
   257  0076CB  2E                 	db	46
   258  0076CC  21                 	db	33
   259  0076CD  00                 	db	0
   260                           
   261                           ;initializer for Get_data@F229
   262  0076CE  0A                 	db	10
   263  0076CF  45                 	db	69
   264  0076D0  6E                 	db	110
   265  0076D1  74                 	db	116
   266  0076D2  65                 	db	101
   267  0076D3  72                 	db	114
   268  0076D4  20                 	db	32
   269  0076D5  41                 	db	65
   270  0076D6  4D                 	db	77
   271  0076D7  2F                 	db	47
   272  0076D8  50                 	db	80
   273  0076D9  4D                 	db	77
   274  0076DA  3F                 	db	63
   275  0076DB  00                 	db	0
   276                           
   277                           ;initializer for write_DAY@F256
   278  0076DC  53                 	db	83
   279  0076DD  55                 	db	85
   280  0076DE  4E                 	db	78
   281  0076DF  00                 	db	0
   282                           
   283                           ;initializer for write_DAY@F258
   284  0076E0  4D                 	db	77
   285  0076E1  4F                 	db	79
   286  0076E2  4E                 	db	78
   287  0076E3  00                 	db	0
   288                           
   289                           ;initializer for write_DAY@F260
   290  0076E4  54                 	db	84
   291  0076E5  55                 	db	85
   292  0076E6  45                 	db	69
   293  0076E7  00                 	db	0
   294                           
   295                           ;initializer for write_DAY@F262
   296  0076E8  57                 	db	87
   297  0076E9  45                 	db	69
   298  0076EA  44                 	db	68
   299  0076EB  00                 	db	0
   300                           
   301                           ;initializer for write_DAY@F264
   302  0076EC  54                 	db	84
   303  0076ED  48                 	db	72
   304  0076EE  55                 	db	85
   305  0076EF  00                 	db	0
   306                           
   307                           ;initializer for write_DAY@F266
   308  0076F0  46                 	db	70
   309  0076F1  52                 	db	82
   310  0076F2  49                 	db	73
   311  0076F3  00                 	db	0
   312                           
   313                           ;initializer for write_DAY@F268
   314  0076F4  53                 	db	83
   315  0076F5  41                 	db	65
   316  0076F6  54                 	db	84
   317  0076F7  00                 	db	0
   318                           
   319                           ;initializer for Get_data@F233
   320  0076F8  31                 	db	49
   321  0076F9  32                 	db	50
   322  0076FA  00                 	db	0
   323                           
   324                           ;initializer for Get_data@F235
   325  0076FB  32                 	db	50
   326  0076FC  34                 	db	52
   327  0076FD  00                 	db	0
   328                           
   329                           ;initializer for Get_data@F237
   330  0076FE  61                 	db	97
   331  0076FF  6D                 	db	109
   332  007700  00                 	db	0
   333                           
   334                           ;initializer for Get_data@F239
   335  007701  41                 	db	65
   336  007702  4D                 	db	77
   337  007703  00                 	db	0
   338                           
   339                           ;initializer for Get_data@F241
   340  007704  70                 	db	112
   341  007705  6D                 	db	109
   342  007706  00                 	db	0
   343                           
   344                           ;initializer for Get_data@F243
   345  007707  50                 	db	80
   346  007708  4D                 	db	77
   347  007709  00                 	db	0
   348                           
   349                           	psect	idataBANK2
   350  007306                     __pidataBANK2:
   351                           	opt stack 0
   352                           
   353                           ;initializer for Set_day@F205
   354  007306  0A                 	db	10
   355  007307  45                 	db	69
   356  007308  6E                 	db	110
   357  007309  74                 	db	116
   358  00730A  65                 	db	101
   359  00730B  72                 	db	114
   360  00730C  20                 	db	32
   361  00730D  74                 	db	116
   362  00730E  68                 	db	104
   363  00730F  65                 	db	101
   364  007310  20                 	db	32
   365  007311  44                 	db	68
   366  007312  41                 	db	65
   367  007313  59                 	db	89
   368  007314  20                 	db	32
   369  007315  53                 	db	83
   370  007316  55                 	db	85
   371  007317  4E                 	db	78
   372  007318  2D                 	db	45
   373  007319  30                 	db	48
   374  00731A  31                 	db	49
   375  00731B  20                 	db	32
   376  00731C  4D                 	db	77
   377  00731D  4F                 	db	79
   378  00731E  4E                 	db	78
   379  00731F  2D                 	db	45
   380  007320  30                 	db	48
   381  007321  32                 	db	50
   382  007322  20                 	db	32
   383  007323  54                 	db	84
   384  007324  55                 	db	85
   385  007325  45                 	db	69
   386  007326  2D                 	db	45
   387  007327  30                 	db	48
   388  007328  33                 	db	51
   389  007329  20                 	db	32
   390  00732A  57                 	db	87
   391  00732B  45                 	db	69
   392  00732C  44                 	db	68
   393  00732D  2D                 	db	45
   394  00732E  30                 	db	48
   395  00732F  34                 	db	52
   396  007330  20                 	db	32
   397  007331  54                 	db	84
   398  007332  48                 	db	72
   399  007333  55                 	db	85
   400  007334  52                 	db	82
   401  007335  53                 	db	83
   402  007336  2D                 	db	45
   403  007337  30                 	db	48
   404  007338  35                 	db	53
   405  007339  20                 	db	32
   406  00733A  46                 	db	70
   407  00733B  52                 	db	82
   408  00733C  49                 	db	73
   409  00733D  2D                 	db	45
   410  00733E  30                 	db	48
   411  00733F  36                 	db	54
   412  007340  20                 	db	32
   413  007341  53                 	db	83
   414  007342  41                 	db	65
   415  007343  54                 	db	84
   416  007344  2D                 	db	45
   417  007345  30                 	db	48
   418  007346  37                 	db	55
   419  007347  00                 	db	0
   420  007348  00                 	db	0
   421                           
   422                           ;initializer for Set_time@F198
   423  007349  0A                 	db	10
   424  00734A  45                 	db	69
   425  00734B  6E                 	db	110
   426  00734C  74                 	db	116
   427  00734D  65                 	db	101
   428  00734E  72                 	db	114
   429  00734F  20                 	db	32
   430  007350  74                 	db	116
   431  007351  68                 	db	104
   432  007352  65                 	db	101
   433  007353  20                 	db	32
   434  007354  74                 	db	116
   435  007355  69                 	db	105
   436  007356  6D                 	db	109
   437  007357  65                 	db	101
   438  007358  20                 	db	32
   439  007359  69                 	db	105
   440  00735A  6E                 	db	110
   441  00735B  20                 	db	32
   442  00735C  74                 	db	116
   443  00735D  68                 	db	104
   444  00735E  65                 	db	101
   445  00735F  20                 	db	32
   446  007360  66                 	db	102
   447  007361  6F                 	db	111
   448  007362  72                 	db	114
   449  007363  6D                 	db	109
   450  007364  61                 	db	97
   451  007365  74                 	db	116
   452  007366  20                 	db	32
   453  007367  48                 	db	72
   454  007368  48                 	db	72
   455  007369  4D                 	db	77
   456  00736A  4D                 	db	77
   457  00736B  53                 	db	83
   458  00736C  53                 	db	83
   459  00736D  00                 	db	0
   460  0000                     _PIE1bits	set	3997
   461  0000                     _PIR1bits	set	3998
   462  0000                     _RCREG	set	4014
   463  0000                     _RCSTA	set	4011
   464  0000                     _RCSTAbits	set	4011
   465  0000                     _SPBRG	set	4015
   466  0000                     _SPBRGH	set	4016
   467  0000                     _SSPADD	set	4040
   468  0000                     _SSPBUF	set	4041
   469  0000                     _SSPCON1	set	4038
   470  0000                     _SSPCON1bits	set	4038
   471  0000                     _SSPCON2	set	4037
   472  0000                     _SSPCON2bits	set	4037
   473  0000                     _SSPSTAT	set	4039
   474  0000                     _SSPSTATbits	set	4039
   475  0000                     _TRISBbits	set	3987
   476  0000                     _TRISCbits	set	3988
   477  0000                     _TXREG	set	4013
   478  0000                     _TXSTA	set	4012
   479  0000                     _TXSTAbits	set	4012
   480                           
   481                           ; #config settings
   482  0000                     
   483                           	psect	cinit
   484  0071A2                     __pcinit:
   485                           	opt stack 0
   486  0071A2                     start_initialization:
   487                           	opt stack 0
   488  0071A2                     __initialization:
   489                           	opt stack 0
   490                           
   491                           ; Clear objects allocated to BANK0 (14 bytes)
   492  0071A2  EE00  F0F2         	lfsr	0,__pbssBANK0
   493  0071A6  0E0E               	movlw	14
   494  0071A8                     clear_0:
   495  0071A8  6AEE               	clrf	postinc0,c
   496  0071AA  06E8               	decf	wreg,f,c
   497  0071AC  E1FD               	bnz	clear_0
   498                           
   499                           ; Initialize objects allocated to BANK2 (104 bytes)
   500                           ; load TBLPTR registers with __pidataBANK2
   501  0071AE  0E06               	movlw	low __pidataBANK2
   502  0071B0  6EF6               	movwf	tblptrl,c
   503  0071B2  0E73               	movlw	high __pidataBANK2
   504  0071B4  6EF7               	movwf	tblptrh,c
   505  0071B6  0E00               	movlw	low (__pidataBANK2 shr (0+16))
   506  0071B8  6EF8               	movwf	tblptru,c
   507  0071BA  EE02  F000         	lfsr	0,__pdataBANK2
   508  0071BE  EE10 F068          	lfsr	1,104
   509  0071C2                     copy_data0:
   510  0071C2  0009               	tblrd		*+
   511  0071C4  CFF5 FFEE          	movff	tablat,postinc0
   512  0071C8  50E5               	movf	postdec1,w,c
   513  0071CA  50E1               	movf	fsr1l,w,c
   514  0071CC  E1FA               	bnz	copy_data0
   515                           
   516                           ; Initialize objects allocated to BANK1 (245 bytes)
   517                           ; load TBLPTR registers with __pidataBANK1
   518  0071CE  0E15               	movlw	low __pidataBANK1
   519  0071D0  6EF6               	movwf	tblptrl,c
   520  0071D2  0E76               	movlw	high __pidataBANK1
   521  0071D4  6EF7               	movwf	tblptrh,c
   522  0071D6  0E00               	movlw	low (__pidataBANK1 shr (0+16))
   523  0071D8  6EF8               	movwf	tblptru,c
   524  0071DA  EE01  F000         	lfsr	0,__pdataBANK1
   525  0071DE  EE10 F0F5          	lfsr	1,245
   526  0071E2                     copy_data1:
   527  0071E2  0009               	tblrd		*+
   528  0071E4  CFF5 FFEE          	movff	tablat,postinc0
   529  0071E8  50E5               	movf	postdec1,w,c
   530  0071EA  50E1               	movf	fsr1l,w,c
   531  0071EC  E1FA               	bnz	copy_data1
   532  0071EE                     end_of_initialization:
   533                           	opt stack 0
   534  0071EE                     __end_of__initialization:
   535                           	opt stack 0
   536  0071EE  0E00               	movlw	low (__Lmediumconst shr (0+16))
   537  0071F0  6EF8               	movwf	tblptru,c
   538  0071F2  0100               	movlb	0
   539  0071F4  EF04  F03C         	goto	_main	;jump to C main() function
   540                           tblptru	equ	0xFF8
   541                           tblptrh	equ	0xFF7
   542                           tblptrl	equ	0xFF6
   543                           tablat	equ	0xFF5
   544                           postinc0	equ	0xFEE
   545                           wreg	equ	0xFE8
   546                           postdec1	equ	0xFE5
   547                           fsr1l	equ	0xFE1
   548                           
   549                           	psect	bssBANK0
   550  0000F2                     __pbssBANK0:
   551                           	opt stack 0
   552  0000F2                     _USART_Status:
   553                           	opt stack 0
   554  0000F2                     	ds	1
   555  0000F3                     _str:
   556                           	opt stack 0
   557  0000F3                     	ds	11
   558  0000FE                     _time:
   559                           	opt stack 0
   560  0000FE                     	ds	2
   561                           tblptru	equ	0xFF8
   562                           tblptrh	equ	0xFF7
   563                           tblptrl	equ	0xFF6
   564                           tablat	equ	0xFF5
   565                           postinc0	equ	0xFEE
   566                           wreg	equ	0xFE8
   567                           postdec1	equ	0xFE5
   568                           fsr1l	equ	0xFE1
   569                           
   570                           	psect	dataBANK1
   571  000100                     __pdataBANK1:
   572                           	opt stack 0
   573  000100                     main@F4663:
   574                           	opt stack 0
   575  000100                     	ds	35
   576  000123                     Set_date@F214:
   577                           	opt stack 0
   578  000123                     	ds	30
   579  000141                     main@F4665:
   580                           	opt stack 0
   581  000141                     	ds	29
   582  00015E                     Get_data@F227:
   583                           	opt stack 0
   584  00015E                     	ds	19
   585  000171                     Get_data@F231:
   586                           	opt stack 0
   587  000171                     	ds	18
   588  000183                     Set_date@F216:
   589                           	opt stack 0
   590  000183                     	ds	18
   591  000195                     Set_day@F203:
   592                           	opt stack 0
   593  000195                     	ds	18
   594  0001A7                     Set_time@F200:
   595                           	opt stack 0
   596  0001A7                     	ds	18
   597  0001B9                     Get_data@F229:
   598                           	opt stack 0
   599  0001B9                     	ds	14
   600  0001C7                     write_DAY@F256:
   601                           	opt stack 0
   602  0001C7                     	ds	4
   603  0001CB                     write_DAY@F258:
   604                           	opt stack 0
   605  0001CB                     	ds	4
   606  0001CF                     write_DAY@F260:
   607                           	opt stack 0
   608  0001CF                     	ds	4
   609  0001D3                     write_DAY@F262:
   610                           	opt stack 0
   611  0001D3                     	ds	4
   612  0001D7                     write_DAY@F264:
   613                           	opt stack 0
   614  0001D7                     	ds	4
   615  0001DB                     write_DAY@F266:
   616                           	opt stack 0
   617  0001DB                     	ds	4
   618  0001DF                     write_DAY@F268:
   619                           	opt stack 0
   620  0001DF                     	ds	4
   621  0001E3                     Get_data@F233:
   622                           	opt stack 0
   623  0001E3                     	ds	3
   624  0001E6                     Get_data@F235:
   625                           	opt stack 0
   626  0001E6                     	ds	3
   627  0001E9                     Get_data@F237:
   628                           	opt stack 0
   629  0001E9                     	ds	3
   630  0001EC                     Get_data@F239:
   631                           	opt stack 0
   632  0001EC                     	ds	3
   633  0001EF                     Get_data@F241:
   634                           	opt stack 0
   635  0001EF                     	ds	3
   636  0001F2                     Get_data@F243:
   637                           	opt stack 0
   638  0001F2                     	ds	3
   639                           tblptru	equ	0xFF8
   640                           tblptrh	equ	0xFF7
   641                           tblptrl	equ	0xFF6
   642                           tablat	equ	0xFF5
   643                           postinc0	equ	0xFEE
   644                           wreg	equ	0xFE8
   645                           postdec1	equ	0xFE5
   646                           fsr1l	equ	0xFE1
   647                           
   648                           	psect	dataBANK2
   649  000200                     __pdataBANK2:
   650                           	opt stack 0
   651  000200                     Set_day@F205:
   652                           	opt stack 0
   653  000200                     	ds	67
   654  000243                     Set_time@F198:
   655                           	opt stack 0
   656  000243                     	ds	37
   657                           tblptru	equ	0xFF8
   658                           tblptrh	equ	0xFF7
   659                           tblptrl	equ	0xFF6
   660                           tablat	equ	0xFF5
   661                           postinc0	equ	0xFEE
   662                           wreg	equ	0xFE8
   663                           postdec1	equ	0xFE5
   664                           fsr1l	equ	0xFE1
   665                           
   666                           	psect	cstackBANK0
   667  000060                     __pcstackBANK0:
   668                           	opt stack 0
   669  000060                     ??_Get_data:
   670                           
   671                           ; 0 bytes @ 0x0
   672  000060                     	ds	1
   673  000061                     Get_data@str2:
   674                           	opt stack 0
   675                           
   676                           ; 19 bytes @ 0x1
   677  000061                     	ds	19
   678  000074                     Get_data@str8:
   679                           	opt stack 0
   680                           
   681                           ; 14 bytes @ 0x14
   682  000074                     	ds	14
   683  000082                     Get_data@error:
   684                           	opt stack 0
   685                           
   686                           ; 18 bytes @ 0x22
   687  000082                     	ds	18
   688  000094                     Get_data@s_1:
   689                           	opt stack 0
   690                           
   691                           ; 3 bytes @ 0x34
   692  000094                     	ds	3
   693  000097                     Get_data@s_2:
   694                           	opt stack 0
   695                           
   696                           ; 3 bytes @ 0x37
   697  000097                     	ds	3
   698  00009A                     Get_data@s_3:
   699                           	opt stack 0
   700                           
   701                           ; 3 bytes @ 0x3A
   702  00009A                     	ds	3
   703  00009D                     Get_data@s_4:
   704                           	opt stack 0
   705                           
   706                           ; 3 bytes @ 0x3D
   707  00009D                     	ds	3
   708  0000A0                     Get_data@s_5:
   709                           	opt stack 0
   710                           
   711                           ; 3 bytes @ 0x40
   712  0000A0                     	ds	3
   713  0000A3                     Get_data@s_6:
   714                           	opt stack 0
   715                           
   716                           ; 3 bytes @ 0x43
   717  0000A3                     	ds	3
   718  0000A6                     Get_data@day:
   719                           	opt stack 0
   720                           
   721                           ; 1 bytes @ 0x46
   722  0000A6                     	ds	1
   723  0000A7                     Get_data@s:
   724                           	opt stack 0
   725                           
   726                           ; 1 bytes @ 0x47
   727  0000A7                     	ds	1
   728  0000A8                     Get_data@m:
   729                           	opt stack 0
   730                           
   731                           ; 1 bytes @ 0x48
   732  0000A8                     	ds	1
   733  0000A9                     Get_data@h:
   734                           	opt stack 0
   735                           
   736                           ; 1 bytes @ 0x49
   737  0000A9                     	ds	1
   738  0000AA                     Get_data@year:
   739                           	opt stack 0
   740                           
   741                           ; 1 bytes @ 0x4A
   742  0000AA                     	ds	1
   743  0000AB                     Get_data@date:
   744                           	opt stack 0
   745                           
   746                           ; 1 bytes @ 0x4B
   747  0000AB                     	ds	1
   748  0000AC                     Get_data@month:
   749                           	opt stack 0
   750                           
   751                           ; 1 bytes @ 0x4C
   752  0000AC                     	ds	1
   753  0000AD                     Get_data@mode:
   754                           	opt stack 0
   755                           
   756                           ; 1 bytes @ 0x4D
   757  0000AD                     	ds	1
   758  0000AE                     ??_main:
   759                           
   760                           ; 0 bytes @ 0x4E
   761  0000AE                     	ds	1
   762  0000AF                     main@str7:
   763                           	opt stack 0
   764                           
   765                           ; 35 bytes @ 0x4F
   766  0000AF                     	ds	35
   767  0000D2                     main@str8:
   768                           	opt stack 0
   769                           
   770                           ; 29 bytes @ 0x72
   771  0000D2                     	ds	29
   772  0000EF                     main@mode:
   773                           	opt stack 0
   774                           
   775                           ; 1 bytes @ 0x8F
   776  0000EF                     	ds	1
   777  0000F0                     main@config1:
   778                           	opt stack 0
   779                           
   780                           ; 1 bytes @ 0x90
   781  0000F0                     	ds	1
   782  0000F1                     main@c:
   783                           	opt stack 0
   784                           
   785                           ; 1 bytes @ 0x91
   786  0000F1                     	ds	1
   787                           tblptru	equ	0xFF8
   788                           tblptrh	equ	0xFF7
   789                           tblptrl	equ	0xFF6
   790                           tablat	equ	0xFF5
   791                           postinc0	equ	0xFEE
   792                           wreg	equ	0xFE8
   793                           postdec1	equ	0xFE5
   794                           fsr1l	equ	0xFE1
   795                           
   796                           	psect	cstackCOMRAM
   797  000001                     __pcstackCOMRAM:
   798                           	opt stack 0
   799  000001                     ?_Delay1KTCYx:
   800                           	opt stack 0
   801  000001                     ?_OpenI2C:
   802                           	opt stack 0
   803  000001                     ?_OpenUSART:
   804                           	opt stack 0
   805  000001                     ?_WriteUSART:
   806                           	opt stack 0
   807  000001                     ?_Clear_array:
   808                           	opt stack 0
   809  000001                     ?_Write_ARR:
   810                           	opt stack 0
   811  000001                     ?_WriteI2C:
   812                           	opt stack 0
   813  000001                     ?_BCD_format:
   814                           	opt stack 0
   815  000001                     ?_BCD_to_DEC:
   816                           	opt stack 0
   817  000001                     ?_strcmp:
   818                           	opt stack 0
   819  000001                     BCD_to_DEC@c:
   820                           	opt stack 0
   821  000001                     ReadBUF@c:
   822                           	opt stack 0
   823  000001                     OpenUSART@config:
   824                           	opt stack 0
   825  000001                     ReadUSART@data:
   826                           	opt stack 0
   827  000001                     WriteUSART@data:
   828                           	opt stack 0
   829  000001                     OpenI2C@sync_mode:
   830                           	opt stack 0
   831  000001                     WriteI2C@data_out:
   832                           	opt stack 0
   833  000001                     Delay1KTCYx@unit:
   834                           	opt stack 0
   835  000001                     BCD_format@str:
   836                           	opt stack 0
   837  000001                     Clear_array@e:
   838                           	opt stack 0
   839  000001                     Write_ARR@c:
   840                           	opt stack 0
   841  000001                     strcmp@s1:
   842                           	opt stack 0
   843                           
   844                           ; 2 bytes @ 0x0
   845  000001                     	ds	1
   846  000002                     ?_delay_us:
   847                           	opt stack 0
   848  000002                     ??_BCD_to_DEC:
   849  000002                     ?_Write:
   850                           	opt stack 0
   851  000002                     delay_us@t:
   852                           	opt stack 0
   853  000002                     Write@data:
   854                           	opt stack 0
   855  000002                     OpenI2C@slew:
   856                           	opt stack 0
   857  000002                     OpenUSART@spbrg:
   858                           	opt stack 0
   859                           
   860                           ; 2 bytes @ 0x1
   861  000002                     	ds	1
   862  000003                     ?_Write_str:
   863                           	opt stack 0
   864  000003                     ??_Read_char:
   865  000003                     ?_Read_string:
   866                           	opt stack 0
   867  000003                     ??_delay_us:
   868  000003                     ??_BCD_format:
   869  000003                     Clear_array@n:
   870                           	opt stack 0
   871  000003                     Write_ARR@e:
   872                           	opt stack 0
   873  000003                     Write_str@c:
   874                           	opt stack 0
   875  000003                     Read_string@buffer:
   876                           	opt stack 0
   877  000003                     strcmp@s2:
   878                           	opt stack 0
   879                           
   880                           ; 2 bytes @ 0x2
   881  000003                     	ds	1
   882  000004                     ?_UsartConfig:
   883                           	opt stack 0
   884  000004                     ??_Clear_array:
   885  000004                     delay_us@i:
   886                           	opt stack 0
   887  000004                     BCD_format@a:
   888                           	opt stack 0
   889  000004                     UsartConfig@config1:
   890                           	opt stack 0
   891  000004                     Read_char@c:
   892                           	opt stack 0
   893                           
   894                           ; 1 bytes @ 0x3
   895  000004                     	ds	1
   896  000005                     ??_Write_str:
   897  000005                     ??_strcmp:
   898  000005                     ?_write_DAY:
   899                           	opt stack 0
   900  000005                     Clear_array@i:
   901                           	opt stack 0
   902  000005                     write_DAY@day:
   903                           	opt stack 0
   904  000005                     UsartConfig@config2:
   905                           	opt stack 0
   906  000005                     Read_string@len:
   907                           	opt stack 0
   908                           
   909                           ; 1 bytes @ 0x4
   910  000005                     	ds	1
   911  000006                     ??_Read_string:
   912  000006                     strcmp@r:
   913                           	opt stack 0
   914  000006                     write_DAY@day_1:
   915                           	opt stack 0
   916                           
   917                           ; 4 bytes @ 0x5
   918  000006                     	ds	1
   919  000007                     Read_string@i:
   920                           	opt stack 0
   921                           
   922                           ; 1 bytes @ 0x6
   923  000007                     	ds	1
   924  000008                     Read_string@data:
   925                           	opt stack 0
   926                           
   927                           ; 1 bytes @ 0x7
   928  000008                     	ds	1
   929  000009                     ?_Set_time:
   930                           	opt stack 0
   931  000009                     ??_Set_day:
   932  000009                     ?_Set_date:
   933                           	opt stack 0
   934  000009                     Set_time@sec:
   935                           	opt stack 0
   936  000009                     Set_date@date:
   937                           	opt stack 0
   938                           
   939                           ; 2 bytes @ 0x8
   940  000009                     	ds	1
   941  00000A                     write_DAY@day_2:
   942                           	opt stack 0
   943  00000A                     Set_day@str5:
   944                           	opt stack 0
   945                           
   946                           ; 67 bytes @ 0x9
   947  00000A                     	ds	1
   948  00000B                     Set_time@min:
   949                           	opt stack 0
   950  00000B                     Set_date@month:
   951                           	opt stack 0
   952                           
   953                           ; 2 bytes @ 0xA
   954  00000B                     	ds	2
   955  00000D                     Set_time@hour:
   956                           	opt stack 0
   957  00000D                     Set_date@year:
   958                           	opt stack 0
   959                           
   960                           ; 2 bytes @ 0xC
   961  00000D                     	ds	1
   962  00000E                     write_DAY@day_3:
   963                           	opt stack 0
   964                           
   965                           ; 4 bytes @ 0xD
   966  00000E                     	ds	1
   967  00000F                     ??_Set_date:
   968  00000F                     Set_time@mode:
   969                           	opt stack 0
   970                           
   971                           ; 1 bytes @ 0xE
   972  00000F                     	ds	1
   973  000010                     ??_Set_time:
   974  000010                     Set_date@str6:
   975                           	opt stack 0
   976                           
   977                           ; 30 bytes @ 0xF
   978  000010                     	ds	1
   979  000011                     Set_time@str3:
   980                           	opt stack 0
   981                           
   982                           ; 37 bytes @ 0x10
   983  000011                     	ds	1
   984  000012                     write_DAY@day_4:
   985                           	opt stack 0
   986                           
   987                           ; 4 bytes @ 0x11
   988  000012                     	ds	4
   989  000016                     write_DAY@day_5:
   990                           	opt stack 0
   991                           
   992                           ; 4 bytes @ 0x15
   993  000016                     	ds	4
   994  00001A                     write_DAY@day_6:
   995                           	opt stack 0
   996                           
   997                           ; 4 bytes @ 0x19
   998  00001A                     	ds	4
   999  00001E                     write_DAY@day_7:
  1000                           	opt stack 0
  1001                           
  1002                           ; 4 bytes @ 0x1D
  1003  00001E                     	ds	4
  1004  000022                     ?_delay_ms:
  1005                           	opt stack 0
  1006  000022                     ?_Write_I2C:
  1007                           	opt stack 0
  1008  000022                     delay_ms@t:
  1009                           	opt stack 0
  1010  000022                     Write_I2C@c:
  1011                           	opt stack 0
  1012                           
  1013                           ; 1 bytes @ 0x21
  1014  000022                     	ds	1
  1015  000023                     ??_delay_ms:
  1016  000023                     
  1017                           ; 0 bytes @ 0x22
  1018  000023                     	ds	1
  1019  000024                     delay_ms@i:
  1020                           	opt stack 0
  1021                           
  1022                           ; 1 bytes @ 0x23
  1023  000024                     	ds	1
  1024  000025                     ?_Write_time_:
  1025                           	opt stack 0
  1026  000025                     ?_Write_time:
  1027                           	opt stack 0
  1028  000025                     ??_Read:
  1029  000025                     Write_time_@s:
  1030                           	opt stack 0
  1031  000025                     Write_time@day:
  1032                           	opt stack 0
  1033                           
  1034                           ; 1 bytes @ 0x24
  1035  000025                     	ds	1
  1036  000026                     Read@c:
  1037                           	opt stack 0
  1038  000026                     Write_time_@m:
  1039                           	opt stack 0
  1040  000026                     Write_time@date:
  1041                           	opt stack 0
  1042                           
  1043                           ; 1 bytes @ 0x25
  1044  000026                     	ds	1
  1045  000027                     ?_Read_sec:
  1046                           	opt stack 0
  1047  000027                     ?_Read_min:
  1048                           	opt stack 0
  1049  000027                     ?_Read_hour:
  1050                           	opt stack 0
  1051  000027                     ?_Read_date:
  1052                           	opt stack 0
  1053  000027                     ?_Read_month:
  1054                           	opt stack 0
  1055  000027                     ?_Read_year:
  1056                           	opt stack 0
  1057  000027                     Write_time_@h:
  1058                           	opt stack 0
  1059  000027                     Write_time@month:
  1060                           	opt stack 0
  1061  000027                     Read_sec@e:
  1062                           	opt stack 0
  1063  000027                     Read_min@e:
  1064                           	opt stack 0
  1065  000027                     Read_hour@e:
  1066                           	opt stack 0
  1067  000027                     Read_date@e:
  1068                           	opt stack 0
  1069  000027                     Read_month@e:
  1070                           	opt stack 0
  1071  000027                     Read_year@e:
  1072                           	opt stack 0
  1073                           
  1074                           ; 2 bytes @ 0x26
  1075  000027                     	ds	1
  1076  000028                     ??_Write_time_:
  1077  000028                     Write_time@year:
  1078                           	opt stack 0
  1079                           
  1080                           ; 1 bytes @ 0x27
  1081  000028                     	ds	1
  1082  000029                     ??_Write_time:
  1083  000029                     Read_sec@c:
  1084                           	opt stack 0
  1085  000029                     Read_min@c:
  1086                           	opt stack 0
  1087  000029                     Read_hour@mode:
  1088                           	opt stack 0
  1089  000029                     Read_date@c:
  1090                           	opt stack 0
  1091  000029                     Read_month@c:
  1092                           	opt stack 0
  1093  000029                     Read_year@c:
  1094                           	opt stack 0
  1095                           
  1096                           ; 1 bytes @ 0x28
  1097  000029                     	ds	1
  1098  00002A                     ??_Read_hour:
  1099                           
  1100                           ; 0 bytes @ 0x29
  1101  00002A                     	ds	2
  1102  00002C                     Read_hour@i:
  1103                           	opt stack 0
  1104                           
  1105                           ; 1 bytes @ 0x2B
  1106  00002C                     	ds	1
  1107  00002D                     Read_hour@c:
  1108                           	opt stack 0
  1109                           
  1110                           ; 1 bytes @ 0x2C
  1111  00002D                     	ds	1
  1112  00002E                     ?_Read_time:
  1113                           	opt stack 0
  1114  00002E                     Read_time@mode:
  1115                           	opt stack 0
  1116  00002E                     Set_date@error:
  1117                           	opt stack 0
  1118                           
  1119                           ; 18 bytes @ 0x2D
  1120  00002E                     	ds	1
  1121  00002F                     ??_Read_time:
  1122                           
  1123                           ; 0 bytes @ 0x2E
  1124  00002F                     	ds	7
  1125  000036                     Set_time@error:
  1126                           	opt stack 0
  1127                           
  1128                           ; 18 bytes @ 0x35
  1129  000036                     	ds	10
  1130  000040                     Set_date@x:
  1131                           	opt stack 0
  1132                           
  1133                           ; 1 bytes @ 0x3F
  1134  000040                     	ds	1
  1135  000041                     Set_date@y:
  1136                           	opt stack 0
  1137                           
  1138                           ; 1 bytes @ 0x40
  1139  000041                     	ds	1
  1140  000042                     Set_date@z:
  1141                           	opt stack 0
  1142                           
  1143                           ; 1 bytes @ 0x41
  1144  000042                     	ds	6
  1145  000048                     Set_time@s:
  1146                           	opt stack 0
  1147                           
  1148                           ; 1 bytes @ 0x47
  1149  000048                     	ds	1
  1150  000049                     Set_time@m:
  1151                           	opt stack 0
  1152                           
  1153                           ; 1 bytes @ 0x48
  1154  000049                     	ds	1
  1155  00004A                     Set_time@x:
  1156                           	opt stack 0
  1157                           
  1158                           ; 1 bytes @ 0x49
  1159  00004A                     	ds	1
  1160  00004B                     Set_time@y:
  1161                           	opt stack 0
  1162                           
  1163                           ; 1 bytes @ 0x4A
  1164  00004B                     	ds	1
  1165  00004C                     Set_time@z:
  1166                           	opt stack 0
  1167                           
  1168                           ; 1 bytes @ 0x4B
  1169  00004C                     	ds	1
  1170  00004D                     Set_time@h:
  1171                           	opt stack 0
  1172  00004D                     Set_day@error:
  1173                           	opt stack 0
  1174                           
  1175                           ; 18 bytes @ 0x4C
  1176  00004D                     	ds	18
  1177  00005F                     Set_day@day:
  1178                           	opt stack 0
  1179                           
  1180                           ; 1 bytes @ 0x5E
  1181  00005F                     	ds	1
  1182                           tblptru	equ	0xFF8
  1183                           tblptrh	equ	0xFF7
  1184                           tblptrl	equ	0xFF6
  1185                           tablat	equ	0xFF5
  1186                           postinc0	equ	0xFEE
  1187                           wreg	equ	0xFE8
  1188                           postdec1	equ	0xFE5
  1189                           fsr1l	equ	0xFE1
  1190                           
  1191 ;;
  1192 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  1193 ;;
  1194 ;; *************** function _main *****************
  1195 ;; Defined at:
  1196 ;;		line 72 in file "main.c"
  1197 ;; Parameters:    Size  Location     Type
  1198 ;;		None
  1199 ;; Auto vars:     Size  Location     Type
  1200 ;;  str7           35   79[BANK0 ] unsigned char [35]
  1201 ;;  str8           29  114[BANK0 ] unsigned char [29]
  1202 ;;  c               1  145[BANK0 ] unsigned char 
  1203 ;;  config1         1  144[BANK0 ] unsigned char 
  1204 ;;  mode            1  143[BANK0 ] unsigned char 
  1205 ;; Return value:  Size  Location     Type
  1206 ;;		None               void
  1207 ;; Registers used:
  1208 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1209 ;; Tracked objects:
  1210 ;;		On entry : 0/0
  1211 ;;		On exit  : 0/0
  1212 ;;		Unchanged: 0/0
  1213 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1214 ;;      Params:         0       0       0       0       0       0       0       0       0
  1215 ;;      Locals:         0      67       0       0       0       0       0       0       0
  1216 ;;      Temps:          0       1       0       0       0       0       0       0       0
  1217 ;;      Totals:         0      68       0       0       0       0       0       0       0
  1218 ;;Total ram usage:       68 bytes
  1219 ;; Hardware stack levels required when called:    6
  1220 ;; This function calls:
  1221 ;;		_delay_ms
  1222 ;;		_UsartConfig
  1223 ;;		_Write_str
  1224 ;;		_Read_char
  1225 ;;		_Get_data
  1226 ;;		_Read_time
  1227 ;; This function is called by:
  1228 ;;		Startup code after reset
  1229 ;; This function uses a non-reentrant model
  1230 ;;
  1231                           
  1232                           	psect	text0
  1233  007808                     __ptext0:
  1234                           	opt stack 0
  1235  007808                     _main:
  1236                           	opt stack 25
  1237                           
  1238                           ;main.c: 73: unsigned char mode;
  1239                           ;main.c: 74: unsigned char str7[35] = "\nDo you want to set the time? y/n";
  1240                           
  1241                           ;incstack = 0
  1242                           ;incstack = 0
  1243  007808  EE21  F000         	lfsr	2,main@F4663
  1244  00780C  EE10  F0AF         	lfsr	1,main@str7
  1245  007810  0E23               	movlw	35
  1246  007812                     u2531:
  1247  007812  CFDE FFE6          	movff	postinc2,postinc1
  1248  007816  2EE8               	decfsz	wreg,f,c
  1249  007818  D7FC               	goto	u2531
  1250                           
  1251                           ;main.c: 75: unsigned char str8[29] = "Please enter a valid data..!";
  1252  00781A  EE21  F041         	lfsr	2,main@F4665
  1253  00781E  EE10  F0D2         	lfsr	1,main@str8
  1254  007822  0E1D               	movlw	29
  1255  007824                     u2541:
  1256  007824  CFDE FFE6          	movff	postinc2,postinc1
  1257  007828  2EE8               	decfsz	wreg,f,c
  1258  00782A  D7FC               	goto	u2541
  1259                           
  1260                           ;main.c: 76: unsigned char config1 = 0x00, c;
  1261  00782C  0100               	movlb	0	; () banked
  1262  00782E  6FAE               	movwf	??_main& (0+255),b
  1263  007830  0E00               	movlw	0
  1264  007832  0100               	movlb	0	; () banked
  1265  007834  0100               	movlb	0	; () banked
  1266  007836  6FF0               	movwf	main@config1& (0+255),b
  1267  007838  0100               	movlb	0	; () banked
  1268  00783A  51AE               	movf	??_main& (0+255),w,b
  1269                           
  1270                           ; BSR set to: 0
  1271                           ;main.c: 77: config1 = (0b01111111 & 0b10111111 & 0b11111110 & 0b11111101 & 0b11111111 &
      +                           0b11101111);
  1272  00783C  0100               	movlb	0	; () banked
  1273  00783E  6FAE               	movwf	??_main& (0+255),b
  1274  007840  0E2C               	movlw	44
  1275  007842  0100               	movlb	0	; () banked
  1276  007844  0100               	movlb	0	; () banked
  1277  007846  6FF0               	movwf	main@config1& (0+255),b
  1278  007848  0100               	movlb	0	; () banked
  1279  00784A  51AE               	movf	??_main& (0+255),w,b
  1280                           
  1281                           ; BSR set to: 0
  1282                           ;main.c: 78: SSPADD = ((20000000/100000)/4-1);;
  1283  00784C  0E31               	movlw	49
  1284  00784E  6EC8               	movwf	4040,c	;volatile
  1285                           
  1286                           ; BSR set to: 0
  1287                           ;main.c: 79: UsartConfig(config1, ((20000000/9600/64)-1));
  1288  007850  C0F0  F004         	movff	main@config1,?_UsartConfig
  1289  007854  0100               	movlb	0	; () banked
  1290  007856  6FAE               	movwf	??_main& (0+255),b
  1291  007858  0E1F               	movlw	31
  1292  00785A  6E05               	movwf	?_UsartConfig+1,c
  1293  00785C  0100               	movlb	0	; () banked
  1294  00785E  51AE               	movf	??_main& (0+255),w,b
  1295  007860  ECE5  F036         	call	_UsartConfig	;wreg free
  1296  007864                     l2777:
  1297                           
  1298                           ;main.c: 81: {
  1299                           ;main.c: 82: Write_str(str7);
  1300  007864  0100               	movlb	0	; () banked
  1301  007866  0E00               	movlw	high main@str7
  1302  007868  6E04               	movwf	?_Write_str+1,c
  1303  00786A  0100               	movlb	0	; () banked
  1304  00786C  0EAF               	movlw	low main@str7
  1305  00786E  6E03               	movwf	?_Write_str,c
  1306  007870  EC91  F037         	call	_Write_str	;wreg free
  1307                           
  1308                           ;main.c: 83: c = Read_char();
  1309  007874  EC7A  F037         	call	_Read_char	;wreg free
  1310  007878  0100               	movlb	0	; () banked
  1311  00787A  0100               	movlb	0	; () banked
  1312  00787C  6FF1               	movwf	main@c& (0+255),b
  1313                           
  1314                           ; BSR set to: 0
  1315                           ;main.c: 84: if((c== 'Y') || (c== 'y'))
  1316  00787E  0100               	movlb	0	; () banked
  1317  007880  0100               	movlb	0	; () banked
  1318  007882  51F1               	movf	main@c& (0+255),w,b
  1319  007884  0A59               	xorlw	89
  1320  007886  B4D8               	btfsc	status,2,c
  1321  007888  D006               	goto	l2785
  1322                           
  1323                           ; BSR set to: 0
  1324  00788A  0100               	movlb	0	; () banked
  1325  00788C  0100               	movlb	0	; () banked
  1326  00788E  51F1               	movf	main@c& (0+255),w,b
  1327  007890  0A79               	xorlw	121
  1328  007892  A4D8               	btfss	status,2,c
  1329  007894  D006               	goto	l2787
  1330  007896                     l2785:
  1331                           
  1332                           ; BSR set to: 0
  1333                           ;main.c: 85: mode = Get_data();
  1334  007896  EC9B  F03E         	call	_Get_data	;wreg free
  1335  00789A  0100               	movlb	0	; () banked
  1336  00789C  0100               	movlb	0	; () banked
  1337  00789E  6FEF               	movwf	main@mode& (0+255),b
  1338  0078A0  D014               	goto	l2795
  1339  0078A2                     l2787:
  1340                           
  1341                           ; BSR set to: 0
  1342                           ;main.c: 86: else if((c== 'N') || (c== 'n'))
  1343  0078A2  0100               	movlb	0	; () banked
  1344  0078A4  0100               	movlb	0	; () banked
  1345  0078A6  51F1               	movf	main@c& (0+255),w,b
  1346  0078A8  0A4E               	xorlw	78
  1347  0078AA  B4D8               	btfsc	status,2,c
  1348  0078AC  D026               	goto	l2803
  1349                           
  1350                           ; BSR set to: 0
  1351  0078AE  0100               	movlb	0	; () banked
  1352  0078B0  0100               	movlb	0	; () banked
  1353  0078B2  51F1               	movf	main@c& (0+255),w,b
  1354  0078B4  0A6E               	xorlw	110
  1355  0078B6  B4D8               	btfsc	status,2,c
  1356  0078B8  D020               	goto	l2803
  1357                           
  1358                           ; BSR set to: 0
  1359                           ;main.c: 88: else
  1360                           ;main.c: 89: Write_str(str8);
  1361                           
  1362                           ; BSR set to: 0
  1363                           
  1364                           ; BSR set to: 0
  1365                           
  1366                           ; BSR set to: 0
  1367                           ;main.c: 87: break;
  1368  0078BA  0100               	movlb	0	; () banked
  1369  0078BC  0E00               	movlw	high main@str8
  1370  0078BE  6E04               	movwf	?_Write_str+1,c
  1371  0078C0  0100               	movlb	0	; () banked
  1372  0078C2  0ED2               	movlw	low main@str8
  1373  0078C4  6E03               	movwf	?_Write_str,c
  1374  0078C6  EC91  F037         	call	_Write_str	;wreg free
  1375  0078CA                     l2795:
  1376                           
  1377                           ;main.c: 90: }while(!((c== 'Y') || (c== 'y') || (c== 'N') || (c== 'n'))) ;
  1378  0078CA  0100               	movlb	0	; () banked
  1379  0078CC  0100               	movlb	0	; () banked
  1380  0078CE  51F1               	movf	main@c& (0+255),w,b
  1381  0078D0  0A59               	xorlw	89
  1382  0078D2  B4D8               	btfsc	status,2,c
  1383  0078D4  D012               	goto	l2803
  1384                           
  1385                           ; BSR set to: 0
  1386  0078D6  0100               	movlb	0	; () banked
  1387  0078D8  0100               	movlb	0	; () banked
  1388  0078DA  51F1               	movf	main@c& (0+255),w,b
  1389  0078DC  0A79               	xorlw	121
  1390  0078DE  B4D8               	btfsc	status,2,c
  1391  0078E0  D00C               	goto	l2803
  1392                           
  1393                           ; BSR set to: 0
  1394  0078E2  0100               	movlb	0	; () banked
  1395  0078E4  0100               	movlb	0	; () banked
  1396  0078E6  51F1               	movf	main@c& (0+255),w,b
  1397  0078E8  0A4E               	xorlw	78
  1398  0078EA  B4D8               	btfsc	status,2,c
  1399  0078EC  D006               	goto	l2803
  1400                           
  1401                           ; BSR set to: 0
  1402  0078EE  0100               	movlb	0	; () banked
  1403  0078F0  0100               	movlb	0	; () banked
  1404  0078F2  51F1               	movf	main@c& (0+255),w,b
  1405  0078F4  0A6E               	xorlw	110
  1406  0078F6  A4D8               	btfss	status,2,c
  1407  0078F8  D7B5               	goto	l2777
  1408  0078FA                     l2803:
  1409                           
  1410                           ;main.c: 92: {
  1411                           ;main.c: 93: Read_time(mode);
  1412  0078FA  C0EF  F02E         	movff	main@mode,?_Read_time
  1413  0078FE  EC85  F03B         	call	_Read_time	;wreg free
  1414                           
  1415                           ;main.c: 94: Write_str(time);
  1416  007902  0100               	movlb	0	; () banked
  1417  007904  0E00               	movlw	high _time
  1418  007906  6E04               	movwf	?_Write_str+1,c
  1419  007908  0100               	movlb	0	; () banked
  1420  00790A  0EFE               	movlw	low _time
  1421  00790C  6E03               	movwf	?_Write_str,c
  1422  00790E  EC91  F037         	call	_Write_str	;wreg free
  1423                           
  1424                           ;main.c: 95: delay_ms(10);
  1425  007912  0100               	movlb	0	; () banked
  1426  007914  6FAE               	movwf	??_main& (0+255),b
  1427  007916  0E0A               	movlw	10
  1428  007918  6E22               	movwf	?_delay_ms,c
  1429  00791A  0100               	movlb	0	; () banked
  1430  00791C  51AE               	movf	??_main& (0+255),w,b
  1431  00791E  EC1E  F037         	call	_delay_ms	;wreg free
  1432  007922  D7EB               	goto	l2803
  1433  007924                     __end_of_main:
  1434                           	opt stack 0
  1435                           tblptru	equ	0xFF8
  1436                           tblptrh	equ	0xFF7
  1437                           tblptrl	equ	0xFF6
  1438                           tablat	equ	0xFF5
  1439                           postinc0	equ	0xFEE
  1440                           wreg	equ	0xFE8
  1441                           postinc1	equ	0xFE6
  1442                           postdec1	equ	0xFE5
  1443                           fsr1l	equ	0xFE1
  1444                           postinc2	equ	0xFDE
  1445                           status	equ	0xFD8
  1446                           
  1447 ;; *************** function _Read_time *****************
  1448 ;; Defined at:
  1449 ;;		line 101 in file "i2c_1.c"
  1450 ;; Parameters:    Size  Location     Type
  1451 ;;  mode            1   45[COMRAM] unsigned char 
  1452 ;; Auto vars:     Size  Location     Type
  1453 ;;		None
  1454 ;; Return value:  Size  Location     Type
  1455 ;;		None               void
  1456 ;; Registers used:
  1457 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  1458 ;; Tracked objects:
  1459 ;;		On entry : 0/0
  1460 ;;		On exit  : 0/0
  1461 ;;		Unchanged: 0/0
  1462 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1463 ;;      Params:         1       0       0       0       0       0       0       0       0
  1464 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1465 ;;      Temps:          2       0       0       0       0       0       0       0       0
  1466 ;;      Totals:         3       0       0       0       0       0       0       0       0
  1467 ;;Total ram usage:        3 bytes
  1468 ;; Hardware stack levels used:    1
  1469 ;; Hardware stack levels required when called:    5
  1470 ;; This function calls:
  1471 ;;		_delay_ms
  1472 ;;		_delay_us
  1473 ;;		_Clear_array
  1474 ;;		_Read_sec
  1475 ;;		_Read_min
  1476 ;;		_Read_hour
  1477 ;;		_Read_day
  1478 ;;		_Read_date
  1479 ;;		_Read_month
  1480 ;;		_Read_year
  1481 ;;		_Write_I2C
  1482 ;;		_OpenI2C
  1483 ;;		_CloseI2C
  1484 ;;		_IdleI2C
  1485 ;; This function is called by:
  1486 ;;		_main
  1487 ;; This function uses a non-reentrant model
  1488 ;;
  1489                           
  1490                           	psect	text1
  1491  00770A                     __ptext1:
  1492                           	opt stack 0
  1493  00770A                     _Read_time:
  1494                           	opt stack 25
  1495                           
  1496                           ;i2c_1.c: 102: OpenI2C(0b00001000, 0b10000000);
  1497                           
  1498                           ;incstack = 0
  1499                           ;incstack = 0
  1500  00770A  6E2F               	movwf	??_Read_time& (0+255),c
  1501  00770C  0E08               	movlw	8
  1502  00770E  6E01               	movwf	?_OpenI2C,c
  1503  007710  502F               	movf	??_Read_time& (0+255),w,c
  1504  007712  6E30               	movwf	(??_Read_time+1)& (0+255),c
  1505  007714  0E80               	movlw	128
  1506  007716  6E02               	movwf	?_OpenI2C+1,c
  1507  007718  5030               	movf	(??_Read_time+1)& (0+255),w,c
  1508  00771A  EC10  F037         	call	_OpenI2C	;wreg free
  1509                           
  1510                           ;i2c_1.c: 103: delay_ms(1);
  1511  00771E  6E2F               	movwf	??_Read_time& (0+255),c
  1512  007720  0E01               	movlw	1
  1513  007722  6E22               	movwf	?_delay_ms,c
  1514  007724  502F               	movf	??_Read_time& (0+255),w,c
  1515  007726  EC1E  F037         	call	_delay_ms	;wreg free
  1516                           
  1517                           ;i2c_1.c: 104: SSPCON2bits.SEN=1;while(SSPCON2bits.SEN);
  1518  00772A  80C5               	bsf	4037,0,c	;volatile
  1519  00772C                     l336:
  1520  00772C  B0C5               	btfsc	4037,0,c	;volatile
  1521  00772E  D7FE               	goto	l336
  1522                           
  1523                           ;i2c_1.c: 105: delay_us(10);
  1524  007730  6E2F               	movwf	??_Read_time& (0+255),c
  1525  007732  0E0A               	movlw	10
  1526  007734  6E02               	movwf	?_delay_us,c
  1527  007736  502F               	movf	??_Read_time& (0+255),w,c
  1528  007738  EC2E  F037         	call	_delay_us	;wreg free
  1529                           
  1530                           ;i2c_1.c: 106: Write_I2C(0xD0);
  1531  00773C  6E2F               	movwf	??_Read_time& (0+255),c
  1532  00773E  0ED0               	movlw	208
  1533  007740  6E22               	movwf	?_Write_I2C,c
  1534  007742  502F               	movf	??_Read_time& (0+255),w,c
  1535  007744  ECD0  F036         	call	_Write_I2C	;wreg free
  1536                           
  1537                           ;i2c_1.c: 107: delay_ms(1);
  1538  007748  6E2F               	movwf	??_Read_time& (0+255),c
  1539  00774A  0E01               	movlw	1
  1540  00774C  6E22               	movwf	?_delay_ms,c
  1541  00774E  502F               	movf	??_Read_time& (0+255),w,c
  1542  007750  EC1E  F037         	call	_delay_ms	;wreg free
  1543                           
  1544                           ;i2c_1.c: 108: Write_I2C(0x00);
  1545  007754  6E2F               	movwf	??_Read_time& (0+255),c
  1546  007756  0E00               	movlw	0
  1547  007758  6E22               	movwf	?_Write_I2C,c
  1548  00775A  502F               	movf	??_Read_time& (0+255),w,c
  1549  00775C  ECD0  F036         	call	_Write_I2C	;wreg free
  1550                           
  1551                           ;i2c_1.c: 109: delay_ms(10);
  1552  007760  6E2F               	movwf	??_Read_time& (0+255),c
  1553  007762  0E0A               	movlw	10
  1554  007764  6E22               	movwf	?_delay_ms,c
  1555  007766  502F               	movf	??_Read_time& (0+255),w,c
  1556  007768  EC1E  F037         	call	_delay_ms	;wreg free
  1557                           
  1558                           ;i2c_1.c: 110: Clear_array(time, 33);
  1559  00776C  0100               	movlb	0	; () banked
  1560  00776E  0E00               	movlw	high _time
  1561  007770  6E02               	movwf	?_Clear_array+1,c
  1562  007772  0100               	movlb	0	; () banked
  1563  007774  0EFE               	movlw	low _time
  1564  007776  6E01               	movwf	?_Clear_array,c
  1565  007778  6E2F               	movwf	??_Read_time& (0+255),c
  1566  00777A  0E21               	movlw	33
  1567  00777C  6E03               	movwf	?_Clear_array+2,c
  1568  00777E  502F               	movf	??_Read_time& (0+255),w,c
  1569  007780  EC51  F037         	call	_Clear_array	;wreg free
  1570                           
  1571                           ;i2c_1.c: 111: Read_sec(time);
  1572  007784  0100               	movlb	0	; () banked
  1573  007786  0E00               	movlw	high _time
  1574  007788  6E28               	movwf	?_Read_sec+1,c
  1575  00778A  0100               	movlb	0	; () banked
  1576  00778C  0EFE               	movlw	low _time
  1577  00778E  6E27               	movwf	?_Read_sec,c
  1578  007790  EC0F  F038         	call	_Read_sec	;wreg free
  1579                           
  1580                           ;i2c_1.c: 112: Read_min(time);
  1581  007794  0100               	movlb	0	; () banked
  1582  007796  0E00               	movlw	high _time
  1583  007798  6E28               	movwf	?_Read_min+1,c
  1584  00779A  0100               	movlb	0	; () banked
  1585  00779C  0EFE               	movlw	low _time
  1586  00779E  6E27               	movwf	?_Read_min,c
  1587  0077A0  EC34  F038         	call	_Read_min	;wreg free
  1588                           
  1589                           ;i2c_1.c: 113: Read_hour(time, mode);
  1590  0077A4  0100               	movlb	0	; () banked
  1591  0077A6  0E00               	movlw	high _time
  1592  0077A8  6E28               	movwf	?_Read_hour+1,c
  1593  0077AA  0100               	movlb	0	; () banked
  1594  0077AC  0EFE               	movlw	low _time
  1595  0077AE  6E27               	movwf	?_Read_hour,c
  1596  0077B0  C02E  F029         	movff	Read_time@mode,?_Read_hour+2
  1597  0077B4  ECAD  F03A         	call	_Read_hour	;wreg free
  1598                           
  1599                           ;i2c_1.c: 114: Read_day();
  1600  0077B8  ECDE  F036         	call	_Read_day	;wreg free
  1601                           
  1602                           ;i2c_1.c: 115: Read_date(time);
  1603  0077BC  0100               	movlb	0	; () banked
  1604  0077BE  0E00               	movlw	high _time
  1605  0077C0  6E28               	movwf	?_Read_date+1,c
  1606  0077C2  0100               	movlb	0	; () banked
  1607  0077C4  0EFE               	movlw	low _time
  1608  0077C6  6E27               	movwf	?_Read_date,c
  1609  0077C8  EC28  F039         	call	_Read_date	;wreg free
  1610                           
  1611                           ;i2c_1.c: 116: Read_month(time);
  1612  0077CC  0100               	movlb	0	; () banked
  1613  0077CE  0E00               	movlw	high _time
  1614  0077D0  6E28               	movwf	?_Read_month+1,c
  1615  0077D2  0100               	movlb	0	; () banked
  1616  0077D4  0EFE               	movlw	low _time
  1617  0077D6  6E27               	movwf	?_Read_month,c
  1618  0077D8  EC59  F038         	call	_Read_month	;wreg free
  1619                           
  1620                           ;i2c_1.c: 117: Read_year(time);
  1621  0077DC  0100               	movlb	0	; () banked
  1622  0077DE  0E00               	movlw	high _time
  1623  0077E0  6E28               	movwf	?_Read_year+1,c
  1624  0077E2  0100               	movlb	0	; () banked
  1625  0077E4  0EFE               	movlw	low _time
  1626  0077E6  6E27               	movwf	?_Read_year,c
  1627  0077E8  ECFC  F038         	call	_Read_year	;wreg free
  1628                           
  1629                           ;i2c_1.c: 118: IdleI2C();
  1630  0077EC  ECC3  F036         	call	_IdleI2C	;wreg free
  1631                           
  1632                           ;i2c_1.c: 119: SSPCON2bits.ACKDT=1;SSPCON2bits.ACKEN=1;while(SSPCON2bits.ACKEN);
  1633  0077F0  8AC5               	bsf	4037,5,c	;volatile
  1634  0077F2  88C5               	bsf	4037,4,c	;volatile
  1635  0077F4                     l339:
  1636  0077F4  B8C5               	btfsc	4037,4,c	;volatile
  1637  0077F6  D7FE               	goto	l339
  1638                           
  1639                           ;i2c_1.c: 120: IdleI2C();
  1640  0077F8  ECC3  F036         	call	_IdleI2C	;wreg free
  1641                           
  1642                           ;i2c_1.c: 121: SSPCON2bits.PEN=1;while(SSPCON2bits.PEN);
  1643  0077FC  84C5               	bsf	4037,2,c	;volatile
  1644  0077FE                     l342:
  1645  0077FE  B4C5               	btfsc	4037,2,c	;volatile
  1646  007800  D7FE               	goto	l342
  1647                           
  1648                           ;i2c_1.c: 122: CloseI2C();
  1649  007802  ECBC  F036         	call	_CloseI2C	;wreg free
  1650  007806  0012               	return	
  1651  007808                     __end_of_Read_time:
  1652                           	opt stack 0
  1653                           tblptru	equ	0xFF8
  1654                           tblptrh	equ	0xFF7
  1655                           tblptrl	equ	0xFF6
  1656                           tablat	equ	0xFF5
  1657                           postinc0	equ	0xFEE
  1658                           wreg	equ	0xFE8
  1659                           postinc1	equ	0xFE6
  1660                           postdec1	equ	0xFE5
  1661                           fsr1l	equ	0xFE1
  1662                           postinc2	equ	0xFDE
  1663                           status	equ	0xFD8
  1664                           
  1665 ;; *************** function _Read_year *****************
  1666 ;; Defined at:
  1667 ;;		line 370 in file "time.c"
  1668 ;; Parameters:    Size  Location     Type
  1669 ;;  e               2   38[COMRAM] PTR unsigned char 
  1670 ;;		 -> time(2), 
  1671 ;; Auto vars:     Size  Location     Type
  1672 ;;  c               1   40[COMRAM] unsigned char 
  1673 ;; Return value:  Size  Location     Type
  1674 ;;		None               void
  1675 ;; Registers used:
  1676 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1677 ;; Tracked objects:
  1678 ;;		On entry : 0/0
  1679 ;;		On exit  : 0/0
  1680 ;;		Unchanged: 0/0
  1681 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1682 ;;      Params:         2       0       0       0       0       0       0       0       0
  1683 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1684 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1685 ;;      Totals:         3       0       0       0       0       0       0       0       0
  1686 ;;Total ram usage:        3 bytes
  1687 ;; Hardware stack levels used:    1
  1688 ;; Hardware stack levels required when called:    4
  1689 ;; This function calls:
  1690 ;;		_Read
  1691 ;; This function is called by:
  1692 ;;		_Read_time
  1693 ;; This function uses a non-reentrant model
  1694 ;;
  1695                           
  1696                           	psect	text2
  1697  0071F8                     __ptext2:
  1698                           	opt stack 0
  1699  0071F8                     _Read_year:
  1700                           	opt stack 25
  1701                           
  1702                           ;time.c: 371: unsigned char c;
  1703                           ;time.c: 372: e= e+30;
  1704                           
  1705                           ;incstack = 0
  1706                           ;incstack = 0
  1707  0071F8  0E1E               	movlw	30
  1708  0071FA  2427               	addwf	Read_year@e,w,c
  1709  0071FC  6E27               	movwf	Read_year@e,c
  1710  0071FE  0E00               	movlw	0
  1711  007200  2028               	addwfc	Read_year@e+1,w,c
  1712  007202  6E28               	movwf	Read_year@e+1,c
  1713                           
  1714                           ;time.c: 373: c = Read();
  1715  007204  EC64  F037         	call	_Read	;wreg free
  1716  007208  6E29               	movwf	Read_year@c,c
  1717                           
  1718                           ;time.c: 374: *e = (c>>4) + '0';
  1719  00720A  3829               	swapf	Read_year@c,w,c
  1720  00720C  0B0F               	andlw	15
  1721  00720E  0F30               	addlw	48
  1722  007210  C027  FFD9         	movff	Read_year@e,fsr2l
  1723  007214  C028  FFDA         	movff	Read_year@e+1,fsr2h
  1724  007218  6EDF               	movwf	indf2,c
  1725                           
  1726                           ;time.c: 375: e++;
  1727  00721A  4A27               	infsnz	Read_year@e,f,c
  1728  00721C  2A28               	incf	Read_year@e+1,f,c
  1729                           
  1730                           ;time.c: 376: *e = (c&0x0F) + '0';
  1731  00721E  5029               	movf	Read_year@c,w,c
  1732  007220  0B0F               	andlw	15
  1733  007222  0F30               	addlw	48
  1734  007224  C027  FFD9         	movff	Read_year@e,fsr2l
  1735  007228  C028  FFDA         	movff	Read_year@e+1,fsr2h
  1736  00722C  6EDF               	movwf	indf2,c
  1737                           
  1738                           ;time.c: 377: e++;
  1739  00722E  4A27               	infsnz	Read_year@e,f,c
  1740  007230  2A28               	incf	Read_year@e+1,f,c
  1741                           
  1742                           ;time.c: 378: *e = '\r';
  1743  007232  C027  FFD9         	movff	Read_year@e,fsr2l
  1744  007236  C028  FFDA         	movff	Read_year@e+1,fsr2h
  1745  00723A  0E0D               	movlw	13
  1746  00723C  6EDF               	movwf	indf2,c
  1747                           
  1748                           ;time.c: 379: e++;
  1749  00723E  4A27               	infsnz	Read_year@e,f,c
  1750  007240  2A28               	incf	Read_year@e+1,f,c
  1751                           
  1752                           ;time.c: 380: *e = '\0';
  1753  007242  C027  FFD9         	movff	Read_year@e,fsr2l
  1754  007246  C028  FFDA         	movff	Read_year@e+1,fsr2h
  1755  00724A  0E00               	movlw	0
  1756  00724C  6EDF               	movwf	indf2,c
  1757  00724E  0012               	return	
  1758  007250                     __end_of_Read_year:
  1759                           	opt stack 0
  1760                           tblptru	equ	0xFF8
  1761                           tblptrh	equ	0xFF7
  1762                           tblptrl	equ	0xFF6
  1763                           tablat	equ	0xFF5
  1764                           postinc0	equ	0xFEE
  1765                           wreg	equ	0xFE8
  1766                           postinc1	equ	0xFE6
  1767                           postdec1	equ	0xFE5
  1768                           fsr1l	equ	0xFE1
  1769                           indf2	equ	0xFDF
  1770                           postinc2	equ	0xFDE
  1771                           fsr2h	equ	0xFDA
  1772                           fsr2l	equ	0xFD9
  1773                           status	equ	0xFD8
  1774                           
  1775 ;; *************** function _Read_month *****************
  1776 ;; Defined at:
  1777 ;;		line 355 in file "time.c"
  1778 ;; Parameters:    Size  Location     Type
  1779 ;;  e               2   38[COMRAM] PTR unsigned char 
  1780 ;;		 -> time(2), 
  1781 ;; Auto vars:     Size  Location     Type
  1782 ;;  c               1   40[COMRAM] unsigned char 
  1783 ;; Return value:  Size  Location     Type
  1784 ;;		None               void
  1785 ;; Registers used:
  1786 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1787 ;; Tracked objects:
  1788 ;;		On entry : 0/0
  1789 ;;		On exit  : 0/0
  1790 ;;		Unchanged: 0/0
  1791 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1792 ;;      Params:         2       0       0       0       0       0       0       0       0
  1793 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1794 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1795 ;;      Totals:         3       0       0       0       0       0       0       0       0
  1796 ;;Total ram usage:        3 bytes
  1797 ;; Hardware stack levels used:    1
  1798 ;; Hardware stack levels required when called:    4
  1799 ;; This function calls:
  1800 ;;		_Read
  1801 ;; This function is called by:
  1802 ;;		_Read_time
  1803 ;; This function uses a non-reentrant model
  1804 ;;
  1805                           
  1806                           	psect	text3
  1807  0070B2                     __ptext3:
  1808                           	opt stack 0
  1809  0070B2                     _Read_month:
  1810                           	opt stack 25
  1811                           
  1812                           ;time.c: 356: unsigned char c;
  1813                           ;time.c: 357: e= e+27;
  1814                           
  1815                           ;incstack = 0
  1816                           ;incstack = 0
  1817  0070B2  0E1B               	movlw	27
  1818  0070B4  2427               	addwf	Read_month@e,w,c
  1819  0070B6  6E27               	movwf	Read_month@e,c
  1820  0070B8  0E00               	movlw	0
  1821  0070BA  2028               	addwfc	Read_month@e+1,w,c
  1822  0070BC  6E28               	movwf	Read_month@e+1,c
  1823                           
  1824                           ;time.c: 358: c = Read();
  1825  0070BE  EC64  F037         	call	_Read	;wreg free
  1826  0070C2  6E29               	movwf	Read_month@c,c
  1827                           
  1828                           ;time.c: 359: *e = ((c>>4)&0x01) + '0';
  1829  0070C4  3829               	swapf	Read_month@c,w,c
  1830  0070C6  0B0F               	andlw	15
  1831  0070C8  0B01               	andlw	1
  1832  0070CA  0F30               	addlw	48
  1833  0070CC  C027  FFD9         	movff	Read_month@e,fsr2l
  1834  0070D0  C028  FFDA         	movff	Read_month@e+1,fsr2h
  1835  0070D4  6EDF               	movwf	indf2,c
  1836                           
  1837                           ;time.c: 360: e++;
  1838  0070D6  4A27               	infsnz	Read_month@e,f,c
  1839  0070D8  2A28               	incf	Read_month@e+1,f,c
  1840                           
  1841                           ;time.c: 361: *e = (c&0x0F) + '0';
  1842  0070DA  5029               	movf	Read_month@c,w,c
  1843  0070DC  0B0F               	andlw	15
  1844  0070DE  0F30               	addlw	48
  1845  0070E0  C027  FFD9         	movff	Read_month@e,fsr2l
  1846  0070E4  C028  FFDA         	movff	Read_month@e+1,fsr2h
  1847  0070E8  6EDF               	movwf	indf2,c
  1848                           
  1849                           ;time.c: 362: e++;
  1850  0070EA  4A27               	infsnz	Read_month@e,f,c
  1851  0070EC  2A28               	incf	Read_month@e+1,f,c
  1852                           
  1853                           ;time.c: 363: *e = '/';
  1854  0070EE  C027  FFD9         	movff	Read_month@e,fsr2l
  1855  0070F2  C028  FFDA         	movff	Read_month@e+1,fsr2h
  1856  0070F6  0E2F               	movlw	47
  1857  0070F8  6EDF               	movwf	indf2,c
  1858  0070FA  0012               	return	
  1859  0070FC                     __end_of_Read_month:
  1860                           	opt stack 0
  1861                           tblptru	equ	0xFF8
  1862                           tblptrh	equ	0xFF7
  1863                           tblptrl	equ	0xFF6
  1864                           tablat	equ	0xFF5
  1865                           postinc0	equ	0xFEE
  1866                           wreg	equ	0xFE8
  1867                           postinc1	equ	0xFE6
  1868                           postdec1	equ	0xFE5
  1869                           fsr1l	equ	0xFE1
  1870                           indf2	equ	0xFDF
  1871                           postinc2	equ	0xFDE
  1872                           fsr2h	equ	0xFDA
  1873                           fsr2l	equ	0xFD9
  1874                           status	equ	0xFD8
  1875                           
  1876 ;; *************** function _Read_date *****************
  1877 ;; Defined at:
  1878 ;;		line 339 in file "time.c"
  1879 ;; Parameters:    Size  Location     Type
  1880 ;;  e               2   38[COMRAM] PTR unsigned char 
  1881 ;;		 -> time(2), 
  1882 ;; Auto vars:     Size  Location     Type
  1883 ;;  c               1   40[COMRAM] unsigned char 
  1884 ;; Return value:  Size  Location     Type
  1885 ;;		None               void
  1886 ;; Registers used:
  1887 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1888 ;; Tracked objects:
  1889 ;;		On entry : 0/0
  1890 ;;		On exit  : 0/0
  1891 ;;		Unchanged: 0/0
  1892 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1893 ;;      Params:         2       0       0       0       0       0       0       0       0
  1894 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1895 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1896 ;;      Totals:         3       0       0       0       0       0       0       0       0
  1897 ;;Total ram usage:        3 bytes
  1898 ;; Hardware stack levels used:    1
  1899 ;; Hardware stack levels required when called:    4
  1900 ;; This function calls:
  1901 ;;		_Read
  1902 ;; This function is called by:
  1903 ;;		_Read_time
  1904 ;; This function uses a non-reentrant model
  1905 ;;
  1906                           
  1907                           	psect	text4
  1908  007250                     __ptext4:
  1909                           	opt stack 0
  1910  007250                     _Read_date:
  1911                           	opt stack 25
  1912                           
  1913                           ;time.c: 340: unsigned char c;
  1914                           ;time.c: 341: e= e+23;
  1915                           
  1916                           ;incstack = 0
  1917                           ;incstack = 0
  1918  007250  0E17               	movlw	23
  1919  007252  2427               	addwf	Read_date@e,w,c
  1920  007254  6E27               	movwf	Read_date@e,c
  1921  007256  0E00               	movlw	0
  1922  007258  2028               	addwfc	Read_date@e+1,w,c
  1923  00725A  6E28               	movwf	Read_date@e+1,c
  1924                           
  1925                           ;time.c: 342: *e = ' ';
  1926  00725C  C027  FFD9         	movff	Read_date@e,fsr2l
  1927  007260  C028  FFDA         	movff	Read_date@e+1,fsr2h
  1928  007264  0E20               	movlw	32
  1929  007266  6EDF               	movwf	indf2,c
  1930                           
  1931                           ;time.c: 343: e++;
  1932  007268  4A27               	infsnz	Read_date@e,f,c
  1933  00726A  2A28               	incf	Read_date@e+1,f,c
  1934                           
  1935                           ;time.c: 344: c = Read();
  1936  00726C  EC64  F037         	call	_Read	;wreg free
  1937  007270  6E29               	movwf	Read_date@c,c
  1938                           
  1939                           ;time.c: 345: *e = ((c>>4)&0x03) + '0';
  1940  007272  3829               	swapf	Read_date@c,w,c
  1941  007274  0B0F               	andlw	15
  1942  007276  0B03               	andlw	3
  1943  007278  0F30               	addlw	48
  1944  00727A  C027  FFD9         	movff	Read_date@e,fsr2l
  1945  00727E  C028  FFDA         	movff	Read_date@e+1,fsr2h
  1946  007282  6EDF               	movwf	indf2,c
  1947                           
  1948                           ;time.c: 346: e++;
  1949  007284  4A27               	infsnz	Read_date@e,f,c
  1950  007286  2A28               	incf	Read_date@e+1,f,c
  1951                           
  1952                           ;time.c: 347: *e = (c&0x0F) + '0';
  1953  007288  5029               	movf	Read_date@c,w,c
  1954  00728A  0B0F               	andlw	15
  1955  00728C  0F30               	addlw	48
  1956  00728E  C027  FFD9         	movff	Read_date@e,fsr2l
  1957  007292  C028  FFDA         	movff	Read_date@e+1,fsr2h
  1958  007296  6EDF               	movwf	indf2,c
  1959                           
  1960                           ;time.c: 348: e++;
  1961  007298  4A27               	infsnz	Read_date@e,f,c
  1962  00729A  2A28               	incf	Read_date@e+1,f,c
  1963                           
  1964                           ;time.c: 349: *e = '/';
  1965  00729C  C027  FFD9         	movff	Read_date@e,fsr2l
  1966  0072A0  C028  FFDA         	movff	Read_date@e+1,fsr2h
  1967  0072A4  0E2F               	movlw	47
  1968  0072A6  6EDF               	movwf	indf2,c
  1969  0072A8  0012               	return	
  1970  0072AA                     __end_of_Read_date:
  1971                           	opt stack 0
  1972                           tblptru	equ	0xFF8
  1973                           tblptrh	equ	0xFF7
  1974                           tblptrl	equ	0xFF6
  1975                           tablat	equ	0xFF5
  1976                           postinc0	equ	0xFEE
  1977                           wreg	equ	0xFE8
  1978                           postinc1	equ	0xFE6
  1979                           postdec1	equ	0xFE5
  1980                           fsr1l	equ	0xFE1
  1981                           indf2	equ	0xFDF
  1982                           postinc2	equ	0xFDE
  1983                           fsr2h	equ	0xFDA
  1984                           fsr2l	equ	0xFD9
  1985                           status	equ	0xFD8
  1986                           
  1987 ;; *************** function _Read_day *****************
  1988 ;; Defined at:
  1989 ;;		line 332 in file "time.c"
  1990 ;; Parameters:    Size  Location     Type
  1991 ;;		None
  1992 ;; Auto vars:     Size  Location     Type
  1993 ;;		None
  1994 ;; Return value:  Size  Location     Type
  1995 ;;		None               void
  1996 ;; Registers used:
  1997 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  1998 ;; Tracked objects:
  1999 ;;		On entry : 0/0
  2000 ;;		On exit  : 0/0
  2001 ;;		Unchanged: 0/0
  2002 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2003 ;;      Params:         0       0       0       0       0       0       0       0       0
  2004 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2005 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2006 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2007 ;;Total ram usage:        0 bytes
  2008 ;; Hardware stack levels used:    1
  2009 ;; Hardware stack levels required when called:    4
  2010 ;; This function calls:
  2011 ;;		_Read
  2012 ;;		_write_DAY
  2013 ;; This function is called by:
  2014 ;;		_Read_time
  2015 ;; This function uses a non-reentrant model
  2016 ;;
  2017                           
  2018                           	psect	text5
  2019  006DBC                     __ptext5:
  2020                           	opt stack 0
  2021  006DBC                     _Read_day:
  2022                           	opt stack 25
  2023                           
  2024                           ;time.c: 333: write_DAY(0x07 & Read());
  2025                           
  2026                           ;incstack = 0
  2027                           ;incstack = 0
  2028  006DBC  EC64  F037         	call	_Read	;wreg free
  2029  006DC0  0B07               	andlw	7
  2030  006DC2  6E05               	movwf	?_write_DAY,c
  2031  006DC4  EC31  F03D         	call	_write_DAY	;wreg free
  2032  006DC8  0012               	return	
  2033  006DCA                     __end_of_Read_day:
  2034                           	opt stack 0
  2035                           tblptru	equ	0xFF8
  2036                           tblptrh	equ	0xFF7
  2037                           tblptrl	equ	0xFF6
  2038                           tablat	equ	0xFF5
  2039                           postinc0	equ	0xFEE
  2040                           wreg	equ	0xFE8
  2041                           postinc1	equ	0xFE6
  2042                           postdec1	equ	0xFE5
  2043                           fsr1l	equ	0xFE1
  2044                           indf2	equ	0xFDF
  2045                           postinc2	equ	0xFDE
  2046                           fsr2h	equ	0xFDA
  2047                           fsr2l	equ	0xFD9
  2048                           status	equ	0xFD8
  2049                           
  2050 ;; *************** function _write_DAY *****************
  2051 ;; Defined at:
  2052 ;;		line 300 in file "time.c"
  2053 ;; Parameters:    Size  Location     Type
  2054 ;;  day             1    4[COMRAM] unsigned char 
  2055 ;; Auto vars:     Size  Location     Type
  2056 ;;  day_7           4   29[COMRAM] unsigned char [4]
  2057 ;;  day_6           4   25[COMRAM] unsigned char [4]
  2058 ;;  day_5           4   21[COMRAM] unsigned char [4]
  2059 ;;  day_4           4   17[COMRAM] unsigned char [4]
  2060 ;;  day_3           4   13[COMRAM] unsigned char [4]
  2061 ;;  day_2           4    9[COMRAM] unsigned char [4]
  2062 ;;  day_1           4    5[COMRAM] unsigned char [4]
  2063 ;; Return value:  Size  Location     Type
  2064 ;;		None               void
  2065 ;; Registers used:
  2066 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  2067 ;; Tracked objects:
  2068 ;;		On entry : 0/0
  2069 ;;		On exit  : 0/0
  2070 ;;		Unchanged: 0/0
  2071 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2072 ;;      Params:         1       0       0       0       0       0       0       0       0
  2073 ;;      Locals:        28       0       0       0       0       0       0       0       0
  2074 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2075 ;;      Totals:        29       0       0       0       0       0       0       0       0
  2076 ;;Total ram usage:       29 bytes
  2077 ;; Hardware stack levels used:    1
  2078 ;; Hardware stack levels required when called:    1
  2079 ;; This function calls:
  2080 ;;		_Write_ARR
  2081 ;; This function is called by:
  2082 ;;		_Read_day
  2083 ;; This function uses a non-reentrant model
  2084 ;;
  2085                           
  2086                           	psect	text6
  2087  007A62                     __ptext6:
  2088                           	opt stack 0
  2089  007A62                     _write_DAY:
  2090                           	opt stack 27
  2091                           
  2092                           ;time.c: 301: unsigned char day_1[4] = "SUN";
  2093                           
  2094                           ;incstack = 0
  2095                           ;incstack = 0
  2096  007A62  C1C7  F006         	movff	write_DAY@F256,write_DAY@day_1
  2097  007A66  C1C8  F007         	movff	write_DAY@F256+1,write_DAY@day_1+1
  2098  007A6A  C1C9  F008         	movff	write_DAY@F256+2,write_DAY@day_1+2
  2099  007A6E  C1CA  F009         	movff	write_DAY@F256+3,write_DAY@day_1+3
  2100                           
  2101                           ;time.c: 302: unsigned char day_2[4] = "MON";
  2102  007A72  C1CB  F00A         	movff	write_DAY@F258,write_DAY@day_2
  2103  007A76  C1CC  F00B         	movff	write_DAY@F258+1,write_DAY@day_2+1
  2104  007A7A  C1CD  F00C         	movff	write_DAY@F258+2,write_DAY@day_2+2
  2105  007A7E  C1CE  F00D         	movff	write_DAY@F258+3,write_DAY@day_2+3
  2106                           
  2107                           ;time.c: 303: unsigned char day_3[4] = "TUE";
  2108  007A82  C1CF  F00E         	movff	write_DAY@F260,write_DAY@day_3
  2109  007A86  C1D0  F00F         	movff	write_DAY@F260+1,write_DAY@day_3+1
  2110  007A8A  C1D1  F010         	movff	write_DAY@F260+2,write_DAY@day_3+2
  2111  007A8E  C1D2  F011         	movff	write_DAY@F260+3,write_DAY@day_3+3
  2112                           
  2113                           ;time.c: 304: unsigned char day_4[4] = "WED";
  2114  007A92  C1D3  F012         	movff	write_DAY@F262,write_DAY@day_4
  2115  007A96  C1D4  F013         	movff	write_DAY@F262+1,write_DAY@day_4+1
  2116  007A9A  C1D5  F014         	movff	write_DAY@F262+2,write_DAY@day_4+2
  2117  007A9E  C1D6  F015         	movff	write_DAY@F262+3,write_DAY@day_4+3
  2118                           
  2119                           ;time.c: 305: unsigned char day_5[4] = "THU";
  2120  007AA2  C1D7  F016         	movff	write_DAY@F264,write_DAY@day_5
  2121  007AA6  C1D8  F017         	movff	write_DAY@F264+1,write_DAY@day_5+1
  2122  007AAA  C1D9  F018         	movff	write_DAY@F264+2,write_DAY@day_5+2
  2123  007AAE  C1DA  F019         	movff	write_DAY@F264+3,write_DAY@day_5+3
  2124                           
  2125                           ;time.c: 306: unsigned char day_6[4] = "FRI";
  2126  007AB2  C1DB  F01A         	movff	write_DAY@F266,write_DAY@day_6
  2127  007AB6  C1DC  F01B         	movff	write_DAY@F266+1,write_DAY@day_6+1
  2128  007ABA  C1DD  F01C         	movff	write_DAY@F266+2,write_DAY@day_6+2
  2129  007ABE  C1DE  F01D         	movff	write_DAY@F266+3,write_DAY@day_6+3
  2130                           
  2131                           ;time.c: 307: unsigned char day_7[4] = "SAT";
  2132  007AC2  C1DF  F01E         	movff	write_DAY@F268,write_DAY@day_7
  2133  007AC6  C1E0  F01F         	movff	write_DAY@F268+1,write_DAY@day_7+1
  2134  007ACA  C1E1  F020         	movff	write_DAY@F268+2,write_DAY@day_7+2
  2135  007ACE  C1E2  F021         	movff	write_DAY@F268+3,write_DAY@day_7+3
  2136                           
  2137                           ;time.c: 309: switch(day)
  2138  007AD2  D05B               	goto	l2331
  2139  007AD4                     l2315:
  2140  007AD4  0E00               	movlw	high write_DAY@day_1
  2141  007AD6  6E02               	movwf	?_Write_ARR+1,c
  2142  007AD8  0E06               	movlw	low write_DAY@day_1
  2143  007ADA  6E01               	movwf	?_Write_ARR,c
  2144  007ADC  0100               	movlb	0	; () banked
  2145  007ADE  0E00               	movlw	high _time
  2146  007AE0  6E04               	movwf	?_Write_ARR+3,c
  2147  007AE2  0100               	movlb	0	; () banked
  2148  007AE4  0EFE               	movlw	low _time
  2149  007AE6  6E03               	movwf	?_Write_ARR+2,c
  2150  007AE8  EC7E  F038         	call	_Write_ARR	;wreg free
  2151                           
  2152                           ;time.c: 312: break;
  2153  007AEC  D064               	goto	l251
  2154  007AEE                     l2317:
  2155  007AEE  0E00               	movlw	high write_DAY@day_2
  2156  007AF0  6E02               	movwf	?_Write_ARR+1,c
  2157  007AF2  0E0A               	movlw	low write_DAY@day_2
  2158  007AF4  6E01               	movwf	?_Write_ARR,c
  2159  007AF6  0100               	movlb	0	; () banked
  2160  007AF8  0E00               	movlw	high _time
  2161  007AFA  6E04               	movwf	?_Write_ARR+3,c
  2162  007AFC  0100               	movlb	0	; () banked
  2163  007AFE  0EFE               	movlw	low _time
  2164  007B00  6E03               	movwf	?_Write_ARR+2,c
  2165  007B02  EC7E  F038         	call	_Write_ARR	;wreg free
  2166                           
  2167                           ;time.c: 314: break;
  2168  007B06  D057               	goto	l251
  2169  007B08                     l2319:
  2170  007B08  0E00               	movlw	high write_DAY@day_3
  2171  007B0A  6E02               	movwf	?_Write_ARR+1,c
  2172  007B0C  0E0E               	movlw	low write_DAY@day_3
  2173  007B0E  6E01               	movwf	?_Write_ARR,c
  2174  007B10  0100               	movlb	0	; () banked
  2175  007B12  0E00               	movlw	high _time
  2176  007B14  6E04               	movwf	?_Write_ARR+3,c
  2177  007B16  0100               	movlb	0	; () banked
  2178  007B18  0EFE               	movlw	low _time
  2179  007B1A  6E03               	movwf	?_Write_ARR+2,c
  2180  007B1C  EC7E  F038         	call	_Write_ARR	;wreg free
  2181                           
  2182                           ;time.c: 316: break;
  2183  007B20  D04A               	goto	l251
  2184  007B22                     l2321:
  2185  007B22  0E00               	movlw	high write_DAY@day_4
  2186  007B24  6E02               	movwf	?_Write_ARR+1,c
  2187  007B26  0E12               	movlw	low write_DAY@day_4
  2188  007B28  6E01               	movwf	?_Write_ARR,c
  2189  007B2A  0100               	movlb	0	; () banked
  2190  007B2C  0E00               	movlw	high _time
  2191  007B2E  6E04               	movwf	?_Write_ARR+3,c
  2192  007B30  0100               	movlb	0	; () banked
  2193  007B32  0EFE               	movlw	low _time
  2194  007B34  6E03               	movwf	?_Write_ARR+2,c
  2195  007B36  EC7E  F038         	call	_Write_ARR	;wreg free
  2196                           
  2197                           ;time.c: 318: break;
  2198  007B3A  D03D               	goto	l251
  2199  007B3C                     l2323:
  2200  007B3C  0E00               	movlw	high write_DAY@day_5
  2201  007B3E  6E02               	movwf	?_Write_ARR+1,c
  2202  007B40  0E16               	movlw	low write_DAY@day_5
  2203  007B42  6E01               	movwf	?_Write_ARR,c
  2204  007B44  0100               	movlb	0	; () banked
  2205  007B46  0E00               	movlw	high _time
  2206  007B48  6E04               	movwf	?_Write_ARR+3,c
  2207  007B4A  0100               	movlb	0	; () banked
  2208  007B4C  0EFE               	movlw	low _time
  2209  007B4E  6E03               	movwf	?_Write_ARR+2,c
  2210  007B50  EC7E  F038         	call	_Write_ARR	;wreg free
  2211                           
  2212                           ;time.c: 320: break;
  2213  007B54  D030               	goto	l251
  2214  007B56                     l2325:
  2215  007B56  0E00               	movlw	high write_DAY@day_6
  2216  007B58  6E02               	movwf	?_Write_ARR+1,c
  2217  007B5A  0E1A               	movlw	low write_DAY@day_6
  2218  007B5C  6E01               	movwf	?_Write_ARR,c
  2219  007B5E  0100               	movlb	0	; () banked
  2220  007B60  0E00               	movlw	high _time
  2221  007B62  6E04               	movwf	?_Write_ARR+3,c
  2222  007B64  0100               	movlb	0	; () banked
  2223  007B66  0EFE               	movlw	low _time
  2224  007B68  6E03               	movwf	?_Write_ARR+2,c
  2225  007B6A  EC7E  F038         	call	_Write_ARR	;wreg free
  2226                           
  2227                           ;time.c: 322: break;
  2228  007B6E  D023               	goto	l251
  2229  007B70                     l2327:
  2230  007B70  0E00               	movlw	high write_DAY@day_7
  2231  007B72  6E02               	movwf	?_Write_ARR+1,c
  2232  007B74  0E1E               	movlw	low write_DAY@day_7
  2233  007B76  6E01               	movwf	?_Write_ARR,c
  2234  007B78  0100               	movlb	0	; () banked
  2235  007B7A  0E00               	movlw	high _time
  2236  007B7C  6E04               	movwf	?_Write_ARR+3,c
  2237  007B7E  0100               	movlb	0	; () banked
  2238  007B80  0EFE               	movlw	low _time
  2239  007B82  6E03               	movwf	?_Write_ARR+2,c
  2240  007B84  EC7E  F038         	call	_Write_ARR	;wreg free
  2241                           
  2242                           ;time.c: 324: break;
  2243  007B88  D016               	goto	l251
  2244  007B8A                     l2331:
  2245  007B8A  5005               	movf	write_DAY@day,w,c
  2246                           
  2247                           ; Switch size 1, requested type "space"
  2248                           ; Number of cases is 7, Range of values is 1 to 7
  2249                           ; switch strategies available:
  2250                           ; Name         Instructions Cycles
  2251                           ; simple_byte           22    12 (average)
  2252                           ;	Chosen strategy is simple_byte
  2253  007B8C  0A01               	xorlw	1	; case 1
  2254  007B8E  B4D8               	btfsc	status,2,c
  2255  007B90  D7A1               	goto	l2315
  2256  007B92  0A03               	xorlw	3	; case 2
  2257  007B94  B4D8               	btfsc	status,2,c
  2258  007B96  D7AB               	goto	l2317
  2259  007B98  0A01               	xorlw	1	; case 3
  2260  007B9A  B4D8               	btfsc	status,2,c
  2261  007B9C  D7B5               	goto	l2319
  2262  007B9E  0A07               	xorlw	7	; case 4
  2263  007BA0  B4D8               	btfsc	status,2,c
  2264  007BA2  D7BF               	goto	l2321
  2265  007BA4  0A01               	xorlw	1	; case 5
  2266  007BA6  B4D8               	btfsc	status,2,c
  2267  007BA8  D7C9               	goto	l2323
  2268  007BAA  0A03               	xorlw	3	; case 6
  2269  007BAC  B4D8               	btfsc	status,2,c
  2270  007BAE  D7D3               	goto	l2325
  2271  007BB0  0A01               	xorlw	1	; case 7
  2272  007BB2  B4D8               	btfsc	status,2,c
  2273  007BB4  D7DD               	goto	l2327
  2274  007BB6                     l251:
  2275  007BB6  0012               	return	
  2276  007BB8                     __end_of_write_DAY:
  2277                           	opt stack 0
  2278                           tblptru	equ	0xFF8
  2279                           tblptrh	equ	0xFF7
  2280                           tblptrl	equ	0xFF6
  2281                           tablat	equ	0xFF5
  2282                           postinc0	equ	0xFEE
  2283                           wreg	equ	0xFE8
  2284                           postinc1	equ	0xFE6
  2285                           postdec1	equ	0xFE5
  2286                           fsr1l	equ	0xFE1
  2287                           indf2	equ	0xFDF
  2288                           postinc2	equ	0xFDE
  2289                           fsr2h	equ	0xFDA
  2290                           fsr2l	equ	0xFD9
  2291                           status	equ	0xFD8
  2292                           
  2293 ;; *************** function _Write_ARR *****************
  2294 ;; Defined at:
  2295 ;;		line 285 in file "time.c"
  2296 ;; Parameters:    Size  Location     Type
  2297 ;;  c               2    0[COMRAM] PTR unsigned char 
  2298 ;;		 -> write_DAY@day_7(4), write_DAY@day_6(4), write_DAY@day_5(4), write_DAY@day_4(4), 
  2299 ;;		 -> write_DAY@day_3(4), write_DAY@day_2(4), write_DAY@day_1(4), 
  2300 ;;  e               2    2[COMRAM] PTR unsigned char 
  2301 ;;		 -> time(2), 
  2302 ;; Auto vars:     Size  Location     Type
  2303 ;;		None
  2304 ;; Return value:  Size  Location     Type
  2305 ;;		None               void
  2306 ;; Registers used:
  2307 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
  2308 ;; Tracked objects:
  2309 ;;		On entry : 0/0
  2310 ;;		On exit  : 0/0
  2311 ;;		Unchanged: 0/0
  2312 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2313 ;;      Params:         4       0       0       0       0       0       0       0       0
  2314 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2315 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2316 ;;      Totals:         4       0       0       0       0       0       0       0       0
  2317 ;;Total ram usage:        4 bytes
  2318 ;; Hardware stack levels used:    1
  2319 ;; This function calls:
  2320 ;;		Nothing
  2321 ;; This function is called by:
  2322 ;;		_write_DAY
  2323 ;; This function uses a non-reentrant model
  2324 ;;
  2325                           
  2326                           	psect	text7
  2327  0070FC                     __ptext7:
  2328                           	opt stack 0
  2329  0070FC                     _Write_ARR:
  2330                           	opt stack 27
  2331                           
  2332                           ;time.c: 286: e = e+17;
  2333                           
  2334                           ;incstack = 0
  2335                           ;incstack = 0
  2336  0070FC  0E11               	movlw	17
  2337  0070FE  2403               	addwf	Write_ARR@e,w,c
  2338  007100  6E03               	movwf	Write_ARR@e,c
  2339  007102  0E00               	movlw	0
  2340  007104  2004               	addwfc	Write_ARR@e+1,w,c
  2341  007106  6E04               	movwf	Write_ARR@e+1,c
  2342                           
  2343                           ;time.c: 287: while(*c!='\0')
  2344  007108  D00E               	goto	l2089
  2345  00710A                     l2083:
  2346                           
  2347                           ;time.c: 288: {
  2348                           ;time.c: 289: *e = *c;
  2349  00710A  C001  FFD9         	movff	Write_ARR@c,fsr2l
  2350  00710E  C002  FFDA         	movff	Write_ARR@c+1,fsr2h
  2351  007112  C003  FFE1         	movff	Write_ARR@e,fsr1l
  2352  007116  C004  FFE2         	movff	Write_ARR@e+1,fsr1h
  2353  00711A  CFDF FFE7          	movff	indf2,indf1
  2354                           
  2355                           ;time.c: 290: e++;
  2356  00711E  4A03               	infsnz	Write_ARR@e,f,c
  2357  007120  2A04               	incf	Write_ARR@e+1,f,c
  2358                           
  2359                           ;time.c: 291: c++;
  2360  007122  4A01               	infsnz	Write_ARR@c,f,c
  2361  007124  2A02               	incf	Write_ARR@c+1,f,c
  2362  007126                     l2089:
  2363  007126  C001  FFD9         	movff	Write_ARR@c,fsr2l
  2364  00712A  C002  FFDA         	movff	Write_ARR@c+1,fsr2h
  2365  00712E  50DF               	movf	indf2,w,c
  2366  007130  A4D8               	btfss	status,2,c
  2367  007132  D7EB               	goto	l2083
  2368                           
  2369                           ;time.c: 292: }
  2370                           ;time.c: 293: e = e+2;
  2371  007134  0E02               	movlw	2
  2372  007136  2403               	addwf	Write_ARR@e,w,c
  2373  007138  6E03               	movwf	Write_ARR@e,c
  2374  00713A  0E00               	movlw	0
  2375  00713C  2004               	addwfc	Write_ARR@e+1,w,c
  2376  00713E  6E04               	movwf	Write_ARR@e+1,c
  2377                           
  2378                           ;time.c: 294: *e = ' ';
  2379  007140  C003  FFD9         	movff	Write_ARR@e,fsr2l
  2380  007144  C004  FFDA         	movff	Write_ARR@e+1,fsr2h
  2381  007148  0E20               	movlw	32
  2382  00714A  6EDF               	movwf	indf2,c
  2383  00714C  0012               	return	
  2384  00714E                     __end_of_Write_ARR:
  2385                           	opt stack 0
  2386                           tblptru	equ	0xFF8
  2387                           tblptrh	equ	0xFF7
  2388                           tblptrl	equ	0xFF6
  2389                           tablat	equ	0xFF5
  2390                           postinc0	equ	0xFEE
  2391                           wreg	equ	0xFE8
  2392                           indf1	equ	0xFE7
  2393                           postinc1	equ	0xFE6
  2394                           postdec1	equ	0xFE5
  2395                           fsr1h	equ	0xFE2
  2396                           fsr1l	equ	0xFE1
  2397                           indf2	equ	0xFDF
  2398                           postinc2	equ	0xFDE
  2399                           fsr2h	equ	0xFDA
  2400                           fsr2l	equ	0xFD9
  2401                           status	equ	0xFD8
  2402                           
  2403 ;; *************** function _Read_hour *****************
  2404 ;; Defined at:
  2405 ;;		line 252 in file "time.c"
  2406 ;; Parameters:    Size  Location     Type
  2407 ;;  e               2   38[COMRAM] PTR unsigned char 
  2408 ;;		 -> time(2), 
  2409 ;;  mode            1   40[COMRAM] unsigned char 
  2410 ;; Auto vars:     Size  Location     Type
  2411 ;;  c               1   44[COMRAM] unsigned char 
  2412 ;;  i               1   43[COMRAM] unsigned char 
  2413 ;; Return value:  Size  Location     Type
  2414 ;;		None               void
  2415 ;; Registers used:
  2416 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2417 ;; Tracked objects:
  2418 ;;		On entry : 0/0
  2419 ;;		On exit  : 0/0
  2420 ;;		Unchanged: 0/0
  2421 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2422 ;;      Params:         3       0       0       0       0       0       0       0       0
  2423 ;;      Locals:         2       0       0       0       0       0       0       0       0
  2424 ;;      Temps:          2       0       0       0       0       0       0       0       0
  2425 ;;      Totals:         7       0       0       0       0       0       0       0       0
  2426 ;;Total ram usage:        7 bytes
  2427 ;; Hardware stack levels used:    1
  2428 ;; Hardware stack levels required when called:    4
  2429 ;; This function calls:
  2430 ;;		_Read
  2431 ;; This function is called by:
  2432 ;;		_Read_time
  2433 ;; This function uses a non-reentrant model
  2434 ;;
  2435                           
  2436                           	psect	text8
  2437  00755A                     __ptext8:
  2438                           	opt stack 0
  2439  00755A                     _Read_hour:
  2440                           	opt stack 25
  2441                           
  2442                           ;time.c: 253: unsigned char c,i=0;
  2443                           
  2444                           ;incstack = 0
  2445                           ;incstack = 0
  2446  00755A  6E2A               	movwf	??_Read_hour& (0+255),c
  2447  00755C  0E00               	movlw	0
  2448  00755E  6E2C               	movwf	Read_hour@i,c
  2449  007560  502A               	movf	??_Read_hour& (0+255),w,c
  2450                           
  2451                           ;time.c: 254: c = Read();
  2452  007562  EC64  F037         	call	_Read	;wreg free
  2453  007566  6E2D               	movwf	Read_hour@c,c
  2454                           
  2455                           ;time.c: 255: if((mode==0)||(mode==1))
  2456  007568  5029               	movf	Read_hour@mode,w,c
  2457  00756A  B4D8               	btfsc	status,2,c
  2458  00756C  D003               	goto	l2655
  2459  00756E  0429               	decf	Read_hour@mode,w,c
  2460  007570  A4D8               	btfss	status,2,c
  2461  007572  D004               	goto	l2657
  2462  007574                     l2655:
  2463                           
  2464                           ;time.c: 256: *e = ((c>>4)&0x01) + '0';
  2465  007574  382D               	swapf	Read_hour@c,w,c
  2466  007576  0B0F               	andlw	15
  2467  007578  0B01               	andlw	1
  2468  00757A  D003               	goto	L1
  2469  00757C                     l2657:
  2470                           
  2471                           ;time.c: 257: else
  2472                           ;time.c: 258: *e = ((c>>4)&0x03) + '0';
  2473  00757C  382D               	swapf	Read_hour@c,w,c
  2474  00757E  0B0F               	andlw	15
  2475  007580  0B03               	andlw	3
  2476  007582                     L1:
  2477  007582  0F30               	addlw	48
  2478  007584  C027  FFD9         	movff	Read_hour@e,fsr2l
  2479  007588  C028  FFDA         	movff	Read_hour@e+1,fsr2h
  2480  00758C  6EDF               	movwf	indf2,c
  2481                           
  2482                           ;time.c: 259: e++;
  2483  00758E  4A27               	infsnz	Read_hour@e,f,c
  2484  007590  2A28               	incf	Read_hour@e+1,f,c
  2485                           
  2486                           ;time.c: 260: *e = (c&0x0F) + '0';
  2487  007592  502D               	movf	Read_hour@c,w,c
  2488  007594  0B0F               	andlw	15
  2489  007596  0F30               	addlw	48
  2490  007598  C027  FFD9         	movff	Read_hour@e,fsr2l
  2491  00759C  C028  FFDA         	movff	Read_hour@e+1,fsr2h
  2492  0075A0  6EDF               	movwf	indf2,c
  2493                           
  2494                           ;time.c: 261: e++;
  2495  0075A2  4A27               	infsnz	Read_hour@e,f,c
  2496  0075A4  2A28               	incf	Read_hour@e+1,f,c
  2497                           
  2498                           ;time.c: 262: *e = ':';
  2499  0075A6  C027  FFD9         	movff	Read_hour@e,fsr2l
  2500  0075AA  C028  FFDA         	movff	Read_hour@e+1,fsr2h
  2501  0075AE  0E3A               	movlw	58
  2502  0075B0  6EDF               	movwf	indf2,c
  2503                           
  2504                           ;time.c: 263: while(i!=11)
  2505  0075B2  D003               	goto	l2667
  2506  0075B4                     l2665:
  2507                           
  2508                           ;time.c: 264: {
  2509                           ;time.c: 265: e++;
  2510  0075B4  4A27               	infsnz	Read_hour@e,f,c
  2511  0075B6  2A28               	incf	Read_hour@e+1,f,c
  2512                           
  2513                           ;time.c: 266: i++;
  2514  0075B8  2A2C               	incf	Read_hour@i,f,c
  2515  0075BA                     l2667:
  2516  0075BA  502C               	movf	Read_hour@i,w,c
  2517  0075BC  0A0B               	xorlw	11
  2518  0075BE  A4D8               	btfss	status,2,c
  2519  0075C0  D7F9               	goto	l2665
  2520                           
  2521                           ;time.c: 267: }
  2522                           ;time.c: 268: if((c>>6)&0x01)
  2523  0075C2  C02D  F02A         	movff	Read_hour@c,??_Read_hour
  2524  0075C6  0E06               	movlw	6
  2525  0075C8  6E2B               	movwf	(??_Read_hour+1)& (0+255),c
  2526  0075CA                     u2465:
  2527  0075CA  90D8               	bcf	status,0,c
  2528  0075CC  322A               	rrcf	??_Read_hour,f,c
  2529  0075CE  2E2B               	decfsz	(??_Read_hour+1)& (0+255),f,c
  2530  0075D0  D7FC               	goto	u2465
  2531  0075D2  A02A               	btfss	??_Read_hour,0,c
  2532  0075D4  D01E               	goto	l219
  2533                           
  2534                           ;time.c: 269: {
  2535                           ;time.c: 270: if((c>>5)&0x01)
  2536  0075D6  C02D  F02A         	movff	Read_hour@c,??_Read_hour
  2537  0075DA  0E05               	movlw	5
  2538  0075DC  6E2B               	movwf	(??_Read_hour+1)& (0+255),c
  2539  0075DE                     u2485:
  2540  0075DE  90D8               	bcf	status,0,c
  2541  0075E0  322A               	rrcf	??_Read_hour,f,c
  2542  0075E2  2E2B               	decfsz	(??_Read_hour+1)& (0+255),f,c
  2543  0075E4  D7FC               	goto	u2485
  2544  0075E6  A02A               	btfss	??_Read_hour,0,c
  2545  0075E8  D006               	goto	l2675
  2546                           
  2547                           ;time.c: 271: *e = 'P';
  2548  0075EA  C027  FFD9         	movff	Read_hour@e,fsr2l
  2549  0075EE  C028  FFDA         	movff	Read_hour@e+1,fsr2h
  2550  0075F2  0E50               	movlw	80
  2551  0075F4  D005               	goto	L2
  2552  0075F6                     l2675:
  2553                           
  2554                           ;time.c: 272: else
  2555                           ;time.c: 273: *e = 'A';
  2556  0075F6  C027  FFD9         	movff	Read_hour@e,fsr2l
  2557  0075FA  C028  FFDA         	movff	Read_hour@e+1,fsr2h
  2558  0075FE  0E41               	movlw	65
  2559  007600                     L2:
  2560  007600  6EDF               	movwf	indf2,c
  2561                           
  2562                           ;time.c: 274: e++;
  2563  007602  4A27               	infsnz	Read_hour@e,f,c
  2564  007604  2A28               	incf	Read_hour@e+1,f,c
  2565                           
  2566                           ;time.c: 275: *e = 'M';
  2567  007606  C027  FFD9         	movff	Read_hour@e,fsr2l
  2568  00760A  C028  FFDA         	movff	Read_hour@e+1,fsr2h
  2569  00760E  0E4D               	movlw	77
  2570  007610  6EDF               	movwf	indf2,c
  2571  007612                     l219:
  2572  007612  0012               	return	
  2573  007614                     __end_of_Read_hour:
  2574                           	opt stack 0
  2575                           tblptru	equ	0xFF8
  2576                           tblptrh	equ	0xFF7
  2577                           tblptrl	equ	0xFF6
  2578                           tablat	equ	0xFF5
  2579                           postinc0	equ	0xFEE
  2580                           wreg	equ	0xFE8
  2581                           indf1	equ	0xFE7
  2582                           postinc1	equ	0xFE6
  2583                           postdec1	equ	0xFE5
  2584                           fsr1h	equ	0xFE2
  2585                           fsr1l	equ	0xFE1
  2586                           indf2	equ	0xFDF
  2587                           postinc2	equ	0xFDE
  2588                           fsr2h	equ	0xFDA
  2589                           fsr2l	equ	0xFD9
  2590                           status	equ	0xFD8
  2591                           
  2592 ;; *************** function _Read_min *****************
  2593 ;; Defined at:
  2594 ;;		line 238 in file "time.c"
  2595 ;; Parameters:    Size  Location     Type
  2596 ;;  e               2   38[COMRAM] PTR unsigned char 
  2597 ;;		 -> time(2), 
  2598 ;; Auto vars:     Size  Location     Type
  2599 ;;  c               1   40[COMRAM] unsigned char 
  2600 ;; Return value:  Size  Location     Type
  2601 ;;		None               void
  2602 ;; Registers used:
  2603 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2604 ;; Tracked objects:
  2605 ;;		On entry : 0/0
  2606 ;;		On exit  : 0/0
  2607 ;;		Unchanged: 0/0
  2608 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2609 ;;      Params:         2       0       0       0       0       0       0       0       0
  2610 ;;      Locals:         1       0       0       0       0       0       0       0       0
  2611 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2612 ;;      Totals:         3       0       0       0       0       0       0       0       0
  2613 ;;Total ram usage:        3 bytes
  2614 ;; Hardware stack levels used:    1
  2615 ;; Hardware stack levels required when called:    4
  2616 ;; This function calls:
  2617 ;;		_Read
  2618 ;; This function is called by:
  2619 ;;		_Read_time
  2620 ;; This function uses a non-reentrant model
  2621 ;;
  2622                           
  2623                           	psect	text9
  2624  007068                     __ptext9:
  2625                           	opt stack 0
  2626  007068                     _Read_min:
  2627                           	opt stack 25
  2628                           
  2629                           ;time.c: 239: unsigned char c;
  2630                           ;time.c: 240: e= e+3;
  2631                           
  2632                           ;incstack = 0
  2633                           ;incstack = 0
  2634  007068  0E03               	movlw	3
  2635  00706A  2427               	addwf	Read_min@e,w,c
  2636  00706C  6E27               	movwf	Read_min@e,c
  2637  00706E  0E00               	movlw	0
  2638  007070  2028               	addwfc	Read_min@e+1,w,c
  2639  007072  6E28               	movwf	Read_min@e+1,c
  2640                           
  2641                           ;time.c: 241: c = Read();
  2642  007074  EC64  F037         	call	_Read	;wreg free
  2643  007078  6E29               	movwf	Read_min@c,c
  2644                           
  2645                           ;time.c: 242: *e = ((c>>4)&0x07) + '0';
  2646  00707A  3829               	swapf	Read_min@c,w,c
  2647  00707C  0B0F               	andlw	15
  2648  00707E  0B07               	andlw	7
  2649  007080  0F30               	addlw	48
  2650  007082  C027  FFD9         	movff	Read_min@e,fsr2l
  2651  007086  C028  FFDA         	movff	Read_min@e+1,fsr2h
  2652  00708A  6EDF               	movwf	indf2,c
  2653                           
  2654                           ;time.c: 243: e++;
  2655  00708C  4A27               	infsnz	Read_min@e,f,c
  2656  00708E  2A28               	incf	Read_min@e+1,f,c
  2657                           
  2658                           ;time.c: 244: *e = (c&0x0F) + '0';
  2659  007090  5029               	movf	Read_min@c,w,c
  2660  007092  0B0F               	andlw	15
  2661  007094  0F30               	addlw	48
  2662  007096  C027  FFD9         	movff	Read_min@e,fsr2l
  2663  00709A  C028  FFDA         	movff	Read_min@e+1,fsr2h
  2664  00709E  6EDF               	movwf	indf2,c
  2665                           
  2666                           ;time.c: 245: e++;
  2667  0070A0  4A27               	infsnz	Read_min@e,f,c
  2668  0070A2  2A28               	incf	Read_min@e+1,f,c
  2669                           
  2670                           ;time.c: 246: *e = ':';
  2671  0070A4  C027  FFD9         	movff	Read_min@e,fsr2l
  2672  0070A8  C028  FFDA         	movff	Read_min@e+1,fsr2h
  2673  0070AC  0E3A               	movlw	58
  2674  0070AE  6EDF               	movwf	indf2,c
  2675  0070B0  0012               	return	
  2676  0070B2                     __end_of_Read_min:
  2677                           	opt stack 0
  2678                           tblptru	equ	0xFF8
  2679                           tblptrh	equ	0xFF7
  2680                           tblptrl	equ	0xFF6
  2681                           tablat	equ	0xFF5
  2682                           postinc0	equ	0xFEE
  2683                           wreg	equ	0xFE8
  2684                           indf1	equ	0xFE7
  2685                           postinc1	equ	0xFE6
  2686                           postdec1	equ	0xFE5
  2687                           fsr1h	equ	0xFE2
  2688                           fsr1l	equ	0xFE1
  2689                           indf2	equ	0xFDF
  2690                           postinc2	equ	0xFDE
  2691                           fsr2h	equ	0xFDA
  2692                           fsr2l	equ	0xFD9
  2693                           status	equ	0xFD8
  2694                           
  2695 ;; *************** function _Read_sec *****************
  2696 ;; Defined at:
  2697 ;;		line 224 in file "time.c"
  2698 ;; Parameters:    Size  Location     Type
  2699 ;;  e               2   38[COMRAM] PTR unsigned char 
  2700 ;;		 -> time(2), 
  2701 ;; Auto vars:     Size  Location     Type
  2702 ;;  c               1   40[COMRAM] unsigned char 
  2703 ;; Return value:  Size  Location     Type
  2704 ;;		None               void
  2705 ;; Registers used:
  2706 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2707 ;; Tracked objects:
  2708 ;;		On entry : 0/0
  2709 ;;		On exit  : 0/0
  2710 ;;		Unchanged: 0/0
  2711 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2712 ;;      Params:         2       0       0       0       0       0       0       0       0
  2713 ;;      Locals:         1       0       0       0       0       0       0       0       0
  2714 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2715 ;;      Totals:         3       0       0       0       0       0       0       0       0
  2716 ;;Total ram usage:        3 bytes
  2717 ;; Hardware stack levels used:    1
  2718 ;; Hardware stack levels required when called:    4
  2719 ;; This function calls:
  2720 ;;		_Read
  2721 ;; This function is called by:
  2722 ;;		_Read_time
  2723 ;; This function uses a non-reentrant model
  2724 ;;
  2725                           
  2726                           	psect	text10
  2727  00701E                     __ptext10:
  2728                           	opt stack 0
  2729  00701E                     _Read_sec:
  2730                           	opt stack 25
  2731                           
  2732                           ;time.c: 225: unsigned char c;
  2733                           ;time.c: 226: e=e+6;
  2734                           
  2735                           ;incstack = 0
  2736                           ;incstack = 0
  2737  00701E  0E06               	movlw	6
  2738  007020  2427               	addwf	Read_sec@e,w,c
  2739  007022  6E27               	movwf	Read_sec@e,c
  2740  007024  0E00               	movlw	0
  2741  007026  2028               	addwfc	Read_sec@e+1,w,c
  2742  007028  6E28               	movwf	Read_sec@e+1,c
  2743                           
  2744                           ;time.c: 227: c = Read();
  2745  00702A  EC64  F037         	call	_Read	;wreg free
  2746  00702E  6E29               	movwf	Read_sec@c,c
  2747                           
  2748                           ;time.c: 228: *e = ((c>>4)&0x07) + '0';
  2749  007030  3829               	swapf	Read_sec@c,w,c
  2750  007032  0B0F               	andlw	15
  2751  007034  0B07               	andlw	7
  2752  007036  0F30               	addlw	48
  2753  007038  C027  FFD9         	movff	Read_sec@e,fsr2l
  2754  00703C  C028  FFDA         	movff	Read_sec@e+1,fsr2h
  2755  007040  6EDF               	movwf	indf2,c
  2756                           
  2757                           ;time.c: 229: e++;
  2758  007042  4A27               	infsnz	Read_sec@e,f,c
  2759  007044  2A28               	incf	Read_sec@e+1,f,c
  2760                           
  2761                           ;time.c: 230: *e = (c&0x0F) + '0';
  2762  007046  5029               	movf	Read_sec@c,w,c
  2763  007048  0B0F               	andlw	15
  2764  00704A  0F30               	addlw	48
  2765  00704C  C027  FFD9         	movff	Read_sec@e,fsr2l
  2766  007050  C028  FFDA         	movff	Read_sec@e+1,fsr2h
  2767  007054  6EDF               	movwf	indf2,c
  2768                           
  2769                           ;time.c: 231: e++;
  2770  007056  4A27               	infsnz	Read_sec@e,f,c
  2771  007058  2A28               	incf	Read_sec@e+1,f,c
  2772                           
  2773                           ;time.c: 232: *e = ' ';
  2774  00705A  C027  FFD9         	movff	Read_sec@e,fsr2l
  2775  00705E  C028  FFDA         	movff	Read_sec@e+1,fsr2h
  2776  007062  0E20               	movlw	32
  2777  007064  6EDF               	movwf	indf2,c
  2778  007066  0012               	return	
  2779  007068                     __end_of_Read_sec:
  2780                           	opt stack 0
  2781                           tblptru	equ	0xFF8
  2782                           tblptrh	equ	0xFF7
  2783                           tblptrl	equ	0xFF6
  2784                           tablat	equ	0xFF5
  2785                           postinc0	equ	0xFEE
  2786                           wreg	equ	0xFE8
  2787                           indf1	equ	0xFE7
  2788                           postinc1	equ	0xFE6
  2789                           postdec1	equ	0xFE5
  2790                           fsr1h	equ	0xFE2
  2791                           fsr1l	equ	0xFE1
  2792                           indf2	equ	0xFDF
  2793                           postinc2	equ	0xFDE
  2794                           fsr2h	equ	0xFDA
  2795                           fsr2l	equ	0xFD9
  2796                           status	equ	0xFD8
  2797                           
  2798 ;; *************** function _Read *****************
  2799 ;; Defined at:
  2800 ;;		line 47 in file "i2c_1.c"
  2801 ;; Parameters:    Size  Location     Type
  2802 ;;		None
  2803 ;; Auto vars:     Size  Location     Type
  2804 ;;  c               1   37[COMRAM] unsigned char 
  2805 ;; Return value:  Size  Location     Type
  2806 ;;                  1    wreg      unsigned char 
  2807 ;; Registers used:
  2808 ;;		wreg, status,2, status,0, cstack
  2809 ;; Tracked objects:
  2810 ;;		On entry : 0/0
  2811 ;;		On exit  : 0/0
  2812 ;;		Unchanged: 0/0
  2813 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2814 ;;      Params:         0       0       0       0       0       0       0       0       0
  2815 ;;      Locals:         1       0       0       0       0       0       0       0       0
  2816 ;;      Temps:          1       0       0       0       0       0       0       0       0
  2817 ;;      Totals:         2       0       0       0       0       0       0       0       0
  2818 ;;Total ram usage:        2 bytes
  2819 ;; Hardware stack levels used:    1
  2820 ;; Hardware stack levels required when called:    3
  2821 ;; This function calls:
  2822 ;;		_delay_ms
  2823 ;;		_ReadBUF
  2824 ;;		_Write_I2C
  2825 ;;		_ReadI2C
  2826 ;; This function is called by:
  2827 ;;		_Read_sec
  2828 ;;		_Read_min
  2829 ;;		_Read_hour
  2830 ;;		_Read_day
  2831 ;;		_Read_date
  2832 ;;		_Read_month
  2833 ;;		_Read_year
  2834 ;; This function uses a non-reentrant model
  2835 ;;
  2836                           
  2837                           	psect	text11
  2838  006EC8                     __ptext11:
  2839                           	opt stack 0
  2840  006EC8                     _Read:
  2841                           	opt stack 25
  2842                           
  2843                           ;i2c_1.c: 48: unsigned char c;
  2844                           ;i2c_1.c: 49: SSPCON2bits.RSEN=1;while(SSPCON2bits.RSEN);
  2845                           
  2846                           ;incstack = 0
  2847                           ;incstack = 0
  2848  006EC8  82C5               	bsf	4037,1,c	;volatile
  2849  006ECA                     l312:
  2850  006ECA  B2C5               	btfsc	4037,1,c	;volatile
  2851  006ECC  D7FE               	goto	l312
  2852                           
  2853                           ;i2c_1.c: 50: delay_ms(1);
  2854  006ECE  6E25               	movwf	??_Read& (0+255),c
  2855  006ED0  0E01               	movlw	1
  2856  006ED2  6E22               	movwf	?_delay_ms,c
  2857  006ED4  5025               	movf	??_Read& (0+255),w,c
  2858  006ED6  EC1E  F037         	call	_delay_ms	;wreg free
  2859                           
  2860                           ;i2c_1.c: 51: Write_I2C( 0xD1 );
  2861  006EDA  6E25               	movwf	??_Read& (0+255),c
  2862  006EDC  0ED1               	movlw	209
  2863  006EDE  6E22               	movwf	?_Write_I2C,c
  2864  006EE0  5025               	movf	??_Read& (0+255),w,c
  2865  006EE2  ECD0  F036         	call	_Write_I2C	;wreg free
  2866                           
  2867                           ;i2c_1.c: 52: c = ReadI2C();
  2868  006EE6  EC02  F037         	call	_ReadI2C	;wreg free
  2869  006EEA  6E26               	movwf	Read@c,c
  2870                           
  2871                           ;i2c_1.c: 53: ReadBUF();
  2872  006EEC  ECBE  F036         	call	_ReadBUF	;wreg free
  2873                           
  2874                           ;i2c_1.c: 54: return(c);
  2875  006EF0  5026               	movf	Read@c,w,c
  2876  006EF2  0012               	return	
  2877  006EF4                     __end_of_Read:
  2878                           	opt stack 0
  2879                           tblptru	equ	0xFF8
  2880                           tblptrh	equ	0xFF7
  2881                           tblptrl	equ	0xFF6
  2882                           tablat	equ	0xFF5
  2883                           postinc0	equ	0xFEE
  2884                           wreg	equ	0xFE8
  2885                           indf1	equ	0xFE7
  2886                           postinc1	equ	0xFE6
  2887                           postdec1	equ	0xFE5
  2888                           fsr1h	equ	0xFE2
  2889                           fsr1l	equ	0xFE1
  2890                           indf2	equ	0xFDF
  2891                           postinc2	equ	0xFDE
  2892                           fsr2h	equ	0xFDA
  2893                           fsr2l	equ	0xFD9
  2894                           status	equ	0xFD8
  2895                           
  2896 ;; *************** function _delay_us *****************
  2897 ;; Defined at:
  2898 ;;		line 28 in file "delay.c"
  2899 ;; Parameters:    Size  Location     Type
  2900 ;;  t               1    1[COMRAM] unsigned char 
  2901 ;; Auto vars:     Size  Location     Type
  2902 ;;  i               1    3[COMRAM] unsigned char 
  2903 ;; Return value:  Size  Location     Type
  2904 ;;		None               void
  2905 ;; Registers used:
  2906 ;;		wreg, status,2, status,0, cstack
  2907 ;; Tracked objects:
  2908 ;;		On entry : 0/0
  2909 ;;		On exit  : 0/0
  2910 ;;		Unchanged: 0/0
  2911 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2912 ;;      Params:         1       0       0       0       0       0       0       0       0
  2913 ;;      Locals:         1       0       0       0       0       0       0       0       0
  2914 ;;      Temps:          1       0       0       0       0       0       0       0       0
  2915 ;;      Totals:         3       0       0       0       0       0       0       0       0
  2916 ;;Total ram usage:        3 bytes
  2917 ;; Hardware stack levels used:    1
  2918 ;; Hardware stack levels required when called:    1
  2919 ;; This function calls:
  2920 ;;		_Delay1KTCYx
  2921 ;; This function is called by:
  2922 ;;		_Read_time
  2923 ;; This function uses a non-reentrant model
  2924 ;;
  2925                           
  2926                           	psect	text12
  2927  006E5C                     __ptext12:
  2928                           	opt stack 0
  2929  006E5C                     _delay_us:
  2930                           	opt stack 28
  2931                           
  2932                           ;delay.c: 29: unsigned char i;
  2933                           ;delay.c: 30: for (i=0;i<=t;i++)
  2934                           
  2935                           ;incstack = 0
  2936                           ;incstack = 0
  2937  006E5C  6E03               	movwf	??_delay_us& (0+255),c
  2938  006E5E  0E00               	movlw	0
  2939  006E60  6E04               	movwf	delay_us@i,c
  2940  006E62  5003               	movf	??_delay_us& (0+255),w,c
  2941  006E64  D007               	goto	l2275
  2942  006E66                     l2271:
  2943                           
  2944                           ;delay.c: 31: Delay1KTCYx(1);
  2945  006E66  6E03               	movwf	??_delay_us& (0+255),c
  2946  006E68  0E01               	movlw	1
  2947  006E6A  6E01               	movwf	?_Delay1KTCYx,c
  2948  006E6C  5003               	movf	??_delay_us& (0+255),w,c
  2949  006E6E  ECD7  F036         	call	_Delay1KTCYx	;wreg free
  2950  006E72  2A04               	incf	delay_us@i,f,c
  2951  006E74                     l2275:
  2952  006E74  5004               	movf	delay_us@i,w,c
  2953  006E76  6002               	cpfslt	delay_us@t,c
  2954  006E78  D7F6               	goto	l2271
  2955                           
  2956                           ;delay.c: 34: return;
  2957  006E7A  0012               	return	
  2958  006E7C                     __end_of_delay_us:
  2959                           	opt stack 0
  2960                           tblptru	equ	0xFF8
  2961                           tblptrh	equ	0xFF7
  2962                           tblptrl	equ	0xFF6
  2963                           tablat	equ	0xFF5
  2964                           postinc0	equ	0xFEE
  2965                           wreg	equ	0xFE8
  2966                           indf1	equ	0xFE7
  2967                           postinc1	equ	0xFE6
  2968                           postdec1	equ	0xFE5
  2969                           fsr1h	equ	0xFE2
  2970                           fsr1l	equ	0xFE1
  2971                           indf2	equ	0xFDF
  2972                           postinc2	equ	0xFDE
  2973                           fsr2h	equ	0xFDA
  2974                           fsr2l	equ	0xFD9
  2975                           status	equ	0xFD8
  2976                           
  2977 ;; *************** function _Delay1KTCYx *****************
  2978 ;; Defined at:
  2979 ;;		line 9 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\d1ktcyx.c"
  2980 ;; Parameters:    Size  Location     Type
  2981 ;;  unit            1    0[COMRAM] unsigned char 
  2982 ;; Auto vars:     Size  Location     Type
  2983 ;;		None
  2984 ;; Return value:  Size  Location     Type
  2985 ;;		None               void
  2986 ;; Registers used:
  2987 ;;		wreg
  2988 ;; Tracked objects:
  2989 ;;		On entry : 0/0
  2990 ;;		On exit  : 0/0
  2991 ;;		Unchanged: 0/0
  2992 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2993 ;;      Params:         1       0       0       0       0       0       0       0       0
  2994 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2995 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2996 ;;      Totals:         1       0       0       0       0       0       0       0       0
  2997 ;;Total ram usage:        1 bytes
  2998 ;; Hardware stack levels used:    1
  2999 ;; This function calls:
  3000 ;;		Nothing
  3001 ;; This function is called by:
  3002 ;;		_delay_ms
  3003 ;;		_delay_us
  3004 ;;		_DelayPORXLCD
  3005 ;;		_DelayXLCD
  3006 ;; This function uses a non-reentrant model
  3007 ;;
  3008                           
  3009                           	psect	text13
  3010  006DAE                     __ptext13:
  3011                           	opt stack 0
  3012  006DAE                     _Delay1KTCYx:
  3013                           	opt stack 26
  3014  006DAE                     l771:
  3015  006DAE  0EFA               	movlw	250
  3016  006DB0                     u2637:
  3017  006DB0  F000               	nop	
  3018  006DB2  2EE8               	decfsz	wreg,f,c
  3019  006DB4  D7FD               	goto	u2637
  3020  006DB6  2E01               	decfsz	Delay1KTCYx@unit,f,c
  3021  006DB8  D7FA               	goto	l771
  3022  006DBA  0012               	return	
  3023  006DBC                     __end_of_Delay1KTCYx:
  3024                           	opt stack 0
  3025                           tblptru	equ	0xFF8
  3026                           tblptrh	equ	0xFF7
  3027                           tblptrl	equ	0xFF6
  3028                           tablat	equ	0xFF5
  3029                           postinc0	equ	0xFEE
  3030                           wreg	equ	0xFE8
  3031                           indf1	equ	0xFE7
  3032                           postinc1	equ	0xFE6
  3033                           postdec1	equ	0xFE5
  3034                           fsr1h	equ	0xFE2
  3035                           fsr1l	equ	0xFE1
  3036                           indf2	equ	0xFDF
  3037                           postinc2	equ	0xFDE
  3038                           fsr2h	equ	0xFDA
  3039                           fsr2l	equ	0xFD9
  3040                           status	equ	0xFD8
  3041                           
  3042 ;; *************** function _Get_data *****************
  3043 ;; Defined at:
  3044 ;;		line 170 in file "time.c"
  3045 ;; Parameters:    Size  Location     Type
  3046 ;;		None
  3047 ;; Auto vars:     Size  Location     Type
  3048 ;;  str2           19    1[BANK0 ] unsigned char [19]
  3049 ;;  error          18   34[BANK0 ] unsigned char [18]
  3050 ;;  str8           14   20[BANK0 ] unsigned char [14]
  3051 ;;  s_6             3   67[BANK0 ] unsigned char [3]
  3052 ;;  s_5             3   64[BANK0 ] unsigned char [3]
  3053 ;;  s_4             3   61[BANK0 ] unsigned char [3]
  3054 ;;  s_3             3   58[BANK0 ] unsigned char [3]
  3055 ;;  s_2             3   55[BANK0 ] unsigned char [3]
  3056 ;;  s_1             3   52[BANK0 ] unsigned char [3]
  3057 ;;  mode            1   77[BANK0 ] unsigned char 
  3058 ;;  month           1   76[BANK0 ] unsigned char 
  3059 ;;  date            1   75[BANK0 ] unsigned char 
  3060 ;;  year            1   74[BANK0 ] unsigned char 
  3061 ;;  h               1   73[BANK0 ] unsigned char 
  3062 ;;  m               1   72[BANK0 ] unsigned char 
  3063 ;;  s               1   71[BANK0 ] unsigned char 
  3064 ;;  day             1   70[BANK0 ] unsigned char 
  3065 ;; Return value:  Size  Location     Type
  3066 ;;                  1    wreg      unsigned char 
  3067 ;; Registers used:
  3068 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3069 ;; Tracked objects:
  3070 ;;		On entry : 0/0
  3071 ;;		On exit  : 0/0
  3072 ;;		Unchanged: 0/0
  3073 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3074 ;;      Params:         0       0       0       0       0       0       0       0       0
  3075 ;;      Locals:         0      77       0       0       0       0       0       0       0
  3076 ;;      Temps:          0       1       0       0       0       0       0       0       0
  3077 ;;      Totals:         0      78       0       0       0       0       0       0       0
  3078 ;;Total ram usage:       78 bytes
  3079 ;; Hardware stack levels used:    1
  3080 ;; Hardware stack levels required when called:    4
  3081 ;; This function calls:
  3082 ;;		_Write_str
  3083 ;;		_Set_time
  3084 ;;		_Read_string
  3085 ;;		_Set_day
  3086 ;;		_Set_date
  3087 ;;		_strcmp
  3088 ;;		_Write_time_
  3089 ;;		_Write_time
  3090 ;; This function is called by:
  3091 ;;		_main
  3092 ;; This function uses a non-reentrant model
  3093 ;;
  3094                           
  3095                           	psect	text14
  3096  007D36                     __ptext14:
  3097                           	opt stack 0
  3098  007D36                     _Get_data:
  3099                           	opt stack 26
  3100                           
  3101                           ;time.c: 171: unsigned char s, m, h, day, date, month, year, mode=4;
  3102                           
  3103                           ;incstack = 0
  3104                           ;incstack = 0
  3105  007D36  0100               	movlb	0	; () banked
  3106  007D38  6F60               	movwf	??_Get_data& (0+255),b
  3107  007D3A  0E04               	movlw	4
  3108  007D3C  0100               	movlb	0	; () banked
  3109  007D3E  0100               	movlb	0	; () banked
  3110  007D40  6FAD               	movwf	Get_data@mode& (0+255),b
  3111  007D42  0100               	movlb	0	; () banked
  3112  007D44  5160               	movf	??_Get_data& (0+255),w,b
  3113                           
  3114                           ; BSR set to: 0
  3115                           ;time.c: 172: unsigned char str2[19] = "\nSELECT MODE 12/24";
  3116  007D46  EE21  F05E         	lfsr	2,Get_data@F227
  3117  007D4A  EE10  F061         	lfsr	1,Get_data@str2
  3118  007D4E  0E13               	movlw	19
  3119  007D50                     u2291:
  3120  007D50  CFDE FFE6          	movff	postinc2,postinc1
  3121  007D54  2EE8               	decfsz	wreg,f,c
  3122  007D56  D7FC               	goto	u2291
  3123                           
  3124                           ; BSR set to: 0
  3125                           ;time.c: 173: unsigned char str8[14] = "\nEnter AM/PM?";
  3126  007D58  EE21  F0B9         	lfsr	2,Get_data@F229
  3127  007D5C  EE10  F074         	lfsr	1,Get_data@str8
  3128  007D60  0E0E               	movlw	14
  3129  007D62                     u2301:
  3130  007D62  CFDE FFE6          	movff	postinc2,postinc1
  3131  007D66  2EE8               	decfsz	wreg,f,c
  3132  007D68  D7FC               	goto	u2301
  3133                           
  3134                           ; BSR set to: 0
  3135                           ;time.c: 174: unsigned char error[] = "\nInvalid Entry..!";
  3136  007D6A  EE21  F071         	lfsr	2,Get_data@F231
  3137  007D6E  EE10  F082         	lfsr	1,Get_data@error
  3138  007D72  0E12               	movlw	18
  3139  007D74                     u2311:
  3140  007D74  CFDE FFE6          	movff	postinc2,postinc1
  3141  007D78  2EE8               	decfsz	wreg,f,c
  3142  007D7A  D7FC               	goto	u2311
  3143                           
  3144                           ; BSR set to: 0
  3145                           ;time.c: 175: unsigned char s_1[3] = "12";
  3146  007D7C  C1E3  F094         	movff	Get_data@F233,Get_data@s_1
  3147  007D80  C1E4  F095         	movff	Get_data@F233+1,Get_data@s_1+1
  3148  007D84  C1E5  F096         	movff	Get_data@F233+2,Get_data@s_1+2
  3149                           
  3150                           ; BSR set to: 0
  3151                           ;time.c: 176: unsigned char s_2[3] = "24";
  3152  007D88  C1E6  F097         	movff	Get_data@F235,Get_data@s_2
  3153  007D8C  C1E7  F098         	movff	Get_data@F235+1,Get_data@s_2+1
  3154  007D90  C1E8  F099         	movff	Get_data@F235+2,Get_data@s_2+2
  3155                           
  3156                           ; BSR set to: 0
  3157                           ;time.c: 177: unsigned char s_3[3] = "am";
  3158  007D94  C1E9  F09A         	movff	Get_data@F237,Get_data@s_3
  3159  007D98  C1EA  F09B         	movff	Get_data@F237+1,Get_data@s_3+1
  3160  007D9C  C1EB  F09C         	movff	Get_data@F237+2,Get_data@s_3+2
  3161                           
  3162                           ; BSR set to: 0
  3163                           ;time.c: 178: unsigned char s_4[3] = "AM";
  3164  007DA0  C1EC  F09D         	movff	Get_data@F239,Get_data@s_4
  3165  007DA4  C1ED  F09E         	movff	Get_data@F239+1,Get_data@s_4+1
  3166  007DA8  C1EE  F09F         	movff	Get_data@F239+2,Get_data@s_4+2
  3167                           
  3168                           ; BSR set to: 0
  3169                           ;time.c: 179: unsigned char s_5[3] = "pm";
  3170  007DAC  C1EF  F0A0         	movff	Get_data@F241,Get_data@s_5
  3171  007DB0  C1F0  F0A1         	movff	Get_data@F241+1,Get_data@s_5+1
  3172  007DB4  C1F1  F0A2         	movff	Get_data@F241+2,Get_data@s_5+2
  3173                           
  3174                           ; BSR set to: 0
  3175                           ;time.c: 180: unsigned char s_6[3] = "PM";
  3176  007DB8  C1F2  F0A3         	movff	Get_data@F243,Get_data@s_6
  3177  007DBC  C1F3  F0A4         	movff	Get_data@F243+1,Get_data@s_6+1
  3178  007DC0  C1F4  F0A5         	movff	Get_data@F243+2,Get_data@s_6+2
  3179  007DC4                     l2569:
  3180                           
  3181                           ; BSR set to: 0
  3182                           ;time.c: 182: {
  3183                           ;time.c: 183: Write_str(str2);
  3184  007DC4  0100               	movlb	0	; () banked
  3185  007DC6  0E00               	movlw	high Get_data@str2
  3186  007DC8  6E04               	movwf	?_Write_str+1,c
  3187  007DCA  0100               	movlb	0	; () banked
  3188  007DCC  0E61               	movlw	low Get_data@str2
  3189  007DCE  6E03               	movwf	?_Write_str,c
  3190  007DD0  EC91  F037         	call	_Write_str	;wreg free
  3191                           
  3192                           ;time.c: 184: Read_string(str, 2);
  3193  007DD4  0100               	movlb	0	; () banked
  3194  007DD6  0E00               	movlw	high _str
  3195  007DD8  6E04               	movwf	?_Read_string+1,c
  3196  007DDA  0100               	movlb	0	; () banked
  3197  007DDC  0EF3               	movlw	low _str
  3198  007DDE  6E03               	movwf	?_Read_string,c
  3199  007DE0  0100               	movlb	0	; () banked
  3200  007DE2  6F60               	movwf	??_Get_data& (0+255),b
  3201  007DE4  0E02               	movlw	2
  3202  007DE6  6E05               	movwf	?_Read_string+2,c
  3203  007DE8  0100               	movlb	0	; () banked
  3204  007DEA  5160               	movf	??_Get_data& (0+255),w,b
  3205  007DEC  ECA7  F038         	call	_Read_string	;wreg free
  3206                           
  3207                           ;time.c: 185: if(!(strcmp(str, s_1)))
  3208  007DF0  0100               	movlb	0	; () banked
  3209  007DF2  0E00               	movlw	high _str
  3210  007DF4  6E02               	movwf	?_strcmp+1,c
  3211  007DF6  0100               	movlb	0	; () banked
  3212  007DF8  0EF3               	movlw	low _str
  3213  007DFA  6E01               	movwf	?_strcmp,c
  3214  007DFC  0100               	movlb	0	; () banked
  3215  007DFE  0E00               	movlw	high Get_data@s_1
  3216  007E00  6E04               	movwf	?_strcmp+3,c
  3217  007E02  0100               	movlb	0	; () banked
  3218  007E04  0E94               	movlw	low Get_data@s_1
  3219  007E06  6E03               	movwf	?_strcmp+2,c
  3220  007E08  ECC8  F037         	call	_strcmp	;wreg free
  3221  007E0C  5002               	movf	?_strcmp+1,w,c
  3222  007E0E  1001               	iorwf	?_strcmp,w,c
  3223  007E10  A4D8               	btfss	status,2,c
  3224  007E12  D07E               	goto	l2593
  3225  007E14                     l2575:
  3226                           
  3227                           ;time.c: 188: Write_str(str8);
  3228  007E14  0100               	movlb	0	; () banked
  3229  007E16  0E00               	movlw	high Get_data@str8
  3230  007E18  6E04               	movwf	?_Write_str+1,c
  3231  007E1A  0100               	movlb	0	; () banked
  3232  007E1C  0E74               	movlw	low Get_data@str8
  3233  007E1E  6E03               	movwf	?_Write_str,c
  3234  007E20  EC91  F037         	call	_Write_str	;wreg free
  3235                           
  3236                           ;time.c: 189: Read_string(str, 2);
  3237  007E24  0100               	movlb	0	; () banked
  3238  007E26  0E00               	movlw	high _str
  3239  007E28  6E04               	movwf	?_Read_string+1,c
  3240  007E2A  0100               	movlb	0	; () banked
  3241  007E2C  0EF3               	movlw	low _str
  3242  007E2E  6E03               	movwf	?_Read_string,c
  3243  007E30  0100               	movlb	0	; () banked
  3244  007E32  6F60               	movwf	??_Get_data& (0+255),b
  3245  007E34  0E02               	movlw	2
  3246  007E36  6E05               	movwf	?_Read_string+2,c
  3247  007E38  0100               	movlb	0	; () banked
  3248  007E3A  5160               	movf	??_Get_data& (0+255),w,b
  3249  007E3C  ECA7  F038         	call	_Read_string	;wreg free
  3250                           
  3251                           ;time.c: 190: if(!(strcmp(str, s_3)) || !(strcmp(str, s_4)) )
  3252  007E40  0100               	movlb	0	; () banked
  3253  007E42  0E00               	movlw	high _str
  3254  007E44  6E02               	movwf	?_strcmp+1,c
  3255  007E46  0100               	movlb	0	; () banked
  3256  007E48  0EF3               	movlw	low _str
  3257  007E4A  6E01               	movwf	?_strcmp,c
  3258  007E4C  0100               	movlb	0	; () banked
  3259  007E4E  0E00               	movlw	high Get_data@s_3
  3260  007E50  6E04               	movwf	?_strcmp+3,c
  3261  007E52  0100               	movlb	0	; () banked
  3262  007E54  0E9A               	movlw	low Get_data@s_3
  3263  007E56  6E03               	movwf	?_strcmp+2,c
  3264  007E58  ECC8  F037         	call	_strcmp	;wreg free
  3265  007E5C  5002               	movf	?_strcmp+1,w,c
  3266  007E5E  1001               	iorwf	?_strcmp,w,c
  3267  007E60  B4D8               	btfsc	status,2,c
  3268  007E62  D012               	goto	l2579
  3269  007E64  0100               	movlb	0	; () banked
  3270  007E66  0E00               	movlw	high _str
  3271  007E68  6E02               	movwf	?_strcmp+1,c
  3272  007E6A  0100               	movlb	0	; () banked
  3273  007E6C  0EF3               	movlw	low _str
  3274  007E6E  6E01               	movwf	?_strcmp,c
  3275  007E70  0100               	movlb	0	; () banked
  3276  007E72  0E00               	movlw	high Get_data@s_4
  3277  007E74  6E04               	movwf	?_strcmp+3,c
  3278  007E76  0100               	movlb	0	; () banked
  3279  007E78  0E9D               	movlw	low Get_data@s_4
  3280  007E7A  6E03               	movwf	?_strcmp+2,c
  3281  007E7C  ECC8  F037         	call	_strcmp	;wreg free
  3282  007E80  5002               	movf	?_strcmp+1,w,c
  3283  007E82  1001               	iorwf	?_strcmp,w,c
  3284  007E84  A4D8               	btfss	status,2,c
  3285  007E86  D004               	goto	l2581
  3286  007E88                     l2579:
  3287                           
  3288                           ;time.c: 191: {
  3289                           ;time.c: 192: mode = 0;
  3290  007E88  0100               	movlb	0	; () banked
  3291  007E8A  6F60               	movwf	??_Get_data& (0+255),b
  3292  007E8C  0E00               	movlw	0
  3293  007E8E  D027               	goto	L3
  3294  007E90                     l2581:
  3295                           
  3296                           ;time.c: 194: else if(!(strcmp(str, s_5)) || !(strcmp(str, s_6)) )
  3297  007E90  0100               	movlb	0	; () banked
  3298  007E92  0E00               	movlw	high _str
  3299  007E94  6E02               	movwf	?_strcmp+1,c
  3300  007E96  0100               	movlb	0	; () banked
  3301  007E98  0EF3               	movlw	low _str
  3302  007E9A  6E01               	movwf	?_strcmp,c
  3303  007E9C  0100               	movlb	0	; () banked
  3304  007E9E  0E00               	movlw	high Get_data@s_5
  3305  007EA0  6E04               	movwf	?_strcmp+3,c
  3306  007EA2  0100               	movlb	0	; () banked
  3307  007EA4  0EA0               	movlw	low Get_data@s_5
  3308  007EA6  6E03               	movwf	?_strcmp+2,c
  3309  007EA8  ECC8  F037         	call	_strcmp	;wreg free
  3310  007EAC  5002               	movf	?_strcmp+1,w,c
  3311  007EAE  1001               	iorwf	?_strcmp,w,c
  3312  007EB0  B4D8               	btfsc	status,2,c
  3313  007EB2  D012               	goto	l2585
  3314  007EB4  0100               	movlb	0	; () banked
  3315  007EB6  0E00               	movlw	high _str
  3316  007EB8  6E02               	movwf	?_strcmp+1,c
  3317  007EBA  0100               	movlb	0	; () banked
  3318  007EBC  0EF3               	movlw	low _str
  3319  007EBE  6E01               	movwf	?_strcmp,c
  3320  007EC0  0100               	movlb	0	; () banked
  3321  007EC2  0E00               	movlw	high Get_data@s_6
  3322  007EC4  6E04               	movwf	?_strcmp+3,c
  3323  007EC6  0100               	movlb	0	; () banked
  3324  007EC8  0EA3               	movlw	low Get_data@s_6
  3325  007ECA  6E03               	movwf	?_strcmp+2,c
  3326  007ECC  ECC8  F037         	call	_strcmp	;wreg free
  3327  007ED0  5002               	movf	?_strcmp+1,w,c
  3328  007ED2  1001               	iorwf	?_strcmp,w,c
  3329  007ED4  A4D8               	btfss	status,2,c
  3330  007ED6  D009               	goto	l2587
  3331  007ED8                     l2585:
  3332                           
  3333                           ;time.c: 195: {
  3334                           ;time.c: 196: mode = 1;
  3335  007ED8  0100               	movlb	0	; () banked
  3336  007EDA  6F60               	movwf	??_Get_data& (0+255),b
  3337  007EDC  0E01               	movlw	1
  3338  007EDE                     L3:
  3339  007EDE  0100               	movlb	0	; () banked
  3340  007EE0  0100               	movlb	0	; () banked
  3341  007EE2  6FAD               	movwf	Get_data@mode& (0+255),b
  3342  007EE4  0100               	movlb	0	; () banked
  3343  007EE6  5160               	movf	??_Get_data& (0+255),w,b
  3344                           
  3345                           ;time.c: 197: }
  3346  007EE8  D008               	goto	l2589
  3347  007EEA                     l2587:
  3348                           
  3349                           ;time.c: 198: else
  3350                           ;time.c: 199: {
  3351                           ;time.c: 200: Write_str(error);
  3352  007EEA  0100               	movlb	0	; () banked
  3353  007EEC  0E00               	movlw	high Get_data@error
  3354  007EEE  6E04               	movwf	?_Write_str+1,c
  3355  007EF0  0100               	movlb	0	; () banked
  3356  007EF2  0E82               	movlw	low Get_data@error
  3357  007EF4  6E03               	movwf	?_Write_str,c
  3358  007EF6  EC91  F037         	call	_Write_str	;wreg free
  3359  007EFA                     l2589:
  3360                           
  3361                           ;time.c: 201: }
  3362                           ;time.c: 202: }while(!(mode==0||mode==1));
  3363  007EFA  0100               	movlb	0	; () banked
  3364  007EFC  0100               	movlb	0	; () banked
  3365  007EFE  51AD               	movf	Get_data@mode& (0+255),w,b
  3366  007F00  B4D8               	btfsc	status,2,c
  3367  007F02  D029               	goto	l2599
  3368                           
  3369                           ; BSR set to: 0
  3370  007F04  0100               	movlb	0	; () banked
  3371  007F06  0100               	movlb	0	; () banked
  3372  007F08  05AD               	decf	Get_data@mode& (0+255),w,b
  3373  007F0A  B4D8               	btfsc	status,2,c
  3374  007F0C  D024               	goto	l2599
  3375  007F0E  D782               	goto	l2575
  3376  007F10                     l2593:
  3377                           
  3378                           ;time.c: 204: else if(!(strcmp(str, s_2)))
  3379  007F10  0100               	movlb	0	; () banked
  3380  007F12  0E00               	movlw	high _str
  3381  007F14  6E02               	movwf	?_strcmp+1,c
  3382  007F16  0100               	movlb	0	; () banked
  3383  007F18  0EF3               	movlw	low _str
  3384  007F1A  6E01               	movwf	?_strcmp,c
  3385  007F1C  0100               	movlb	0	; () banked
  3386  007F1E  0E00               	movlw	high Get_data@s_2
  3387  007F20  6E04               	movwf	?_strcmp+3,c
  3388  007F22  0100               	movlb	0	; () banked
  3389  007F24  0E97               	movlw	low Get_data@s_2
  3390  007F26  6E03               	movwf	?_strcmp+2,c
  3391  007F28  ECC8  F037         	call	_strcmp	;wreg free
  3392  007F2C  5002               	movf	?_strcmp+1,w,c
  3393  007F2E  1001               	iorwf	?_strcmp,w,c
  3394  007F30  A4D8               	btfss	status,2,c
  3395  007F32  D009               	goto	l2597
  3396                           
  3397                           ;time.c: 205: {
  3398                           ;time.c: 206: mode = 2;
  3399  007F34  0100               	movlb	0	; () banked
  3400  007F36  6F60               	movwf	??_Get_data& (0+255),b
  3401  007F38  0E02               	movlw	2
  3402  007F3A  0100               	movlb	0	; () banked
  3403  007F3C  0100               	movlb	0	; () banked
  3404  007F3E  6FAD               	movwf	Get_data@mode& (0+255),b
  3405  007F40  0100               	movlb	0	; () banked
  3406  007F42  5160               	movf	??_Get_data& (0+255),w,b
  3407                           
  3408                           ;time.c: 207: }
  3409  007F44  D008               	goto	l2599
  3410  007F46                     l2597:
  3411                           
  3412                           ;time.c: 208: else
  3413                           ;time.c: 209: {
  3414                           ;time.c: 210: Write_str(error);
  3415  007F46  0100               	movlb	0	; () banked
  3416  007F48  0E00               	movlw	high Get_data@error
  3417  007F4A  6E04               	movwf	?_Write_str+1,c
  3418  007F4C  0100               	movlb	0	; () banked
  3419  007F4E  0E82               	movlw	low Get_data@error
  3420  007F50  6E03               	movwf	?_Write_str,c
  3421  007F52  EC91  F037         	call	_Write_str	;wreg free
  3422  007F56                     l2599:
  3423                           
  3424                           ;time.c: 211: }
  3425                           ;time.c: 212: }while(!(mode==0 || mode==1 || mode==2));
  3426  007F56  0100               	movlb	0	; () banked
  3427  007F58  0100               	movlb	0	; () banked
  3428  007F5A  51AD               	movf	Get_data@mode& (0+255),w,b
  3429  007F5C  B4D8               	btfsc	status,2,c
  3430  007F5E  D00B               	goto	l2605
  3431                           
  3432                           ; BSR set to: 0
  3433  007F60  0100               	movlb	0	; () banked
  3434  007F62  0100               	movlb	0	; () banked
  3435  007F64  05AD               	decf	Get_data@mode& (0+255),w,b
  3436  007F66  B4D8               	btfsc	status,2,c
  3437  007F68  D006               	goto	l2605
  3438                           
  3439                           ; BSR set to: 0
  3440  007F6A  0100               	movlb	0	; () banked
  3441  007F6C  0100               	movlb	0	; () banked
  3442  007F6E  51AD               	movf	Get_data@mode& (0+255),w,b
  3443  007F70  0A02               	xorlw	2
  3444  007F72  A4D8               	btfss	status,2,c
  3445  007F74  D727               	goto	l2569
  3446  007F76                     l2605:
  3447                           
  3448                           ; BSR set to: 0
  3449                           ;time.c: 213: Set_time(&s, &m, &h ,mode);
  3450  007F76  0100               	movlb	0	; () banked
  3451  007F78  0E00               	movlw	high Get_data@s
  3452  007F7A  6E0A               	movwf	?_Set_time+1,c
  3453  007F7C  0100               	movlb	0	; () banked
  3454  007F7E  0EA7               	movlw	low Get_data@s
  3455  007F80  6E09               	movwf	?_Set_time,c
  3456  007F82  0100               	movlb	0	; () banked
  3457  007F84  0E00               	movlw	high Get_data@m
  3458  007F86  6E0C               	movwf	?_Set_time+3,c
  3459  007F88  0100               	movlb	0	; () banked
  3460  007F8A  0EA8               	movlw	low Get_data@m
  3461  007F8C  6E0B               	movwf	?_Set_time+2,c
  3462  007F8E  0100               	movlb	0	; () banked
  3463  007F90  0E00               	movlw	high Get_data@h
  3464  007F92  6E0E               	movwf	?_Set_time+5,c
  3465  007F94  0100               	movlb	0	; () banked
  3466  007F96  0EA9               	movlw	low Get_data@h
  3467  007F98  6E0D               	movwf	?_Set_time+4,c
  3468  007F9A  C0AD  F00F         	movff	Get_data@mode,?_Set_time+6
  3469  007F9E  ECDC  F03D         	call	_Set_time	;wreg free
  3470                           
  3471                           ;time.c: 214: Write_time_(s, m, h);
  3472  007FA2  C0A7  F025         	movff	Get_data@s,?_Write_time_
  3473  007FA6  C0A8  F026         	movff	Get_data@m,?_Write_time_+1
  3474  007FAA  C0A9  F027         	movff	Get_data@h,?_Write_time_+2
  3475  007FAE  ECB7  F039         	call	_Write_time_	;wreg free
  3476                           
  3477                           ;time.c: 215: day = Set_day();
  3478  007FB2  EC57  F03A         	call	_Set_day	;wreg free
  3479  007FB6  0100               	movlb	0	; () banked
  3480  007FB8  0100               	movlb	0	; () banked
  3481  007FBA  6FA6               	movwf	Get_data@day& (0+255),b
  3482                           
  3483                           ; BSR set to: 0
  3484                           ;time.c: 216: Set_date(&date, &month, &year);
  3485  007FBC  0100               	movlb	0	; () banked
  3486  007FBE  0E00               	movlw	high Get_data@date
  3487  007FC0  6E0A               	movwf	?_Set_date+1,c
  3488  007FC2  0100               	movlb	0	; () banked
  3489  007FC4  0EAB               	movlw	low Get_data@date
  3490  007FC6  6E09               	movwf	?_Set_date,c
  3491  007FC8  0100               	movlb	0	; () banked
  3492  007FCA  0E00               	movlw	high Get_data@month
  3493  007FCC  6E0C               	movwf	?_Set_date+3,c
  3494  007FCE  0100               	movlb	0	; () banked
  3495  007FD0  0EAC               	movlw	low Get_data@month
  3496  007FD2  6E0B               	movwf	?_Set_date+2,c
  3497  007FD4  0100               	movlb	0	; () banked
  3498  007FD6  0E00               	movlw	high Get_data@year
  3499  007FD8  6E0E               	movwf	?_Set_date+5,c
  3500  007FDA  0100               	movlb	0	; () banked
  3501  007FDC  0EAA               	movlw	low Get_data@year
  3502  007FDE  6E0D               	movwf	?_Set_date+4,c
  3503  007FE0  EC92  F03C         	call	_Set_date	;wreg free
  3504                           
  3505                           ;time.c: 217: Write_time(day, date, month, year);
  3506  007FE4  C0A6  F025         	movff	Get_data@day,?_Write_time
  3507  007FE8  C0AB  F026         	movff	Get_data@date,?_Write_time+1
  3508  007FEC  C0AC  F027         	movff	Get_data@month,?_Write_time+2
  3509  007FF0  C0AA  F028         	movff	Get_data@year,?_Write_time+3
  3510  007FF4  EC06  F03A         	call	_Write_time	;wreg free
  3511                           
  3512                           ;time.c: 218: return (mode);
  3513  007FF8  0100               	movlb	0	; () banked
  3514  007FFA  0100               	movlb	0	; () banked
  3515  007FFC  51AD               	movf	Get_data@mode& (0+255),w,b
  3516                           
  3517                           ; BSR set to: 0
  3518                           
  3519                           ; BSR set to: 0
  3520  007FFE  0012               	return	
  3521  008000                     __end_of_Get_data:
  3522                           	opt stack 0
  3523                           tblptru	equ	0xFF8
  3524                           tblptrh	equ	0xFF7
  3525                           tblptrl	equ	0xFF6
  3526                           tablat	equ	0xFF5
  3527                           postinc0	equ	0xFEE
  3528                           wreg	equ	0xFE8
  3529                           indf1	equ	0xFE7
  3530                           postinc1	equ	0xFE6
  3531                           postdec1	equ	0xFE5
  3532                           fsr1h	equ	0xFE2
  3533                           fsr1l	equ	0xFE1
  3534                           indf2	equ	0xFDF
  3535                           postinc2	equ	0xFDE
  3536                           fsr2h	equ	0xFDA
  3537                           fsr2l	equ	0xFD9
  3538                           status	equ	0xFD8
  3539                           
  3540 ;; *************** function _Write_time *****************
  3541 ;; Defined at:
  3542 ;;		line 80 in file "i2c_1.c"
  3543 ;; Parameters:    Size  Location     Type
  3544 ;;  day             1   36[COMRAM] unsigned char 
  3545 ;;  date            1   37[COMRAM] unsigned char 
  3546 ;;  month           1   38[COMRAM] unsigned char 
  3547 ;;  year            1   39[COMRAM] unsigned char 
  3548 ;; Auto vars:     Size  Location     Type
  3549 ;;		None
  3550 ;; Return value:  Size  Location     Type
  3551 ;;		None               void
  3552 ;; Registers used:
  3553 ;;		wreg, status,2, status,0, cstack
  3554 ;; Tracked objects:
  3555 ;;		On entry : 0/0
  3556 ;;		On exit  : 0/0
  3557 ;;		Unchanged: 0/0
  3558 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3559 ;;      Params:         4       0       0       0       0       0       0       0       0
  3560 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3561 ;;      Temps:          1       0       0       0       0       0       0       0       0
  3562 ;;      Totals:         5       0       0       0       0       0       0       0       0
  3563 ;;Total ram usage:        5 bytes
  3564 ;; Hardware stack levels used:    1
  3565 ;; Hardware stack levels required when called:    3
  3566 ;; This function calls:
  3567 ;;		_delay_ms
  3568 ;;		_ReadBUF
  3569 ;;		_Write_I2C
  3570 ;;		_CloseI2C
  3571 ;; This function is called by:
  3572 ;;		_Get_data
  3573 ;; This function uses a non-reentrant model
  3574 ;;
  3575                           
  3576                           	psect	text15
  3577  00740C                     __ptext15:
  3578                           	opt stack 0
  3579  00740C                     _Write_time:
  3580                           	opt stack 26
  3581                           
  3582                           ;i2c_1.c: 81: SSPCON2bits.SEN=1;while(SSPCON2bits.SEN);
  3583                           
  3584                           ; BSR set to: 0
  3585                           ;incstack = 0
  3586                           ;incstack = 0
  3587  00740C  80C5               	bsf	4037,0,c	;volatile
  3588  00740E                     l327:
  3589  00740E  B0C5               	btfsc	4037,0,c	;volatile
  3590  007410  D7FE               	goto	l327
  3591                           
  3592                           ;i2c_1.c: 82: ReadBUF();
  3593  007412  ECBE  F036         	call	_ReadBUF	;wreg free
  3594                           
  3595                           ;i2c_1.c: 83: Write_I2C(0xD0);
  3596  007416  6E29               	movwf	??_Write_time& (0+255),c
  3597  007418  0ED0               	movlw	208
  3598  00741A  6E22               	movwf	?_Write_I2C,c
  3599  00741C  5029               	movf	??_Write_time& (0+255),w,c
  3600  00741E  ECD0  F036         	call	_Write_I2C	;wreg free
  3601                           
  3602                           ;i2c_1.c: 84: delay_ms(1);
  3603  007422  6E29               	movwf	??_Write_time& (0+255),c
  3604  007424  0E01               	movlw	1
  3605  007426  6E22               	movwf	?_delay_ms,c
  3606  007428  5029               	movf	??_Write_time& (0+255),w,c
  3607  00742A  EC1E  F037         	call	_delay_ms	;wreg free
  3608                           
  3609                           ;i2c_1.c: 85: Write_I2C(0x03);
  3610  00742E  6E29               	movwf	??_Write_time& (0+255),c
  3611  007430  0E03               	movlw	3
  3612  007432  6E22               	movwf	?_Write_I2C,c
  3613  007434  5029               	movf	??_Write_time& (0+255),w,c
  3614  007436  ECD0  F036         	call	_Write_I2C	;wreg free
  3615                           
  3616                           ;i2c_1.c: 86: delay_ms(1);
  3617  00743A  6E29               	movwf	??_Write_time& (0+255),c
  3618  00743C  0E01               	movlw	1
  3619  00743E  6E22               	movwf	?_delay_ms,c
  3620  007440  5029               	movf	??_Write_time& (0+255),w,c
  3621  007442  EC1E  F037         	call	_delay_ms	;wreg free
  3622                           
  3623                           ;i2c_1.c: 87: Write_I2C(day);
  3624  007446  C025  F022         	movff	Write_time@day,?_Write_I2C
  3625  00744A  ECD0  F036         	call	_Write_I2C	;wreg free
  3626                           
  3627                           ;i2c_1.c: 88: delay_ms(1);
  3628  00744E  6E29               	movwf	??_Write_time& (0+255),c
  3629  007450  0E01               	movlw	1
  3630  007452  6E22               	movwf	?_delay_ms,c
  3631  007454  5029               	movf	??_Write_time& (0+255),w,c
  3632  007456  EC1E  F037         	call	_delay_ms	;wreg free
  3633                           
  3634                           ;i2c_1.c: 89: Write_I2C(date);
  3635  00745A  C026  F022         	movff	Write_time@date,?_Write_I2C
  3636  00745E  ECD0  F036         	call	_Write_I2C	;wreg free
  3637                           
  3638                           ;i2c_1.c: 90: delay_ms(1);
  3639  007462  6E29               	movwf	??_Write_time& (0+255),c
  3640  007464  0E01               	movlw	1
  3641  007466  6E22               	movwf	?_delay_ms,c
  3642  007468  5029               	movf	??_Write_time& (0+255),w,c
  3643  00746A  EC1E  F037         	call	_delay_ms	;wreg free
  3644                           
  3645                           ;i2c_1.c: 91: Write_I2C(month);
  3646  00746E  C027  F022         	movff	Write_time@month,?_Write_I2C
  3647  007472  ECD0  F036         	call	_Write_I2C	;wreg free
  3648                           
  3649                           ;i2c_1.c: 92: delay_ms(1);
  3650  007476  6E29               	movwf	??_Write_time& (0+255),c
  3651  007478  0E01               	movlw	1
  3652  00747A  6E22               	movwf	?_delay_ms,c
  3653  00747C  5029               	movf	??_Write_time& (0+255),w,c
  3654  00747E  EC1E  F037         	call	_delay_ms	;wreg free
  3655                           
  3656                           ;i2c_1.c: 93: Write_I2C(year);
  3657  007482  C028  F022         	movff	Write_time@year,?_Write_I2C
  3658  007486  ECD0  F036         	call	_Write_I2C	;wreg free
  3659                           
  3660                           ;i2c_1.c: 94: delay_ms(1);
  3661  00748A  6E29               	movwf	??_Write_time& (0+255),c
  3662  00748C  0E01               	movlw	1
  3663  00748E  6E22               	movwf	?_delay_ms,c
  3664  007490  5029               	movf	??_Write_time& (0+255),w,c
  3665  007492  EC1E  F037         	call	_delay_ms	;wreg free
  3666                           
  3667                           ;i2c_1.c: 95: SSPCON2bits.PEN=1;while(SSPCON2bits.PEN);
  3668  007496  84C5               	bsf	4037,2,c	;volatile
  3669  007498                     l330:
  3670  007498  B4C5               	btfsc	4037,2,c	;volatile
  3671  00749A  D7FE               	goto	l330
  3672                           
  3673                           ;i2c_1.c: 96: CloseI2C();
  3674  00749C  ECBC  F036         	call	_CloseI2C	;wreg free
  3675                           
  3676                           ;i2c_1.c: 97: delay_ms(100);
  3677  0074A0  6E29               	movwf	??_Write_time& (0+255),c
  3678  0074A2  0E64               	movlw	100
  3679  0074A4  6E22               	movwf	?_delay_ms,c
  3680  0074A6  5029               	movf	??_Write_time& (0+255),w,c
  3681  0074A8  EC1E  F037         	call	_delay_ms	;wreg free
  3682  0074AC  0012               	return	
  3683  0074AE                     __end_of_Write_time:
  3684                           	opt stack 0
  3685                           tblptru	equ	0xFF8
  3686                           tblptrh	equ	0xFF7
  3687                           tblptrl	equ	0xFF6
  3688                           tablat	equ	0xFF5
  3689                           postinc0	equ	0xFEE
  3690                           wreg	equ	0xFE8
  3691                           indf1	equ	0xFE7
  3692                           postinc1	equ	0xFE6
  3693                           postdec1	equ	0xFE5
  3694                           fsr1h	equ	0xFE2
  3695                           fsr1l	equ	0xFE1
  3696                           indf2	equ	0xFDF
  3697                           postinc2	equ	0xFDE
  3698                           fsr2h	equ	0xFDA
  3699                           fsr2l	equ	0xFD9
  3700                           status	equ	0xFD8
  3701                           
  3702 ;; *************** function _CloseI2C *****************
  3703 ;; Defined at:
  3704 ;;		line 20 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\i2c\i2c_clos.c"
  3705 ;; Parameters:    Size  Location     Type
  3706 ;;		None
  3707 ;; Auto vars:     Size  Location     Type
  3708 ;;		None
  3709 ;; Return value:  Size  Location     Type
  3710 ;;		None               void
  3711 ;; Registers used:
  3712 ;;		status,2, status,0
  3713 ;; Tracked objects:
  3714 ;;		On entry : 0/0
  3715 ;;		On exit  : 0/0
  3716 ;;		Unchanged: 0/0
  3717 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3718 ;;      Params:         0       0       0       0       0       0       0       0       0
  3719 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3720 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3721 ;;      Totals:         0       0       0       0       0       0       0       0       0
  3722 ;;Total ram usage:        0 bytes
  3723 ;; Hardware stack levels used:    1
  3724 ;; This function calls:
  3725 ;;		Nothing
  3726 ;; This function is called by:
  3727 ;;		_Write_time
  3728 ;;		_Read_time
  3729 ;; This function uses a non-reentrant model
  3730 ;;
  3731                           
  3732                           	psect	text16
  3733  006D78                     __ptext16:
  3734                           	opt stack 0
  3735  006D78                     _CloseI2C:
  3736                           	opt stack 29
  3737                           
  3738                           ;incstack = 0
  3739                           ;incstack = 0
  3740  006D78  9AC6               	bcf	4038,5,c	;volatile
  3741  006D7A  0012               	return	
  3742  006D7C                     __end_of_CloseI2C:
  3743                           	opt stack 0
  3744                           tblptru	equ	0xFF8
  3745                           tblptrh	equ	0xFF7
  3746                           tblptrl	equ	0xFF6
  3747                           tablat	equ	0xFF5
  3748                           postinc0	equ	0xFEE
  3749                           wreg	equ	0xFE8
  3750                           indf1	equ	0xFE7
  3751                           postinc1	equ	0xFE6
  3752                           postdec1	equ	0xFE5
  3753                           fsr1h	equ	0xFE2
  3754                           fsr1l	equ	0xFE1
  3755                           indf2	equ	0xFDF
  3756                           postinc2	equ	0xFDE
  3757                           fsr2h	equ	0xFDA
  3758                           fsr2l	equ	0xFD9
  3759                           status	equ	0xFD8
  3760                           
  3761 ;; *************** function _Write_time_ *****************
  3762 ;; Defined at:
  3763 ;;		line 58 in file "i2c_1.c"
  3764 ;; Parameters:    Size  Location     Type
  3765 ;;  s               1   36[COMRAM] unsigned char 
  3766 ;;  m               1   37[COMRAM] unsigned char 
  3767 ;;  h               1   38[COMRAM] unsigned char 
  3768 ;; Auto vars:     Size  Location     Type
  3769 ;;		None
  3770 ;; Return value:  Size  Location     Type
  3771 ;;		None               void
  3772 ;; Registers used:
  3773 ;;		wreg, status,2, status,0, cstack
  3774 ;; Tracked objects:
  3775 ;;		On entry : 0/0
  3776 ;;		On exit  : 0/0
  3777 ;;		Unchanged: 0/0
  3778 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3779 ;;      Params:         3       0       0       0       0       0       0       0       0
  3780 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3781 ;;      Temps:          2       0       0       0       0       0       0       0       0
  3782 ;;      Totals:         5       0       0       0       0       0       0       0       0
  3783 ;;Total ram usage:        5 bytes
  3784 ;; Hardware stack levels used:    1
  3785 ;; Hardware stack levels required when called:    3
  3786 ;; This function calls:
  3787 ;;		_delay_ms
  3788 ;;		_ReadBUF
  3789 ;;		_Write_I2C
  3790 ;;		_OpenI2C
  3791 ;; This function is called by:
  3792 ;;		_Get_data
  3793 ;; This function uses a non-reentrant model
  3794 ;;
  3795                           
  3796                           	psect	text17
  3797  00736E                     __ptext17:
  3798                           	opt stack 0
  3799  00736E                     _Write_time_:
  3800                           	opt stack 26
  3801                           
  3802                           ;i2c_1.c: 59: OpenI2C(0b00001000, 0b10000000);
  3803                           
  3804                           ;incstack = 0
  3805                           ;incstack = 0
  3806  00736E  6E28               	movwf	??_Write_time_& (0+255),c
  3807  007370  0E08               	movlw	8
  3808  007372  6E01               	movwf	?_OpenI2C,c
  3809  007374  5028               	movf	??_Write_time_& (0+255),w,c
  3810  007376  6E29               	movwf	(??_Write_time_+1)& (0+255),c
  3811  007378  0E80               	movlw	128
  3812  00737A  6E02               	movwf	?_OpenI2C+1,c
  3813  00737C  5029               	movf	(??_Write_time_+1)& (0+255),w,c
  3814  00737E  EC10  F037         	call	_OpenI2C	;wreg free
  3815                           
  3816                           ;i2c_1.c: 60: delay_ms(1);
  3817  007382  6E28               	movwf	??_Write_time_& (0+255),c
  3818  007384  0E01               	movlw	1
  3819  007386  6E22               	movwf	?_delay_ms,c
  3820  007388  5028               	movf	??_Write_time_& (0+255),w,c
  3821  00738A  EC1E  F037         	call	_delay_ms	;wreg free
  3822                           
  3823                           ;i2c_1.c: 61: SSPCON2bits.SEN=1;while(SSPCON2bits.SEN);
  3824  00738E  80C5               	bsf	4037,0,c	;volatile
  3825  007390                     l318:
  3826  007390  B0C5               	btfsc	4037,0,c	;volatile
  3827  007392  D7FE               	goto	l318
  3828                           
  3829                           ;i2c_1.c: 62: ReadBUF();
  3830  007394  ECBE  F036         	call	_ReadBUF	;wreg free
  3831                           
  3832                           ;i2c_1.c: 63: Write_I2C(0xD0);
  3833  007398  6E28               	movwf	??_Write_time_& (0+255),c
  3834  00739A  0ED0               	movlw	208
  3835  00739C  6E22               	movwf	?_Write_I2C,c
  3836  00739E  5028               	movf	??_Write_time_& (0+255),w,c
  3837  0073A0  ECD0  F036         	call	_Write_I2C	;wreg free
  3838                           
  3839                           ;i2c_1.c: 64: delay_ms(1);
  3840  0073A4  6E28               	movwf	??_Write_time_& (0+255),c
  3841  0073A6  0E01               	movlw	1
  3842  0073A8  6E22               	movwf	?_delay_ms,c
  3843  0073AA  5028               	movf	??_Write_time_& (0+255),w,c
  3844  0073AC  EC1E  F037         	call	_delay_ms	;wreg free
  3845                           
  3846                           ;i2c_1.c: 65: Write_I2C(0x00);
  3847  0073B0  6E28               	movwf	??_Write_time_& (0+255),c
  3848  0073B2  0E00               	movlw	0
  3849  0073B4  6E22               	movwf	?_Write_I2C,c
  3850  0073B6  5028               	movf	??_Write_time_& (0+255),w,c
  3851  0073B8  ECD0  F036         	call	_Write_I2C	;wreg free
  3852                           
  3853                           ;i2c_1.c: 66: delay_ms(1);
  3854  0073BC  6E28               	movwf	??_Write_time_& (0+255),c
  3855  0073BE  0E01               	movlw	1
  3856  0073C0  6E22               	movwf	?_delay_ms,c
  3857  0073C2  5028               	movf	??_Write_time_& (0+255),w,c
  3858  0073C4  EC1E  F037         	call	_delay_ms	;wreg free
  3859                           
  3860                           ;i2c_1.c: 67: Write_I2C(s);
  3861  0073C8  C025  F022         	movff	Write_time_@s,?_Write_I2C
  3862  0073CC  ECD0  F036         	call	_Write_I2C	;wreg free
  3863                           
  3864                           ;i2c_1.c: 68: delay_ms(1);
  3865  0073D0  6E28               	movwf	??_Write_time_& (0+255),c
  3866  0073D2  0E01               	movlw	1
  3867  0073D4  6E22               	movwf	?_delay_ms,c
  3868  0073D6  5028               	movf	??_Write_time_& (0+255),w,c
  3869  0073D8  EC1E  F037         	call	_delay_ms	;wreg free
  3870                           
  3871                           ;i2c_1.c: 69: Write_I2C(m);
  3872  0073DC  C026  F022         	movff	Write_time_@m,?_Write_I2C
  3873  0073E0  ECD0  F036         	call	_Write_I2C	;wreg free
  3874                           
  3875                           ;i2c_1.c: 70: delay_ms(1);
  3876  0073E4  6E28               	movwf	??_Write_time_& (0+255),c
  3877  0073E6  0E01               	movlw	1
  3878  0073E8  6E22               	movwf	?_delay_ms,c
  3879  0073EA  5028               	movf	??_Write_time_& (0+255),w,c
  3880  0073EC  EC1E  F037         	call	_delay_ms	;wreg free
  3881                           
  3882                           ;i2c_1.c: 71: Write_I2C(h);
  3883  0073F0  C027  F022         	movff	Write_time_@h,?_Write_I2C
  3884  0073F4  ECD0  F036         	call	_Write_I2C	;wreg free
  3885                           
  3886                           ;i2c_1.c: 72: delay_ms(1);
  3887  0073F8  6E28               	movwf	??_Write_time_& (0+255),c
  3888  0073FA  0E01               	movlw	1
  3889  0073FC  6E22               	movwf	?_delay_ms,c
  3890  0073FE  5028               	movf	??_Write_time_& (0+255),w,c
  3891  007400  EC1E  F037         	call	_delay_ms	;wreg free
  3892                           
  3893                           ;i2c_1.c: 73: SSPCON2bits.PEN=1;while(SSPCON2bits.PEN);
  3894  007404  84C5               	bsf	4037,2,c	;volatile
  3895  007406                     l321:
  3896  007406  A4C5               	btfss	4037,2,c	;volatile
  3897  007408  0012               	return	
  3898  00740A  D7FD               	goto	l321
  3899  00740C                     __end_of_Write_time_:
  3900                           	opt stack 0
  3901                           tblptru	equ	0xFF8
  3902                           tblptrh	equ	0xFF7
  3903                           tblptrl	equ	0xFF6
  3904                           tablat	equ	0xFF5
  3905                           postinc0	equ	0xFEE
  3906                           wreg	equ	0xFE8
  3907                           indf1	equ	0xFE7
  3908                           postinc1	equ	0xFE6
  3909                           postdec1	equ	0xFE5
  3910                           fsr1h	equ	0xFE2
  3911                           fsr1l	equ	0xFE1
  3912                           indf2	equ	0xFDF
  3913                           postinc2	equ	0xFDE
  3914                           fsr2h	equ	0xFDA
  3915                           fsr2l	equ	0xFD9
  3916                           status	equ	0xFD8
  3917                           
  3918 ;; *************** function _OpenI2C *****************
  3919 ;; Defined at:
  3920 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\i2c\i2c_open.c"
  3921 ;; Parameters:    Size  Location     Type
  3922 ;;  sync_mode       1    0[COMRAM] unsigned char 
  3923 ;;  slew            1    1[COMRAM] unsigned char 
  3924 ;; Auto vars:     Size  Location     Type
  3925 ;;		None
  3926 ;; Return value:  Size  Location     Type
  3927 ;;		None               void
  3928 ;; Registers used:
  3929 ;;		wreg, status,2, status,0
  3930 ;; Tracked objects:
  3931 ;;		On entry : 0/0
  3932 ;;		On exit  : 0/0
  3933 ;;		Unchanged: 0/0
  3934 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3935 ;;      Params:         2       0       0       0       0       0       0       0       0
  3936 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3937 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3938 ;;      Totals:         2       0       0       0       0       0       0       0       0
  3939 ;;Total ram usage:        2 bytes
  3940 ;; Hardware stack levels used:    1
  3941 ;; This function calls:
  3942 ;;		Nothing
  3943 ;; This function is called by:
  3944 ;;		_Write_time_
  3945 ;;		_Read_time
  3946 ;; This function uses a non-reentrant model
  3947 ;;
  3948                           
  3949                           	psect	text18
  3950  006E20                     __ptext18:
  3951                           	opt stack 0
  3952  006E20                     _OpenI2C:
  3953                           	opt stack 29
  3954                           
  3955                           ;incstack = 0
  3956                           ;incstack = 0
  3957  006E20  0E3F               	movlw	63
  3958  006E22  16C7               	andwf	4039,f,c	;volatile
  3959  006E24  0E00               	movlw	0
  3960  006E26  6EC6               	movwf	4038,c	;volatile
  3961  006E28  0E00               	movlw	0
  3962  006E2A  6EC5               	movwf	4037,c	;volatile
  3963  006E2C  5001               	movf	OpenI2C@sync_mode,w,c
  3964  006E2E  12C6               	iorwf	4038,f,c	;volatile
  3965  006E30  5002               	movf	OpenI2C@slew,w,c
  3966  006E32  12C7               	iorwf	4039,f,c	;volatile
  3967  006E34  8293               	bsf	3987,1,c	;volatile
  3968  006E36  8093               	bsf	3987,0,c	;volatile
  3969  006E38  8AC6               	bsf	4038,5,c	;volatile
  3970  006E3A  0012               	return	
  3971  006E3C                     __end_of_OpenI2C:
  3972                           	opt stack 0
  3973                           tblptru	equ	0xFF8
  3974                           tblptrh	equ	0xFF7
  3975                           tblptrl	equ	0xFF6
  3976                           tablat	equ	0xFF5
  3977                           postinc0	equ	0xFEE
  3978                           wreg	equ	0xFE8
  3979                           indf1	equ	0xFE7
  3980                           postinc1	equ	0xFE6
  3981                           postdec1	equ	0xFE5
  3982                           fsr1h	equ	0xFE2
  3983                           fsr1l	equ	0xFE1
  3984                           indf2	equ	0xFDF
  3985                           postinc2	equ	0xFDE
  3986                           fsr2h	equ	0xFDA
  3987                           fsr2l	equ	0xFD9
  3988                           status	equ	0xFD8
  3989                           
  3990 ;; *************** function _Write_I2C *****************
  3991 ;; Defined at:
  3992 ;;		line 39 in file "i2c_1.c"
  3993 ;; Parameters:    Size  Location     Type
  3994 ;;  c               1   33[COMRAM] unsigned char 
  3995 ;; Auto vars:     Size  Location     Type
  3996 ;;		None
  3997 ;; Return value:  Size  Location     Type
  3998 ;;		None               void
  3999 ;; Registers used:
  4000 ;;		wreg, status,2, status,0, cstack
  4001 ;; Tracked objects:
  4002 ;;		On entry : 0/0
  4003 ;;		On exit  : 0/0
  4004 ;;		Unchanged: 0/0
  4005 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4006 ;;      Params:         1       0       0       0       0       0       0       0       0
  4007 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4008 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4009 ;;      Totals:         1       0       0       0       0       0       0       0       0
  4010 ;;Total ram usage:        1 bytes
  4011 ;; Hardware stack levels used:    1
  4012 ;; Hardware stack levels required when called:    2
  4013 ;; This function calls:
  4014 ;;		_ReadBUF
  4015 ;;		_WriteI2C
  4016 ;; This function is called by:
  4017 ;;		_Read
  4018 ;;		_Write_time_
  4019 ;;		_Write_time
  4020 ;;		_Read_time
  4021 ;;		_Read_From_Addr
  4022 ;;		_Write_to_Addr
  4023 ;; This function uses a non-reentrant model
  4024 ;;
  4025                           
  4026                           	psect	text19
  4027  006DA0                     __ptext19:
  4028                           	opt stack 0
  4029  006DA0                     _Write_I2C:
  4030                           	opt stack 27
  4031                           
  4032                           ;i2c_1.c: 40: WriteI2C(c);
  4033                           
  4034                           ;incstack = 0
  4035                           ;incstack = 0
  4036  006DA0  C022  F001         	movff	Write_I2C@c,?_WriteI2C
  4037  006DA4  ECEA  F037         	call	_WriteI2C	;wreg free
  4038                           
  4039                           ;i2c_1.c: 41: ReadBUF();
  4040  006DA8  ECBE  F036         	call	_ReadBUF	;wreg free
  4041  006DAC  0012               	return	
  4042  006DAE                     __end_of_Write_I2C:
  4043                           	opt stack 0
  4044                           tblptru	equ	0xFF8
  4045                           tblptrh	equ	0xFF7
  4046                           tblptrl	equ	0xFF6
  4047                           tablat	equ	0xFF5
  4048                           postinc0	equ	0xFEE
  4049                           wreg	equ	0xFE8
  4050                           indf1	equ	0xFE7
  4051                           postinc1	equ	0xFE6
  4052                           postdec1	equ	0xFE5
  4053                           fsr1h	equ	0xFE2
  4054                           fsr1l	equ	0xFE1
  4055                           indf2	equ	0xFDF
  4056                           postinc2	equ	0xFDE
  4057                           fsr2h	equ	0xFDA
  4058                           fsr2l	equ	0xFD9
  4059                           status	equ	0xFD8
  4060                           
  4061 ;; *************** function _ReadBUF *****************
  4062 ;; Defined at:
  4063 ;;		line 29 in file "i2c_1.c"
  4064 ;; Parameters:    Size  Location     Type
  4065 ;;		None
  4066 ;; Auto vars:     Size  Location     Type
  4067 ;;  c               1    0[COMRAM] unsigned char 
  4068 ;; Return value:  Size  Location     Type
  4069 ;;		None               void
  4070 ;; Registers used:
  4071 ;;		None
  4072 ;; Tracked objects:
  4073 ;;		On entry : 0/0
  4074 ;;		On exit  : 0/0
  4075 ;;		Unchanged: 0/0
  4076 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4077 ;;      Params:         0       0       0       0       0       0       0       0       0
  4078 ;;      Locals:         1       0       0       0       0       0       0       0       0
  4079 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4080 ;;      Totals:         1       0       0       0       0       0       0       0       0
  4081 ;;Total ram usage:        1 bytes
  4082 ;; Hardware stack levels used:    1
  4083 ;; This function calls:
  4084 ;;		Nothing
  4085 ;; This function is called by:
  4086 ;;		_Write_I2C
  4087 ;;		_Read
  4088 ;;		_Write_time_
  4089 ;;		_Write_time
  4090 ;;		_Read_From_Addr
  4091 ;;		_Write_to_Addr
  4092 ;; This function uses a non-reentrant model
  4093 ;;
  4094                           
  4095                           	psect	text20
  4096  006D7C                     __ptext20:
  4097                           	opt stack 0
  4098  006D7C                     _ReadBUF:
  4099                           	opt stack 28
  4100                           
  4101                           ;i2c_1.c: 30: unsigned char c;
  4102                           ;i2c_1.c: 31: c = SSPBUF;
  4103                           
  4104                           ;incstack = 0
  4105                           ;incstack = 0
  4106  006D7C  CFC9 F001          	movff	4041,ReadBUF@c	;volatile
  4107                           
  4108                           ;i2c_1.c: 32: c = SSPBUF;
  4109  006D80  CFC9 F001          	movff	4041,ReadBUF@c	;volatile
  4110  006D84  0012               	return	
  4111  006D86                     __end_of_ReadBUF:
  4112                           	opt stack 0
  4113                           tblptru	equ	0xFF8
  4114                           tblptrh	equ	0xFF7
  4115                           tblptrl	equ	0xFF6
  4116                           tablat	equ	0xFF5
  4117                           postinc0	equ	0xFEE
  4118                           wreg	equ	0xFE8
  4119                           indf1	equ	0xFE7
  4120                           postinc1	equ	0xFE6
  4121                           postdec1	equ	0xFE5
  4122                           fsr1h	equ	0xFE2
  4123                           fsr1l	equ	0xFE1
  4124                           indf2	equ	0xFDF
  4125                           postinc2	equ	0xFDE
  4126                           fsr2h	equ	0xFDA
  4127                           fsr2l	equ	0xFD9
  4128                           status	equ	0xFD8
  4129                           
  4130 ;; *************** function _delay_ms *****************
  4131 ;; Defined at:
  4132 ;;		line 18 in file "delay.c"
  4133 ;; Parameters:    Size  Location     Type
  4134 ;;  t               1   33[COMRAM] unsigned char 
  4135 ;; Auto vars:     Size  Location     Type
  4136 ;;  i               1   35[COMRAM] unsigned char 
  4137 ;; Return value:  Size  Location     Type
  4138 ;;		None               void
  4139 ;; Registers used:
  4140 ;;		wreg, status,2, status,0, cstack
  4141 ;; Tracked objects:
  4142 ;;		On entry : 0/0
  4143 ;;		On exit  : 0/0
  4144 ;;		Unchanged: 0/0
  4145 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4146 ;;      Params:         1       0       0       0       0       0       0       0       0
  4147 ;;      Locals:         1       0       0       0       0       0       0       0       0
  4148 ;;      Temps:          1       0       0       0       0       0       0       0       0
  4149 ;;      Totals:         3       0       0       0       0       0       0       0       0
  4150 ;;Total ram usage:        3 bytes
  4151 ;; Hardware stack levels used:    1
  4152 ;; Hardware stack levels required when called:    1
  4153 ;; This function calls:
  4154 ;;		_Delay1KTCYx
  4155 ;; This function is called by:
  4156 ;;		_main
  4157 ;;		_Read
  4158 ;;		_Write_time_
  4159 ;;		_Write_time
  4160 ;;		_Read_time
  4161 ;;		_Delay_s
  4162 ;;		_Read_From_Addr
  4163 ;;		_Write_to_Addr
  4164 ;; This function uses a non-reentrant model
  4165 ;;
  4166                           
  4167                           	psect	text21
  4168  006E3C                     __ptext21:
  4169                           	opt stack 0
  4170  006E3C                     _delay_ms:
  4171                           	opt stack 26
  4172                           
  4173                           ;delay.c: 19: unsigned char i;
  4174                           ;delay.c: 20: for (i=0;i<=t;i++)
  4175                           
  4176                           ;incstack = 0
  4177                           ;incstack = 0
  4178  006E3C  6E23               	movwf	??_delay_ms& (0+255),c
  4179  006E3E  0E00               	movlw	0
  4180  006E40  6E24               	movwf	delay_ms@i,c
  4181  006E42  5023               	movf	??_delay_ms& (0+255),w,c
  4182  006E44  D007               	goto	l2229
  4183  006E46                     l2225:
  4184                           
  4185                           ;delay.c: 21: Delay1KTCYx(5);
  4186  006E46  6E23               	movwf	??_delay_ms& (0+255),c
  4187  006E48  0E05               	movlw	5
  4188  006E4A  6E01               	movwf	?_Delay1KTCYx,c
  4189  006E4C  5023               	movf	??_delay_ms& (0+255),w,c
  4190  006E4E  ECD7  F036         	call	_Delay1KTCYx	;wreg free
  4191  006E52  2A24               	incf	delay_ms@i,f,c
  4192  006E54                     l2229:
  4193  006E54  5024               	movf	delay_ms@i,w,c
  4194  006E56  6022               	cpfslt	delay_ms@t,c
  4195  006E58  D7F6               	goto	l2225
  4196                           
  4197                           ;delay.c: 25: return;
  4198  006E5A  0012               	return	
  4199  006E5C                     __end_of_delay_ms:
  4200                           	opt stack 0
  4201                           tblptru	equ	0xFF8
  4202                           tblptrh	equ	0xFF7
  4203                           tblptrl	equ	0xFF6
  4204                           tablat	equ	0xFF5
  4205                           postinc0	equ	0xFEE
  4206                           wreg	equ	0xFE8
  4207                           indf1	equ	0xFE7
  4208                           postinc1	equ	0xFE6
  4209                           postdec1	equ	0xFE5
  4210                           fsr1h	equ	0xFE2
  4211                           fsr1l	equ	0xFE1
  4212                           indf2	equ	0xFDF
  4213                           postinc2	equ	0xFDE
  4214                           fsr2h	equ	0xFDA
  4215                           fsr2l	equ	0xFD9
  4216                           status	equ	0xFD8
  4217                           
  4218 ;; *************** function _strcmp *****************
  4219 ;; Defined at:
  4220 ;;		line 34 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\strcmp.c"
  4221 ;; Parameters:    Size  Location     Type
  4222 ;;  s1              2    0[COMRAM] PTR const unsigned char 
  4223 ;;		 -> str(11), 
  4224 ;;  s2              2    2[COMRAM] PTR const unsigned char 
  4225 ;;		 -> Get_data@s_6(3), Get_data@s_5(3), Get_data@s_4(3), Get_data@s_3(3), 
  4226 ;;		 -> Get_data@s_2(3), Get_data@s_1(3), 
  4227 ;; Auto vars:     Size  Location     Type
  4228 ;;  r               1    5[COMRAM] char 
  4229 ;; Return value:  Size  Location     Type
  4230 ;;                  2    0[COMRAM] int 
  4231 ;; Registers used:
  4232 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  4233 ;; Tracked objects:
  4234 ;;		On entry : 0/0
  4235 ;;		On exit  : 0/0
  4236 ;;		Unchanged: 0/0
  4237 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4238 ;;      Params:         4       0       0       0       0       0       0       0       0
  4239 ;;      Locals:         1       0       0       0       0       0       0       0       0
  4240 ;;      Temps:          1       0       0       0       0       0       0       0       0
  4241 ;;      Totals:         6       0       0       0       0       0       0       0       0
  4242 ;;Total ram usage:        6 bytes
  4243 ;; Hardware stack levels used:    1
  4244 ;; This function calls:
  4245 ;;		Nothing
  4246 ;; This function is called by:
  4247 ;;		_Get_data
  4248 ;; This function uses a non-reentrant model
  4249 ;;
  4250                           
  4251                           	psect	text22
  4252  006F90                     __ptext22:
  4253                           	opt stack 0
  4254  006F90                     _strcmp:
  4255                           	opt stack 29
  4256                           
  4257                           ;incstack = 0
  4258                           ;incstack = 0
  4259  006F90  D004               	goto	l2073
  4260  006F92                     l2071:
  4261  006F92  4A01               	infsnz	strcmp@s1,f,c
  4262  006F94  2A02               	incf	strcmp@s1+1,f,c
  4263  006F96  4A03               	infsnz	strcmp@s2,f,c
  4264  006F98  2A04               	incf	strcmp@s2+1,f,c
  4265  006F9A                     l2073:
  4266  006F9A  C001  FFD9         	movff	strcmp@s1,fsr2l
  4267  006F9E  C002  FFDA         	movff	strcmp@s1+1,fsr2h
  4268  006FA2  50DF               	movf	indf2,w,c
  4269  006FA4  6E05               	movwf	??_strcmp& (0+255),c
  4270  006FA6  C003  FFD9         	movff	strcmp@s2,fsr2l
  4271  006FAA  C004  FFDA         	movff	strcmp@s2+1,fsr2h
  4272  006FAE  50DF               	movf	indf2,w,c
  4273  006FB0  0800               	sublw	0
  4274  006FB2  2405               	addwf	??_strcmp,w,c
  4275  006FB4  6E06               	movwf	strcmp@r,c
  4276  006FB6  6606               	tstfsz	strcmp@r& (0+255),c
  4277  006FB8  D007               	goto	l2077
  4278  006FBA  C001  FFD9         	movff	strcmp@s1,fsr2l
  4279  006FBE  C002  FFDA         	movff	strcmp@s1+1,fsr2h
  4280  006FC2  50DF               	movf	indf2,w,c
  4281  006FC4  A4D8               	btfss	status,2,c
  4282  006FC6  D7E5               	goto	l2071
  4283  006FC8                     l2077:
  4284  006FC8  5006               	movf	strcmp@r,w,c
  4285  006FCA  6E01               	movwf	?_strcmp,c
  4286  006FCC  6A02               	clrf	?_strcmp+1,c
  4287  006FCE  BE01               	btfsc	?_strcmp,7,c
  4288  006FD0  0602               	decf	?_strcmp+1,f,c
  4289  006FD2  0012               	return	
  4290  006FD4                     __end_of_strcmp:
  4291                           	opt stack 0
  4292                           tblptru	equ	0xFF8
  4293                           tblptrh	equ	0xFF7
  4294                           tblptrl	equ	0xFF6
  4295                           tablat	equ	0xFF5
  4296                           postinc0	equ	0xFEE
  4297                           wreg	equ	0xFE8
  4298                           indf1	equ	0xFE7
  4299                           postinc1	equ	0xFE6
  4300                           postdec1	equ	0xFE5
  4301                           fsr1h	equ	0xFE2
  4302                           fsr1l	equ	0xFE1
  4303                           indf2	equ	0xFDF
  4304                           postinc2	equ	0xFDE
  4305                           fsr2h	equ	0xFDA
  4306                           fsr2l	equ	0xFD9
  4307                           status	equ	0xFD8
  4308                           
  4309 ;; *************** function _Set_date *****************
  4310 ;; Defined at:
  4311 ;;		line 142 in file "time.c"
  4312 ;; Parameters:    Size  Location     Type
  4313 ;;  date            2    8[COMRAM] PTR unsigned char 
  4314 ;;		 -> Get_data@date(1), 
  4315 ;;  month           2   10[COMRAM] PTR unsigned char 
  4316 ;;		 -> Get_data@month(1), 
  4317 ;;  year            2   12[COMRAM] PTR unsigned char 
  4318 ;;		 -> Get_data@year(1), 
  4319 ;; Auto vars:     Size  Location     Type
  4320 ;;  str6           30   15[COMRAM] unsigned char [30]
  4321 ;;  error          18   45[COMRAM] unsigned char [18]
  4322 ;;  z               1   65[COMRAM] unsigned char 
  4323 ;;  y               1   64[COMRAM] unsigned char 
  4324 ;;  x               1   63[COMRAM] unsigned char 
  4325 ;; Return value:  Size  Location     Type
  4326 ;;		None               void
  4327 ;; Registers used:
  4328 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4329 ;; Tracked objects:
  4330 ;;		On entry : 0/0
  4331 ;;		On exit  : 0/0
  4332 ;;		Unchanged: 0/0
  4333 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4334 ;;      Params:         6       0       0       0       0       0       0       0       0
  4335 ;;      Locals:        51       0       0       0       0       0       0       0       0
  4336 ;;      Temps:          1       0       0       0       0       0       0       0       0
  4337 ;;      Totals:        58       0       0       0       0       0       0       0       0
  4338 ;;Total ram usage:       58 bytes
  4339 ;; Hardware stack levels used:    1
  4340 ;; Hardware stack levels required when called:    3
  4341 ;; This function calls:
  4342 ;;		_Write_str
  4343 ;;		_BCD_format
  4344 ;;		_BCD_to_DEC
  4345 ;;		_Read_string
  4346 ;; This function is called by:
  4347 ;;		_Get_data
  4348 ;; This function uses a non-reentrant model
  4349 ;;
  4350                           
  4351                           	psect	text23
  4352  007924                     __ptext23:
  4353                           	opt stack 0
  4354  007924                     _Set_date:
  4355                           	opt stack 26
  4356                           
  4357                           ;time.c: 143: unsigned char x, y, z;
  4358                           ;time.c: 144: unsigned char str6[30] = "\nEnter DATE/MONTH/YEAR\tDDMMYY", error[] = "\nI
      +                          nvalid Entry..!";
  4359                           
  4360                           ;incstack = 0
  4361                           ;incstack = 0
  4362  007924  EE21  F023         	lfsr	2,Set_date@F214
  4363  007928  EE10  F010         	lfsr	1,Set_date@str6
  4364  00792C  0E1E               	movlw	30
  4365  00792E                     u2131:
  4366  00792E  CFDE FFE6          	movff	postinc2,postinc1
  4367  007932  2EE8               	decfsz	wreg,f,c
  4368  007934  D7FC               	goto	u2131
  4369  007936  EE21  F083         	lfsr	2,Set_date@F216
  4370  00793A  EE10  F02E         	lfsr	1,Set_date@error
  4371  00793E  0E12               	movlw	18
  4372  007940                     u2141:
  4373  007940  CFDE FFE6          	movff	postinc2,postinc1
  4374  007944  2EE8               	decfsz	wreg,f,c
  4375  007946  D7FC               	goto	u2141
  4376  007948                     l2439:
  4377                           
  4378                           ;time.c: 146: {
  4379                           ;time.c: 147: Write_str(str6);
  4380  007948  0E00               	movlw	high Set_date@str6
  4381  00794A  6E04               	movwf	?_Write_str+1,c
  4382  00794C  0E10               	movlw	low Set_date@str6
  4383  00794E  6E03               	movwf	?_Write_str,c
  4384  007950  EC91  F037         	call	_Write_str	;wreg free
  4385                           
  4386                           ;time.c: 148: Read_string(str, 6);
  4387  007954  0100               	movlb	0	; () banked
  4388  007956  0E00               	movlw	high _str
  4389  007958  6E04               	movwf	?_Read_string+1,c
  4390  00795A  0100               	movlb	0	; () banked
  4391  00795C  0EF3               	movlw	low _str
  4392  00795E  6E03               	movwf	?_Read_string,c
  4393  007960  6E0F               	movwf	??_Set_date& (0+255),c
  4394  007962  0E06               	movlw	6
  4395  007964  6E05               	movwf	?_Read_string+2,c
  4396  007966  500F               	movf	??_Set_date& (0+255),w,c
  4397  007968  ECA7  F038         	call	_Read_string	;wreg free
  4398                           
  4399                           ;time.c: 149: *date = BCD_format(str);
  4400  00796C  0100               	movlb	0	; () banked
  4401  00796E  0E00               	movlw	high _str
  4402  007970  6E02               	movwf	?_BCD_format+1,c
  4403  007972  0100               	movlb	0	; () banked
  4404  007974  0EF3               	movlw	low _str
  4405  007976  6E01               	movwf	?_BCD_format,c
  4406  007978  EC3E  F037         	call	_BCD_format	;wreg free
  4407  00797C  C009  FFD9         	movff	Set_date@date,fsr2l
  4408  007980  C00A  FFDA         	movff	Set_date@date+1,fsr2h
  4409  007984  6EDF               	movwf	indf2,c
  4410                           
  4411                           ;time.c: 150: *month = BCD_format(str+2);
  4412  007986  0100               	movlb	0	; () banked
  4413  007988  0E00               	movlw	high (_str+2)
  4414  00798A  6E02               	movwf	?_BCD_format+1,c
  4415  00798C  0100               	movlb	0	; () banked
  4416  00798E  0EF5               	movlw	low (_str+2)
  4417  007990  6E01               	movwf	?_BCD_format,c
  4418  007992  EC3E  F037         	call	_BCD_format	;wreg free
  4419  007996  C00B  FFD9         	movff	Set_date@month,fsr2l
  4420  00799A  C00C  FFDA         	movff	Set_date@month+1,fsr2h
  4421  00799E  6EDF               	movwf	indf2,c
  4422                           
  4423                           ;time.c: 151: *year = BCD_format(str+4);
  4424  0079A0  0100               	movlb	0	; () banked
  4425  0079A2  0E00               	movlw	high (_str+4)
  4426  0079A4  6E02               	movwf	?_BCD_format+1,c
  4427  0079A6  0100               	movlb	0	; () banked
  4428  0079A8  0EF7               	movlw	low (_str+4)
  4429  0079AA  6E01               	movwf	?_BCD_format,c
  4430  0079AC  EC3E  F037         	call	_BCD_format	;wreg free
  4431  0079B0  C00D  FFD9         	movff	Set_date@year,fsr2l
  4432  0079B4  C00E  FFDA         	movff	Set_date@year+1,fsr2h
  4433  0079B8  6EDF               	movwf	indf2,c
  4434                           
  4435                           ;time.c: 152: x = BCD_to_DEC(*date);
  4436  0079BA  C009  FFD9         	movff	Set_date@date,fsr2l
  4437  0079BE  C00A  FFDA         	movff	Set_date@date+1,fsr2h
  4438  0079C2  50DF               	movf	indf2,w,c
  4439  0079C4  6E01               	movwf	?_BCD_to_DEC,c
  4440  0079C6  ECF7  F036         	call	_BCD_to_DEC	;wreg free
  4441  0079CA  6E40               	movwf	Set_date@x,c
  4442                           
  4443                           ;time.c: 153: y = BCD_to_DEC(*month);
  4444  0079CC  C00B  FFD9         	movff	Set_date@month,fsr2l
  4445  0079D0  C00C  FFDA         	movff	Set_date@month+1,fsr2h
  4446  0079D4  50DF               	movf	indf2,w,c
  4447  0079D6  6E01               	movwf	?_BCD_to_DEC,c
  4448  0079D8  ECF7  F036         	call	_BCD_to_DEC	;wreg free
  4449  0079DC  6E41               	movwf	Set_date@y,c
  4450                           
  4451                           ;time.c: 154: z = BCD_to_DEC(*year);
  4452  0079DE  C00D  FFD9         	movff	Set_date@year,fsr2l
  4453  0079E2  C00E  FFDA         	movff	Set_date@year+1,fsr2h
  4454  0079E6  50DF               	movf	indf2,w,c
  4455  0079E8  6E01               	movwf	?_BCD_to_DEC,c
  4456  0079EA  ECF7  F036         	call	_BCD_to_DEC	;wreg free
  4457  0079EE  6E42               	movwf	Set_date@z,c
  4458                           
  4459                           ;time.c: 155: if((x>=1&&x<=31) && (y>=1&&y<=12) && (z>=1&&z<=99))
  4460  0079F0  5040               	movf	Set_date@x,w,c
  4461  0079F2  B4D8               	btfsc	status,2,c
  4462  0079F4  D026               	goto	l2469
  4463  0079F6  0E20               	movlw	32
  4464  0079F8  6040               	cpfslt	Set_date@x,c
  4465  0079FA  D023               	goto	l2469
  4466  0079FC  5041               	movf	Set_date@y,w,c
  4467  0079FE  B4D8               	btfsc	status,2,c
  4468  007A00  D020               	goto	l2469
  4469  007A02  0E0D               	movlw	13
  4470  007A04  6041               	cpfslt	Set_date@y,c
  4471  007A06  D01D               	goto	l2469
  4472  007A08  5042               	movf	Set_date@z,w,c
  4473  007A0A  B4D8               	btfsc	status,2,c
  4474  007A0C  D01A               	goto	l2469
  4475  007A0E  0E64               	movlw	100
  4476  007A10  6042               	cpfslt	Set_date@z,c
  4477  007A12  D017               	goto	l2469
  4478                           
  4479                           ;time.c: 156: {
  4480                           ;time.c: 157: *date = *date & 0x3F;
  4481  007A14  C009  FFD9         	movff	Set_date@date,fsr2l
  4482  007A18  C00A  FFDA         	movff	Set_date@date+1,fsr2h
  4483  007A1C  50DF               	movf	indf2,w,c
  4484  007A1E  0B3F               	andlw	63
  4485  007A20  C009  FFD9         	movff	Set_date@date,fsr2l
  4486  007A24  C00A  FFDA         	movff	Set_date@date+1,fsr2h
  4487  007A28  6EDF               	movwf	indf2,c
  4488                           
  4489                           ;time.c: 159: *year = *year & 0xFF;
  4490  007A2A  C00B  FFD9         	movff	Set_date@month,fsr2l
  4491  007A2E  C00C  FFDA         	movff	Set_date@month+1,fsr2h
  4492  007A32  50DF               	movf	indf2,w,c
  4493  007A34  0B1F               	andlw	31
  4494  007A36  C00B  FFD9         	movff	Set_date@month,fsr2l
  4495  007A3A  C00C  FFDA         	movff	Set_date@month+1,fsr2h
  4496  007A3E  6EDF               	movwf	indf2,c
  4497                           
  4498                           ;time.c: 160: }
  4499  007A40  D006               	goto	l2471
  4500  007A42                     l2469:
  4501                           
  4502                           ;time.c: 161: else
  4503                           ;time.c: 162: Write_str(error);
  4504  007A42  0E00               	movlw	high Set_date@error
  4505  007A44  6E04               	movwf	?_Write_str+1,c
  4506  007A46  0E2E               	movlw	low Set_date@error
  4507  007A48  6E03               	movwf	?_Write_str,c
  4508  007A4A  EC91  F037         	call	_Write_str	;wreg free
  4509  007A4E                     l2471:
  4510                           
  4511                           ;time.c: 163: }while(!((x>=0&&x<=31) && (y>=0&&y<=12) && (z>=0&&z<=99)));
  4512  007A4E  0E20               	movlw	32
  4513  007A50  6040               	cpfslt	Set_date@x,c
  4514  007A52  D77A               	goto	l2439
  4515  007A54  0E0D               	movlw	13
  4516  007A56  6041               	cpfslt	Set_date@y,c
  4517  007A58  D777               	goto	l2439
  4518  007A5A  0E64               	movlw	100
  4519  007A5C  6042               	cpfslt	Set_date@z,c
  4520  007A5E  D774               	goto	l2439
  4521  007A60  0012               	return	
  4522  007A62                     __end_of_Set_date:
  4523                           	opt stack 0
  4524                           tblptru	equ	0xFF8
  4525                           tblptrh	equ	0xFF7
  4526                           tblptrl	equ	0xFF6
  4527                           tablat	equ	0xFF5
  4528                           postinc0	equ	0xFEE
  4529                           wreg	equ	0xFE8
  4530                           indf1	equ	0xFE7
  4531                           postinc1	equ	0xFE6
  4532                           postdec1	equ	0xFE5
  4533                           fsr1h	equ	0xFE2
  4534                           fsr1l	equ	0xFE1
  4535                           indf2	equ	0xFDF
  4536                           postinc2	equ	0xFDE
  4537                           fsr2h	equ	0xFDA
  4538                           fsr2l	equ	0xFD9
  4539                           status	equ	0xFD8
  4540                           
  4541 ;; *************** function _Set_day *****************
  4542 ;; Defined at:
  4543 ;;		line 116 in file "time.c"
  4544 ;; Parameters:    Size  Location     Type
  4545 ;;		None
  4546 ;; Auto vars:     Size  Location     Type
  4547 ;;  str5           67    9[COMRAM] unsigned char [67]
  4548 ;;  error          18   76[COMRAM] unsigned char [18]
  4549 ;;  day             1   94[COMRAM] unsigned char 
  4550 ;; Return value:  Size  Location     Type
  4551 ;;                  1    wreg      unsigned char 
  4552 ;; Registers used:
  4553 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  4554 ;; Tracked objects:
  4555 ;;		On entry : 0/0
  4556 ;;		On exit  : 0/0
  4557 ;;		Unchanged: 0/0
  4558 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4559 ;;      Params:         0       0       0       0       0       0       0       0       0
  4560 ;;      Locals:        86       0       0       0       0       0       0       0       0
  4561 ;;      Temps:          1       0       0       0       0       0       0       0       0
  4562 ;;      Totals:        87       0       0       0       0       0       0       0       0
  4563 ;;Total ram usage:       87 bytes
  4564 ;; Hardware stack levels used:    1
  4565 ;; Hardware stack levels required when called:    3
  4566 ;; This function calls:
  4567 ;;		_Write_str
  4568 ;;		_BCD_format
  4569 ;;		_Clear_array
  4570 ;;		_Read_string
  4571 ;; This function is called by:
  4572 ;;		_Get_data
  4573 ;; This function uses a non-reentrant model
  4574 ;;
  4575                           
  4576                           	psect	text24
  4577  0074AE                     __ptext24:
  4578                           	opt stack 0
  4579  0074AE                     _Set_day:
  4580                           	opt stack 26
  4581                           
  4582                           ;time.c: 117: unsigned char error[18] = "\nInvalid Entry..!";
  4583                           
  4584                           ;incstack = 0
  4585                           ;incstack = 0
  4586  0074AE  EE21  F095         	lfsr	2,Set_day@F203
  4587  0074B2  EE10  F04D         	lfsr	1,Set_day@error
  4588  0074B6  0E12               	movlw	18
  4589  0074B8                     u2071:
  4590  0074B8  CFDE FFE6          	movff	postinc2,postinc1
  4591  0074BC  2EE8               	decfsz	wreg,f,c
  4592  0074BE  D7FC               	goto	u2071
  4593                           
  4594                           ;time.c: 118: unsigned char str5[] = "\nEnter the DAY SUN-01 MON-02 TUE-03 WED-04 THURS-
      +                          05 FRI-06 SAT-07\0";
  4595  0074C0  EE22  F000         	lfsr	2,Set_day@F205
  4596  0074C4  EE10  F00A         	lfsr	1,Set_day@str5
  4597  0074C8  0E43               	movlw	67
  4598  0074CA                     u2081:
  4599  0074CA  CFDE FFE6          	movff	postinc2,postinc1
  4600  0074CE  2EE8               	decfsz	wreg,f,c
  4601  0074D0  D7FC               	goto	u2081
  4602                           
  4603                           ;time.c: 120: unsigned char day;
  4604                           ;time.c: 121: Write_str(str5);
  4605  0074D2  0E00               	movlw	high Set_day@str5
  4606  0074D4  6E04               	movwf	?_Write_str+1,c
  4607  0074D6  0E0A               	movlw	low Set_day@str5
  4608  0074D8  6E03               	movwf	?_Write_str,c
  4609  0074DA  EC91  F037         	call	_Write_str	;wreg free
  4610                           
  4611                           ;time.c: 122: Clear_array(str, 8);
  4612  0074DE  0100               	movlb	0	; () banked
  4613  0074E0  0E00               	movlw	high _str
  4614  0074E2  6E02               	movwf	?_Clear_array+1,c
  4615  0074E4  0100               	movlb	0	; () banked
  4616  0074E6  0EF3               	movlw	low _str
  4617  0074E8  6E01               	movwf	?_Clear_array,c
  4618  0074EA  6E09               	movwf	??_Set_day& (0+255),c
  4619  0074EC  0E08               	movlw	8
  4620  0074EE  6E03               	movwf	?_Clear_array+2,c
  4621  0074F0  5009               	movf	??_Set_day& (0+255),w,c
  4622  0074F2  EC51  F037         	call	_Clear_array	;wreg free
  4623  0074F6                     l2415:
  4624                           
  4625                           ;time.c: 124: {
  4626                           ;time.c: 125: Read_string(str, 2);
  4627  0074F6  0100               	movlb	0	; () banked
  4628  0074F8  0E00               	movlw	high _str
  4629  0074FA  6E04               	movwf	?_Read_string+1,c
  4630  0074FC  0100               	movlb	0	; () banked
  4631  0074FE  0EF3               	movlw	low _str
  4632  007500  6E03               	movwf	?_Read_string,c
  4633  007502  6E09               	movwf	??_Set_day& (0+255),c
  4634  007504  0E02               	movlw	2
  4635  007506  6E05               	movwf	?_Read_string+2,c
  4636  007508  5009               	movf	??_Set_day& (0+255),w,c
  4637  00750A  ECA7  F038         	call	_Read_string	;wreg free
  4638                           
  4639                           ;time.c: 126: day = BCD_format(str);
  4640  00750E  0100               	movlb	0	; () banked
  4641  007510  0E00               	movlw	high _str
  4642  007512  6E02               	movwf	?_BCD_format+1,c
  4643  007514  0100               	movlb	0	; () banked
  4644  007516  0EF3               	movlw	low _str
  4645  007518  6E01               	movwf	?_BCD_format,c
  4646  00751A  EC3E  F037         	call	_BCD_format	;wreg free
  4647  00751E  6E5F               	movwf	Set_day@day,c
  4648                           
  4649                           ;time.c: 127: Write_str(str);
  4650  007520  0100               	movlb	0	; () banked
  4651  007522  0E00               	movlw	high _str
  4652  007524  6E04               	movwf	?_Write_str+1,c
  4653  007526  0100               	movlb	0	; () banked
  4654  007528  0EF3               	movlw	low _str
  4655  00752A  6E03               	movwf	?_Write_str,c
  4656  00752C  EC91  F037         	call	_Write_str	;wreg free
  4657                           
  4658                           ;time.c: 128: if(day>=1 && day<=7)
  4659  007530  505F               	movf	Set_day@day,w,c
  4660  007532  B4D8               	btfsc	status,2,c
  4661  007534  D005               	goto	l2431
  4662  007536  0E08               	movlw	8
  4663  007538  605F               	cpfslt	Set_day@day,c
  4664  00753A  D002               	goto	l2431
  4665                           
  4666                           ;time.c: 129: {
  4667                           ;time.c: 130: return (day);
  4668  00753C  505F               	movf	Set_day@day,w,c
  4669  00753E  D00C               	goto	l146
  4670  007540                     l2431:
  4671                           
  4672                           ;time.c: 132: else{
  4673                           ;time.c: 133: Write_str(error);
  4674  007540  0E00               	movlw	high Set_day@error
  4675  007542  6E04               	movwf	?_Write_str+1,c
  4676  007544  0E4D               	movlw	low Set_day@error
  4677  007546  6E03               	movwf	?_Write_str,c
  4678  007548  EC91  F037         	call	_Write_str	;wreg free
  4679                           
  4680                           ;time.c: 135: }
  4681                           ;time.c: 136: }while(!(day>=1 && day<=7));
  4682  00754C  505F               	movf	Set_day@day,w,c
  4683  00754E  B4D8               	btfsc	status,2,c
  4684  007550  D7D2               	goto	l2415
  4685  007552  0E08               	movlw	8
  4686  007554  605F               	cpfslt	Set_day@day,c
  4687  007556  D7CF               	goto	l2415
  4688  007558                     l146:
  4689  007558  0012               	return	
  4690  00755A                     __end_of_Set_day:
  4691                           	opt stack 0
  4692                           tblptru	equ	0xFF8
  4693                           tblptrh	equ	0xFF7
  4694                           tblptrl	equ	0xFF6
  4695                           tablat	equ	0xFF5
  4696                           postinc0	equ	0xFEE
  4697                           wreg	equ	0xFE8
  4698                           indf1	equ	0xFE7
  4699                           postinc1	equ	0xFE6
  4700                           postdec1	equ	0xFE5
  4701                           fsr1h	equ	0xFE2
  4702                           fsr1l	equ	0xFE1
  4703                           indf2	equ	0xFDF
  4704                           postinc2	equ	0xFDE
  4705                           fsr2h	equ	0xFDA
  4706                           fsr2l	equ	0xFD9
  4707                           status	equ	0xFD8
  4708                           
  4709 ;; *************** function _Clear_array *****************
  4710 ;; Defined at:
  4711 ;;		line 53 in file "time.c"
  4712 ;; Parameters:    Size  Location     Type
  4713 ;;  e               2    0[COMRAM] PTR unsigned char 
  4714 ;;		 -> str(11), time(2), 
  4715 ;;  n               1    2[COMRAM] unsigned char 
  4716 ;; Auto vars:     Size  Location     Type
  4717 ;;  i               1    4[COMRAM] unsigned char 
  4718 ;; Return value:  Size  Location     Type
  4719 ;;		None               void
  4720 ;; Registers used:
  4721 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  4722 ;; Tracked objects:
  4723 ;;		On entry : 0/0
  4724 ;;		On exit  : 0/0
  4725 ;;		Unchanged: 0/0
  4726 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4727 ;;      Params:         3       0       0       0       0       0       0       0       0
  4728 ;;      Locals:         1       0       0       0       0       0       0       0       0
  4729 ;;      Temps:          1       0       0       0       0       0       0       0       0
  4730 ;;      Totals:         5       0       0       0       0       0       0       0       0
  4731 ;;Total ram usage:        5 bytes
  4732 ;; Hardware stack levels used:    1
  4733 ;; This function calls:
  4734 ;;		Nothing
  4735 ;; This function is called by:
  4736 ;;		_Set_day
  4737 ;;		_Read_time
  4738 ;; This function uses a non-reentrant model
  4739 ;;
  4740                           
  4741                           	psect	text25
  4742  006EA2                     __ptext25:
  4743                           	opt stack 0
  4744  006EA2                     _Clear_array:
  4745                           	opt stack 29
  4746                           
  4747                           ;time.c: 54: unsigned char i;
  4748                           ;time.c: 55: for(i=0;i<n;i++)
  4749                           
  4750                           ;incstack = 0
  4751                           ;incstack = 0
  4752  006EA2  6E04               	movwf	??_Clear_array& (0+255),c
  4753  006EA4  0E00               	movlw	0
  4754  006EA6  6E05               	movwf	Clear_array@i,c
  4755  006EA8  5004               	movf	??_Clear_array& (0+255),w,c
  4756  006EAA  D009               	goto	l2067
  4757  006EAC                     l2061:
  4758                           
  4759                           ;time.c: 56: {
  4760                           ;time.c: 57: *e = ' ';
  4761  006EAC  C001  FFD9         	movff	Clear_array@e,fsr2l
  4762  006EB0  C002  FFDA         	movff	Clear_array@e+1,fsr2h
  4763  006EB4  0E20               	movlw	32
  4764  006EB6  6EDF               	movwf	indf2,c
  4765                           
  4766                           ;time.c: 58: e++;
  4767  006EB8  4A01               	infsnz	Clear_array@e,f,c
  4768  006EBA  2A02               	incf	Clear_array@e+1,f,c
  4769  006EBC  2A05               	incf	Clear_array@i,f,c
  4770  006EBE                     l2067:
  4771  006EBE  5003               	movf	Clear_array@n,w,c
  4772  006EC0  5C05               	subwf	Clear_array@i,w,c
  4773  006EC2  B0D8               	btfsc	status,0,c
  4774  006EC4  0012               	return	
  4775  006EC6  D7F2               	goto	l2061
  4776  006EC8                     __end_of_Clear_array:
  4777                           	opt stack 0
  4778                           tblptru	equ	0xFF8
  4779                           tblptrh	equ	0xFF7
  4780                           tblptrl	equ	0xFF6
  4781                           tablat	equ	0xFF5
  4782                           postinc0	equ	0xFEE
  4783                           wreg	equ	0xFE8
  4784                           indf1	equ	0xFE7
  4785                           postinc1	equ	0xFE6
  4786                           postdec1	equ	0xFE5
  4787                           fsr1h	equ	0xFE2
  4788                           fsr1l	equ	0xFE1
  4789                           indf2	equ	0xFDF
  4790                           postinc2	equ	0xFDE
  4791                           fsr2h	equ	0xFDA
  4792                           fsr2l	equ	0xFD9
  4793                           status	equ	0xFD8
  4794                           
  4795 ;; *************** function _Set_time *****************
  4796 ;; Defined at:
  4797 ;;		line 70 in file "time.c"
  4798 ;; Parameters:    Size  Location     Type
  4799 ;;  sec             2    8[COMRAM] PTR unsigned char 
  4800 ;;		 -> Get_data@s(1), 
  4801 ;;  min             2   10[COMRAM] PTR unsigned char 
  4802 ;;		 -> Get_data@m(1), 
  4803 ;;  hour            2   12[COMRAM] PTR unsigned char 
  4804 ;;		 -> Get_data@h(1), 
  4805 ;;  mode            1   14[COMRAM] unsigned char 
  4806 ;; Auto vars:     Size  Location     Type
  4807 ;;  str3           37   16[COMRAM] unsigned char [37]
  4808 ;;  error          18   53[COMRAM] unsigned char [18]
  4809 ;;  h               1   76[COMRAM] unsigned char 
  4810 ;;  z               1   75[COMRAM] unsigned char 
  4811 ;;  y               1   74[COMRAM] unsigned char 
  4812 ;;  x               1   73[COMRAM] unsigned char 
  4813 ;;  m               1   72[COMRAM] unsigned char 
  4814 ;;  s               1   71[COMRAM] unsigned char 
  4815 ;; Return value:  Size  Location     Type
  4816 ;;		None               void
  4817 ;; Registers used:
  4818 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4819 ;; Tracked objects:
  4820 ;;		On entry : 0/0
  4821 ;;		On exit  : 0/0
  4822 ;;		Unchanged: 0/0
  4823 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4824 ;;      Params:         7       0       0       0       0       0       0       0       0
  4825 ;;      Locals:        61       0       0       0       0       0       0       0       0
  4826 ;;      Temps:          1       0       0       0       0       0       0       0       0
  4827 ;;      Totals:        69       0       0       0       0       0       0       0       0
  4828 ;;Total ram usage:       69 bytes
  4829 ;; Hardware stack levels used:    1
  4830 ;; Hardware stack levels required when called:    3
  4831 ;; This function calls:
  4832 ;;		_Write_str
  4833 ;;		_BCD_format
  4834 ;;		_BCD_to_DEC
  4835 ;;		_Read_string
  4836 ;; This function is called by:
  4837 ;;		_Get_data
  4838 ;; This function uses a non-reentrant model
  4839 ;;
  4840                           
  4841                           	psect	text26
  4842  007BB8                     __ptext26:
  4843                           	opt stack 0
  4844  007BB8                     _Set_time:
  4845                           	opt stack 26
  4846                           
  4847                           ;time.c: 71: unsigned char s, m, h, x, y, z;
  4848                           ;time.c: 72: unsigned char str3[37] = "\nEnter the time in the format HHMMSS";
  4849                           
  4850                           ;incstack = 0
  4851                           ;incstack = 0
  4852  007BB8  EE22  F043         	lfsr	2,Set_time@F198
  4853  007BBC  EE10  F011         	lfsr	1,Set_time@str3
  4854  007BC0  0E25               	movlw	37
  4855  007BC2                     u1851:
  4856  007BC2  CFDE FFE6          	movff	postinc2,postinc1
  4857  007BC6  2EE8               	decfsz	wreg,f,c
  4858  007BC8  D7FC               	goto	u1851
  4859                           
  4860                           ;time.c: 73: unsigned char error[] = "\nInvalid Entry..!";
  4861  007BCA  EE21  F0A7         	lfsr	2,Set_time@F200
  4862  007BCE  EE10  F036         	lfsr	1,Set_time@error
  4863  007BD2  0E12               	movlw	18
  4864  007BD4                     u1861:
  4865  007BD4  CFDE FFE6          	movff	postinc2,postinc1
  4866  007BD8  2EE8               	decfsz	wreg,f,c
  4867  007BDA  D7FC               	goto	u1861
  4868  007BDC                     l2339:
  4869                           
  4870                           ;time.c: 75: {
  4871                           ;time.c: 76: Write_str(str3);
  4872  007BDC  0E00               	movlw	high Set_time@str3
  4873  007BDE  6E04               	movwf	?_Write_str+1,c
  4874  007BE0  0E11               	movlw	low Set_time@str3
  4875  007BE2  6E03               	movwf	?_Write_str,c
  4876  007BE4  EC91  F037         	call	_Write_str	;wreg free
  4877                           
  4878                           ;time.c: 77: Read_string(str, 6);
  4879  007BE8  0100               	movlb	0	; () banked
  4880  007BEA  0E00               	movlw	high _str
  4881  007BEC  6E04               	movwf	?_Read_string+1,c
  4882  007BEE  0100               	movlb	0	; () banked
  4883  007BF0  0EF3               	movlw	low _str
  4884  007BF2  6E03               	movwf	?_Read_string,c
  4885  007BF4  6E10               	movwf	??_Set_time& (0+255),c
  4886  007BF6  0E06               	movlw	6
  4887  007BF8  6E05               	movwf	?_Read_string+2,c
  4888  007BFA  5010               	movf	??_Set_time& (0+255),w,c
  4889  007BFC  ECA7  F038         	call	_Read_string	;wreg free
  4890                           
  4891                           ;time.c: 78: h = BCD_format(str);
  4892  007C00  0100               	movlb	0	; () banked
  4893  007C02  0E00               	movlw	high _str
  4894  007C04  6E02               	movwf	?_BCD_format+1,c
  4895  007C06  0100               	movlb	0	; () banked
  4896  007C08  0EF3               	movlw	low _str
  4897  007C0A  6E01               	movwf	?_BCD_format,c
  4898  007C0C  EC3E  F037         	call	_BCD_format	;wreg free
  4899  007C10  6E4D               	movwf	Set_time@h,c
  4900                           
  4901                           ;time.c: 79: m = BCD_format(str+2);
  4902  007C12  0100               	movlb	0	; () banked
  4903  007C14  0E00               	movlw	high (_str+2)
  4904  007C16  6E02               	movwf	?_BCD_format+1,c
  4905  007C18  0100               	movlb	0	; () banked
  4906  007C1A  0EF5               	movlw	low (_str+2)
  4907  007C1C  6E01               	movwf	?_BCD_format,c
  4908  007C1E  EC3E  F037         	call	_BCD_format	;wreg free
  4909  007C22  6E49               	movwf	Set_time@m,c
  4910                           
  4911                           ;time.c: 80: s = BCD_format(str+4);
  4912  007C24  0100               	movlb	0	; () banked
  4913  007C26  0E00               	movlw	high (_str+4)
  4914  007C28  6E02               	movwf	?_BCD_format+1,c
  4915  007C2A  0100               	movlb	0	; () banked
  4916  007C2C  0EF7               	movlw	low (_str+4)
  4917  007C2E  6E01               	movwf	?_BCD_format,c
  4918  007C30  EC3E  F037         	call	_BCD_format	;wreg free
  4919  007C34  6E48               	movwf	Set_time@s,c
  4920                           
  4921                           ;time.c: 81: x = BCD_to_DEC(s);
  4922  007C36  C048  F001         	movff	Set_time@s,?_BCD_to_DEC
  4923  007C3A  ECF7  F036         	call	_BCD_to_DEC	;wreg free
  4924  007C3E  6E4A               	movwf	Set_time@x,c
  4925                           
  4926                           ;time.c: 82: y = BCD_to_DEC(m);
  4927  007C40  C049  F001         	movff	Set_time@m,?_BCD_to_DEC
  4928  007C44  ECF7  F036         	call	_BCD_to_DEC	;wreg free
  4929  007C48  6E4B               	movwf	Set_time@y,c
  4930                           
  4931                           ;time.c: 83: z = BCD_to_DEC(h);
  4932  007C4A  C04D  F001         	movff	Set_time@h,?_BCD_to_DEC
  4933  007C4E  ECF7  F036         	call	_BCD_to_DEC	;wreg free
  4934  007C52  6E4C               	movwf	Set_time@z,c
  4935                           
  4936                           ;time.c: 84: if((mode==0)||(mode==1))
  4937  007C54  500F               	movf	Set_time@mode,w,c
  4938  007C56  B4D8               	btfsc	status,2,c
  4939  007C58  D003               	goto	l2359
  4940  007C5A  040F               	decf	Set_time@mode,w,c
  4941  007C5C  A4D8               	btfss	status,2,c
  4942  007C5E  D028               	goto	l2379
  4943  007C60                     l2359:
  4944                           
  4945                           ;time.c: 85: {
  4946                           ;time.c: 86: if(((x>=0&&x<=59) && (y>=0&&y<=59) && (z>=1&&z<=12) ))
  4947  007C60  0E3C               	movlw	60
  4948  007C62  604A               	cpfslt	Set_time@x,c
  4949  007C64  D01E               	goto	l2377
  4950  007C66  0E3C               	movlw	60
  4951  007C68  604B               	cpfslt	Set_time@y,c
  4952  007C6A  D01B               	goto	l2377
  4953  007C6C  504C               	movf	Set_time@z,w,c
  4954  007C6E  B4D8               	btfsc	status,2,c
  4955  007C70  D018               	goto	l2377
  4956  007C72  0E0D               	movlw	13
  4957  007C74  604C               	cpfslt	Set_time@z,c
  4958  007C76  D015               	goto	l2377
  4959                           
  4960                           ;time.c: 87: {
  4961                           ;time.c: 88: s = s&0x7F;
  4962  007C78  5048               	movf	Set_time@s,w,c
  4963  007C7A  0B7F               	andlw	127
  4964  007C7C  6E48               	movwf	Set_time@s,c
  4965                           
  4966                           ;time.c: 89: m = m&0x7F;
  4967  007C7E  5049               	movf	Set_time@m,w,c
  4968  007C80  0B7F               	andlw	127
  4969  007C82  6E49               	movwf	Set_time@m,c
  4970                           
  4971                           ;time.c: 90: h = h&0x1F;
  4972  007C84  504D               	movf	Set_time@h,w,c
  4973  007C86  0B1F               	andlw	31
  4974  007C88  6E4D               	movwf	Set_time@h,c
  4975                           
  4976                           ;time.c: 91: if(mode==0)
  4977  007C8A  660F               	tstfsz	Set_time@mode,c
  4978  007C8C  D003               	goto	l2373
  4979                           
  4980                           ;time.c: 92: h = h|0x40;
  4981  007C8E  504D               	movf	Set_time@h,w,c
  4982  007C90  0940               	iorlw	64
  4983  007C92  D005               	goto	L4
  4984  007C94                     l2373:
  4985                           
  4986                           ;time.c: 93: else if(mode == 1)
  4987  007C94  040F               	decf	Set_time@mode,w,c
  4988  007C96  A4D8               	btfss	status,2,c
  4989  007C98  D018               	goto	u1980
  4990                           
  4991                           ;time.c: 94: h = h|0x60;
  4992  007C9A  504D               	movf	Set_time@h,w,c
  4993  007C9C  0960               	iorlw	96
  4994  007C9E                     L4:
  4995  007C9E  6E4D               	movwf	Set_time@h,c
  4996  007CA0  D014               	goto	u1980
  4997  007CA2                     l2377:
  4998                           
  4999                           ;time.c: 97: else
  5000                           ;time.c: 98: Write_str(error);
  5001  007CA2  0E00               	movlw	high Set_time@error
  5002  007CA4  6E04               	movwf	?_Write_str+1,c
  5003  007CA6  0E36               	movlw	low Set_time@error
  5004  007CA8  6E03               	movwf	?_Write_str,c
  5005  007CAA  EC91  F037         	call	_Write_str	;wreg free
  5006  007CAE  D017               	goto	l2391
  5007  007CB0                     l2379:
  5008                           
  5009                           ;time.c: 100: else if(((x>=0&&x<=59) && (y>=0&&y<=59) && (z>=0&&z<=24) ) && (mode==2))
  5010  007CB0  0E3C               	movlw	60
  5011  007CB2  604A               	cpfslt	Set_time@x,c
  5012  007CB4  D00E               	goto	l2389
  5013  007CB6  0E3C               	movlw	60
  5014  007CB8  604B               	cpfslt	Set_time@y,c
  5015  007CBA  D00B               	goto	l2389
  5016  007CBC  0E19               	movlw	25
  5017  007CBE  604C               	cpfslt	Set_time@z,c
  5018  007CC0  D008               	goto	l2389
  5019                           
  5020                           ;time.c: 101: {
  5021                           ;time.c: 102: h = h|0x00;
  5022  007CC2  500F               	movf	Set_time@mode,w,c
  5023  007CC4  0A02               	xorlw	2
  5024  007CC6  A4D8               	btfss	status,2,c
  5025  007CC8  D004               	goto	l2389
  5026  007CCA                     u1980:
  5027                           
  5028                           ;time.c: 103: h = h&0x7F;
  5029  007CCA  504D               	movf	Set_time@h,w,c
  5030  007CCC  0B7F               	andlw	127
  5031  007CCE  6E4D               	movwf	Set_time@h,c
  5032                           
  5033                           ;time.c: 104: }
  5034  007CD0  D006               	goto	l2391
  5035  007CD2                     l2389:
  5036                           
  5037                           ;time.c: 105: else
  5038                           ;time.c: 106: Write_str(error);
  5039  007CD2  0E00               	movlw	high Set_time@error
  5040  007CD4  6E04               	movwf	?_Write_str+1,c
  5041  007CD6  0E36               	movlw	low Set_time@error
  5042  007CD8  6E03               	movwf	?_Write_str,c
  5043  007CDA  EC91  F037         	call	_Write_str	;wreg free
  5044  007CDE                     l2391:
  5045                           
  5046                           ;time.c: 107: }while(!(((x>=0&&x<=59) && (y>=0&&y<=59) && (z>=1&&z<=12)) || ((x>=0&&x<=5
      +                          9) && (y>=0&&y<=59) && (z>=0&&z<=24) && (mode==2)) ));
  5047  007CDE  0E3C               	movlw	60
  5048  007CE0  604A               	cpfslt	Set_time@x,c
  5049  007CE2  D009               	goto	l2399
  5050  007CE4  0E3C               	movlw	60
  5051  007CE6  604B               	cpfslt	Set_time@y,c
  5052  007CE8  D006               	goto	l2399
  5053  007CEA  504C               	movf	Set_time@z,w,c
  5054  007CEC  B4D8               	btfsc	status,2,c
  5055  007CEE  D003               	goto	l2399
  5056  007CF0  0E0C               	movlw	12
  5057  007CF2  644C               	cpfsgt	Set_time@z,c
  5058  007CF4  D00D               	goto	l2407
  5059  007CF6                     l2399:
  5060  007CF6  0E3C               	movlw	60
  5061  007CF8  604A               	cpfslt	Set_time@x,c
  5062  007CFA  D770               	goto	l2339
  5063  007CFC  0E3C               	movlw	60
  5064  007CFE  604B               	cpfslt	Set_time@y,c
  5065  007D00  D76D               	goto	l2339
  5066  007D02  0E19               	movlw	25
  5067  007D04  604C               	cpfslt	Set_time@z,c
  5068  007D06  D76A               	goto	l2339
  5069  007D08  500F               	movf	Set_time@mode,w,c
  5070  007D0A  0A02               	xorlw	2
  5071  007D0C  A4D8               	btfss	status,2,c
  5072  007D0E  D766               	goto	l2339
  5073  007D10                     l2407:
  5074                           
  5075                           ;time.c: 109: *sec = s;
  5076  007D10  C009  FFD9         	movff	Set_time@sec,fsr2l
  5077  007D14  C00A  FFDA         	movff	Set_time@sec+1,fsr2h
  5078  007D18  C048  FFDF         	movff	Set_time@s,indf2
  5079                           
  5080                           ;time.c: 110: *min = m;
  5081  007D1C  C00B  FFD9         	movff	Set_time@min,fsr2l
  5082  007D20  C00C  FFDA         	movff	Set_time@min+1,fsr2h
  5083  007D24  C049  FFDF         	movff	Set_time@m,indf2
  5084                           
  5085                           ;time.c: 111: *hour = h;
  5086  007D28  C00D  FFD9         	movff	Set_time@hour,fsr2l
  5087  007D2C  C00E  FFDA         	movff	Set_time@hour+1,fsr2h
  5088  007D30  C04D  FFDF         	movff	Set_time@h,indf2
  5089  007D34  0012               	return	
  5090  007D36                     __end_of_Set_time:
  5091                           	opt stack 0
  5092                           tblptru	equ	0xFF8
  5093                           tblptrh	equ	0xFF7
  5094                           tblptrl	equ	0xFF6
  5095                           tablat	equ	0xFF5
  5096                           postinc0	equ	0xFEE
  5097                           wreg	equ	0xFE8
  5098                           indf1	equ	0xFE7
  5099                           postinc1	equ	0xFE6
  5100                           postdec1	equ	0xFE5
  5101                           fsr1h	equ	0xFE2
  5102                           fsr1l	equ	0xFE1
  5103                           indf2	equ	0xFDF
  5104                           postinc2	equ	0xFDE
  5105                           fsr2h	equ	0xFDA
  5106                           fsr2l	equ	0xFD9
  5107                           status	equ	0xFD8
  5108                           
  5109 ;; *************** function _Read_string *****************
  5110 ;; Defined at:
  5111 ;;		line 55 in file "uart.c"
  5112 ;; Parameters:    Size  Location     Type
  5113 ;;  buffer          2    2[COMRAM] PTR unsigned char 
  5114 ;;		 -> str(11), 
  5115 ;;  len             1    4[COMRAM] unsigned char 
  5116 ;; Auto vars:     Size  Location     Type
  5117 ;;  data            1    7[COMRAM] unsigned char 
  5118 ;;  i               1    6[COMRAM] unsigned char 
  5119 ;; Return value:  Size  Location     Type
  5120 ;;		None               void
  5121 ;; Registers used:
  5122 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5123 ;; Tracked objects:
  5124 ;;		On entry : 0/0
  5125 ;;		On exit  : 0/0
  5126 ;;		Unchanged: 0/0
  5127 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5128 ;;      Params:         3       0       0       0       0       0       0       0       0
  5129 ;;      Locals:         2       0       0       0       0       0       0       0       0
  5130 ;;      Temps:          1       0       0       0       0       0       0       0       0
  5131 ;;      Totals:         6       0       0       0       0       0       0       0       0
  5132 ;;Total ram usage:        6 bytes
  5133 ;; Hardware stack levels used:    1
  5134 ;; Hardware stack levels required when called:    2
  5135 ;; This function calls:
  5136 ;;		_Write
  5137 ;;		_WriteUSART
  5138 ;;		_ReadUSART
  5139 ;; This function is called by:
  5140 ;;		_Set_time
  5141 ;;		_Set_day
  5142 ;;		_Set_date
  5143 ;;		_Get_data
  5144 ;; This function uses a non-reentrant model
  5145 ;;
  5146                           
  5147                           	psect	text27
  5148  00714E                     __ptext27:
  5149                           	opt stack 0
  5150  00714E                     _Read_string:
  5151                           	opt stack 26
  5152                           
  5153                           ;uart.c: 56: char i;
  5154                           ;uart.c: 57: unsigned char data;
  5155                           ;uart.c: 58: Write(0x0D);
  5156                           
  5157                           ;incstack = 0
  5158                           ;incstack = 0
  5159  00714E  6E06               	movwf	??_Read_string& (0+255),c
  5160  007150  0E0D               	movlw	13
  5161  007152  6E02               	movwf	?_Write,c
  5162  007154  5006               	movf	??_Read_string& (0+255),w,c
  5163  007156  ECC9  F036         	call	_Write	;wreg free
  5164                           
  5165                           ;uart.c: 59: Write('\n');
  5166  00715A  6E06               	movwf	??_Read_string& (0+255),c
  5167  00715C  0E0A               	movlw	10
  5168  00715E  6E02               	movwf	?_Write,c
  5169  007160  5006               	movf	??_Read_string& (0+255),w,c
  5170  007162  ECC9  F036         	call	_Write	;wreg free
  5171                           
  5172                           ;uart.c: 60: for(i=0;i<len;i++)
  5173  007166  6E06               	movwf	??_Read_string& (0+255),c
  5174  007168  0E00               	movlw	0
  5175  00716A  6E07               	movwf	Read_string@i,c
  5176  00716C  5006               	movf	??_Read_string& (0+255),w,c
  5177  00716E  D014               	goto	l2311
  5178  007170                     l405:
  5179  007170  AA9E               	btfss	3998,5,c	;volatile
  5180  007172  D7FE               	goto	l405
  5181                           
  5182                           ;uart.c: 63: data = ReadUSART();
  5183  007174  ECAC  F037         	call	_ReadUSART	;wreg free
  5184  007178  6E08               	movwf	Read_string@data,c
  5185                           
  5186                           ;uart.c: 64: *buffer = data;
  5187  00717A  C003  FFD9         	movff	Read_string@buffer,fsr2l
  5188  00717E  C004  FFDA         	movff	Read_string@buffer+1,fsr2h
  5189  007182  C008  FFDF         	movff	Read_string@data,indf2
  5190                           
  5191                           ;uart.c: 65: WriteUSART(data);
  5192  007186  C008  F001         	movff	Read_string@data,?_WriteUSART
  5193  00718A  ECED  F036         	call	_WriteUSART	;wreg free
  5194  00718E                     l408:
  5195  00718E  A2AC               	btfss	4012,1,c	;volatile
  5196  007190  D7FE               	goto	l408
  5197                           
  5198                           ;uart.c: 67: buffer++;
  5199  007192  4A03               	infsnz	Read_string@buffer,f,c
  5200  007194  2A04               	incf	Read_string@buffer+1,f,c
  5201  007196  2A07               	incf	Read_string@i,f,c
  5202  007198                     l2311:
  5203  007198  5005               	movf	Read_string@len,w,c
  5204  00719A  5C07               	subwf	Read_string@i,w,c
  5205  00719C  B0D8               	btfsc	status,0,c
  5206  00719E  0012               	return	
  5207  0071A0  D7E7               	goto	l405
  5208  0071A2                     __end_of_Read_string:
  5209                           	opt stack 0
  5210                           tblptru	equ	0xFF8
  5211                           tblptrh	equ	0xFF7
  5212                           tblptrl	equ	0xFF6
  5213                           tablat	equ	0xFF5
  5214                           postinc0	equ	0xFEE
  5215                           wreg	equ	0xFE8
  5216                           indf1	equ	0xFE7
  5217                           postinc1	equ	0xFE6
  5218                           postdec1	equ	0xFE5
  5219                           fsr1h	equ	0xFE2
  5220                           fsr1l	equ	0xFE1
  5221                           indf2	equ	0xFDF
  5222                           postinc2	equ	0xFDE
  5223                           fsr2h	equ	0xFDA
  5224                           fsr2l	equ	0xFD9
  5225                           status	equ	0xFD8
  5226                           
  5227 ;; *************** function _BCD_to_DEC *****************
  5228 ;; Defined at:
  5229 ;;		line 45 in file "time.c"
  5230 ;; Parameters:    Size  Location     Type
  5231 ;;  c               1    0[COMRAM] unsigned char 
  5232 ;; Auto vars:     Size  Location     Type
  5233 ;;		None
  5234 ;; Return value:  Size  Location     Type
  5235 ;;                  1    wreg      unsigned char 
  5236 ;; Registers used:
  5237 ;;		wreg, status,2, status,0, prodl, prodh
  5238 ;; Tracked objects:
  5239 ;;		On entry : 0/0
  5240 ;;		On exit  : 0/0
  5241 ;;		Unchanged: 0/0
  5242 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5243 ;;      Params:         1       0       0       0       0       0       0       0       0
  5244 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5245 ;;      Temps:          1       0       0       0       0       0       0       0       0
  5246 ;;      Totals:         2       0       0       0       0       0       0       0       0
  5247 ;;Total ram usage:        2 bytes
  5248 ;; Hardware stack levels used:    1
  5249 ;; This function calls:
  5250 ;;		Nothing
  5251 ;; This function is called by:
  5252 ;;		_Set_time
  5253 ;;		_Set_date
  5254 ;; This function uses a non-reentrant model
  5255 ;;
  5256                           
  5257                           	psect	text28
  5258  006DEE                     __ptext28:
  5259                           	opt stack 0
  5260  006DEE                     _BCD_to_DEC:
  5261                           	opt stack 28
  5262                           
  5263                           ;time.c: 46: return ((c>>4)*10+(c&0x0F)*1);
  5264                           
  5265                           ;incstack = 0
  5266                           ;incstack = 0
  5267  006DEE  5001               	movf	BCD_to_DEC@c,w,c
  5268  006DF0  0B0F               	andlw	15
  5269  006DF2  0D01               	mullw	1
  5270  006DF4  CFF3 F002          	movff	prodl,??_BCD_to_DEC
  5271  006DF8  3801               	swapf	BCD_to_DEC@c,w,c
  5272  006DFA  0B0F               	andlw	15
  5273  006DFC  0D0A               	mullw	10
  5274  006DFE  50F3               	movf	prodl,w,c
  5275  006E00  2402               	addwf	??_BCD_to_DEC,w,c
  5276  006E02  0012               	return	
  5277  006E04                     __end_of_BCD_to_DEC:
  5278                           	opt stack 0
  5279                           tblptru	equ	0xFF8
  5280                           tblptrh	equ	0xFF7
  5281                           tblptrl	equ	0xFF6
  5282                           tablat	equ	0xFF5
  5283                           prodl	equ	0xFF3
  5284                           postinc0	equ	0xFEE
  5285                           wreg	equ	0xFE8
  5286                           indf1	equ	0xFE7
  5287                           postinc1	equ	0xFE6
  5288                           postdec1	equ	0xFE5
  5289                           fsr1h	equ	0xFE2
  5290                           fsr1l	equ	0xFE1
  5291                           indf2	equ	0xFDF
  5292                           postinc2	equ	0xFDE
  5293                           fsr2h	equ	0xFDA
  5294                           fsr2l	equ	0xFD9
  5295                           status	equ	0xFD8
  5296                           
  5297 ;; *************** function _BCD_format *****************
  5298 ;; Defined at:
  5299 ;;		line 34 in file "time.c"
  5300 ;; Parameters:    Size  Location     Type
  5301 ;;  str             2    0[COMRAM] PTR unsigned char 
  5302 ;;		 -> str(11), 
  5303 ;; Auto vars:     Size  Location     Type
  5304 ;;  a               1    3[COMRAM] unsigned char 
  5305 ;; Return value:  Size  Location     Type
  5306 ;;                  1    wreg      unsigned char 
  5307 ;; Registers used:
  5308 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  5309 ;; Tracked objects:
  5310 ;;		On entry : 0/0
  5311 ;;		On exit  : 0/0
  5312 ;;		Unchanged: 0/0
  5313 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5314 ;;      Params:         2       0       0       0       0       0       0       0       0
  5315 ;;      Locals:         1       0       0       0       0       0       0       0       0
  5316 ;;      Temps:          1       0       0       0       0       0       0       0       0
  5317 ;;      Totals:         4       0       0       0       0       0       0       0       0
  5318 ;;Total ram usage:        4 bytes
  5319 ;; Hardware stack levels used:    1
  5320 ;; This function calls:
  5321 ;;		Nothing
  5322 ;; This function is called by:
  5323 ;;		_Set_time
  5324 ;;		_Set_day
  5325 ;;		_Set_date
  5326 ;; This function uses a non-reentrant model
  5327 ;;
  5328                           
  5329                           	psect	text29
  5330  006E7C                     __ptext29:
  5331                           	opt stack 0
  5332  006E7C                     _BCD_format:
  5333                           	opt stack 28
  5334                           
  5335                           ;time.c: 35: unsigned char a;
  5336                           ;time.c: 36: a = (*str-'0')<<4;
  5337                           
  5338                           ;incstack = 0
  5339                           ;incstack = 0
  5340  006E7C  C001  FFD9         	movff	BCD_format@str,fsr2l
  5341  006E80  C002  FFDA         	movff	BCD_format@str+1,fsr2h
  5342  006E84  50DF               	movf	indf2,w,c
  5343  006E86  6E03               	movwf	??_BCD_format& (0+255),c
  5344  006E88  3803               	swapf	??_BCD_format,w,c
  5345  006E8A  0BF0               	andlw	240
  5346  006E8C  6E04               	movwf	BCD_format@a,c
  5347                           
  5348                           ;time.c: 37: str++;
  5349  006E8E  4A01               	infsnz	BCD_format@str,f,c
  5350  006E90  2A02               	incf	BCD_format@str+1,f,c
  5351                           
  5352                           ;time.c: 38: return (a|(*str-'0'));
  5353  006E92  C001  FFD9         	movff	BCD_format@str,fsr2l
  5354  006E96  C002  FFDA         	movff	BCD_format@str+1,fsr2h
  5355  006E9A  50DF               	movf	indf2,w,c
  5356  006E9C  0FD0               	addlw	208
  5357  006E9E  1004               	iorwf	BCD_format@a,w,c
  5358  006EA0  0012               	return	
  5359  006EA2                     __end_of_BCD_format:
  5360                           	opt stack 0
  5361                           tblptru	equ	0xFF8
  5362                           tblptrh	equ	0xFF7
  5363                           tblptrl	equ	0xFF6
  5364                           tablat	equ	0xFF5
  5365                           prodl	equ	0xFF3
  5366                           postinc0	equ	0xFEE
  5367                           wreg	equ	0xFE8
  5368                           indf1	equ	0xFE7
  5369                           postinc1	equ	0xFE6
  5370                           postdec1	equ	0xFE5
  5371                           fsr1h	equ	0xFE2
  5372                           fsr1l	equ	0xFE1
  5373                           indf2	equ	0xFDF
  5374                           postinc2	equ	0xFDE
  5375                           fsr2h	equ	0xFDA
  5376                           fsr2l	equ	0xFD9
  5377                           status	equ	0xFD8
  5378                           
  5379 ;; *************** function _Write_str *****************
  5380 ;; Defined at:
  5381 ;;		line 32 in file "uart.c"
  5382 ;; Parameters:    Size  Location     Type
  5383 ;;  c               2    2[COMRAM] PTR unsigned char 
  5384 ;;		 -> Get_data@error(18), Get_data@str8(14), Get_data@str2(19), Set_date@error(18), 
  5385 ;;		 -> Set_date@str6(30), Set_day@str5(67), Set_day@error(18), str(11), 
  5386 ;;		 -> Set_time@error(18), Set_time@str3(37), time(2), main@str8(29), 
  5387 ;;		 -> main@str7(35), 
  5388 ;; Auto vars:     Size  Location     Type
  5389 ;;		None
  5390 ;; Return value:  Size  Location     Type
  5391 ;;		None               void
  5392 ;; Registers used:
  5393 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5394 ;; Tracked objects:
  5395 ;;		On entry : 0/0
  5396 ;;		On exit  : 0/0
  5397 ;;		Unchanged: 0/0
  5398 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5399 ;;      Params:         2       0       0       0       0       0       0       0       0
  5400 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5401 ;;      Temps:          1       0       0       0       0       0       0       0       0
  5402 ;;      Totals:         3       0       0       0       0       0       0       0       0
  5403 ;;Total ram usage:        3 bytes
  5404 ;; Hardware stack levels used:    1
  5405 ;; Hardware stack levels required when called:    2
  5406 ;; This function calls:
  5407 ;;		_Write
  5408 ;;		_WriteUSART
  5409 ;; This function is called by:
  5410 ;;		_main
  5411 ;;		_Set_time
  5412 ;;		_Set_day
  5413 ;;		_Set_date
  5414 ;;		_Get_data
  5415 ;; This function uses a non-reentrant model
  5416 ;;
  5417                           
  5418                           	psect	text30
  5419  006F22                     __ptext30:
  5420                           	opt stack 0
  5421  006F22                     _Write_str:
  5422                           	opt stack 26
  5423                           
  5424                           ;uart.c: 33: Write(0x0D);
  5425                           
  5426                           ;incstack = 0
  5427                           ;incstack = 0
  5428  006F22  6E05               	movwf	??_Write_str& (0+255),c
  5429  006F24  0E0D               	movlw	13
  5430  006F26  6E02               	movwf	?_Write,c
  5431  006F28  5005               	movf	??_Write_str& (0+255),w,c
  5432  006F2A  ECC9  F036         	call	_Write	;wreg free
  5433                           
  5434                           ;uart.c: 34: while(*c != '\0')
  5435  006F2E  D00C               	goto	l2283
  5436  006F30                     l2279:
  5437                           
  5438                           ;uart.c: 35: {
  5439                           ;uart.c: 36: WriteUSART(*c);
  5440  006F30  C003  FFD9         	movff	Write_str@c,fsr2l
  5441  006F34  C004  FFDA         	movff	Write_str@c+1,fsr2h
  5442  006F38  50DF               	movf	indf2,w,c
  5443  006F3A  6E01               	movwf	?_WriteUSART,c
  5444  006F3C  ECED  F036         	call	_WriteUSART	;wreg free
  5445  006F40                     l390:
  5446  006F40  A2AC               	btfss	4012,1,c	;volatile
  5447  006F42  D7FE               	goto	l390
  5448                           
  5449                           ;uart.c: 38: c++;
  5450  006F44  4A03               	infsnz	Write_str@c,f,c
  5451  006F46  2A04               	incf	Write_str@c+1,f,c
  5452  006F48                     l2283:
  5453  006F48  C003  FFD9         	movff	Write_str@c,fsr2l
  5454  006F4C  C004  FFDA         	movff	Write_str@c+1,fsr2h
  5455  006F50  50DF               	movf	indf2,w,c
  5456  006F52  B4D8               	btfsc	status,2,c
  5457  006F54  0012               	return	
  5458  006F56  D7EC               	goto	l2279
  5459  006F58                     __end_of_Write_str:
  5460                           	opt stack 0
  5461                           tblptru	equ	0xFF8
  5462                           tblptrh	equ	0xFF7
  5463                           tblptrl	equ	0xFF6
  5464                           tablat	equ	0xFF5
  5465                           prodl	equ	0xFF3
  5466                           postinc0	equ	0xFEE
  5467                           wreg	equ	0xFE8
  5468                           indf1	equ	0xFE7
  5469                           postinc1	equ	0xFE6
  5470                           postdec1	equ	0xFE5
  5471                           fsr1h	equ	0xFE2
  5472                           fsr1l	equ	0xFE1
  5473                           indf2	equ	0xFDF
  5474                           postinc2	equ	0xFDE
  5475                           fsr2h	equ	0xFDA
  5476                           fsr2l	equ	0xFD9
  5477                           status	equ	0xFD8
  5478                           
  5479 ;; *************** function _Read_char *****************
  5480 ;; Defined at:
  5481 ;;		line 44 in file "uart.c"
  5482 ;; Parameters:    Size  Location     Type
  5483 ;;		None
  5484 ;; Auto vars:     Size  Location     Type
  5485 ;;  c               1    3[COMRAM] unsigned char 
  5486 ;; Return value:  Size  Location     Type
  5487 ;;                  1    wreg      unsigned char 
  5488 ;; Registers used:
  5489 ;;		wreg, status,2, status,0, cstack
  5490 ;; Tracked objects:
  5491 ;;		On entry : 0/0
  5492 ;;		On exit  : 0/0
  5493 ;;		Unchanged: 0/0
  5494 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5495 ;;      Params:         0       0       0       0       0       0       0       0       0
  5496 ;;      Locals:         1       0       0       0       0       0       0       0       0
  5497 ;;      Temps:          1       0       0       0       0       0       0       0       0
  5498 ;;      Totals:         2       0       0       0       0       0       0       0       0
  5499 ;;Total ram usage:        2 bytes
  5500 ;; Hardware stack levels used:    1
  5501 ;; Hardware stack levels required when called:    2
  5502 ;; This function calls:
  5503 ;;		_Write
  5504 ;;		_ReadUSART
  5505 ;; This function is called by:
  5506 ;;		_main
  5507 ;; This function uses a non-reentrant model
  5508 ;;
  5509                           
  5510                           	psect	text31
  5511  006EF4                     __ptext31:
  5512                           	opt stack 0
  5513  006EF4                     _Read_char:
  5514                           	opt stack 28
  5515  006EF4                     l397:
  5516  006EF4  AA9E               	btfss	3998,5,c	;volatile
  5517  006EF6  D7FE               	goto	l397
  5518                           
  5519                           ;uart.c: 47: c = ReadUSART();
  5520  006EF8  ECAC  F037         	call	_ReadUSART	;wreg free
  5521  006EFC  6E04               	movwf	Read_char@c,c
  5522                           
  5523                           ;uart.c: 48: Write('\n');
  5524  006EFE  6E03               	movwf	??_Read_char& (0+255),c
  5525  006F00  0E0A               	movlw	10
  5526  006F02  6E02               	movwf	?_Write,c
  5527  006F04  5003               	movf	??_Read_char& (0+255),w,c
  5528  006F06  ECC9  F036         	call	_Write	;wreg free
  5529                           
  5530                           ;uart.c: 49: Write('\r');
  5531  006F0A  6E03               	movwf	??_Read_char& (0+255),c
  5532  006F0C  0E0D               	movlw	13
  5533  006F0E  6E02               	movwf	?_Write,c
  5534  006F10  5003               	movf	??_Read_char& (0+255),w,c
  5535  006F12  ECC9  F036         	call	_Write	;wreg free
  5536                           
  5537                           ;uart.c: 50: Write(c);
  5538  006F16  C004  F002         	movff	Read_char@c,?_Write
  5539  006F1A  ECC9  F036         	call	_Write	;wreg free
  5540                           
  5541                           ;uart.c: 51: return (c);
  5542  006F1E  5004               	movf	Read_char@c,w,c
  5543  006F20  0012               	return	
  5544  006F22                     __end_of_Read_char:
  5545                           	opt stack 0
  5546                           tblptru	equ	0xFF8
  5547                           tblptrh	equ	0xFF7
  5548                           tblptrl	equ	0xFF6
  5549                           tablat	equ	0xFF5
  5550                           prodl	equ	0xFF3
  5551                           postinc0	equ	0xFEE
  5552                           wreg	equ	0xFE8
  5553                           indf1	equ	0xFE7
  5554                           postinc1	equ	0xFE6
  5555                           postdec1	equ	0xFE5
  5556                           fsr1h	equ	0xFE2
  5557                           fsr1l	equ	0xFE1
  5558                           indf2	equ	0xFDF
  5559                           postinc2	equ	0xFDE
  5560                           fsr2h	equ	0xFDA
  5561                           fsr2l	equ	0xFD9
  5562                           status	equ	0xFD8
  5563                           
  5564 ;; *************** function _ReadUSART *****************
  5565 ;; Defined at:
  5566 ;;		line 16 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\USART\uread.c"
  5567 ;; Parameters:    Size  Location     Type
  5568 ;;		None
  5569 ;; Auto vars:     Size  Location     Type
  5570 ;;  data            1    0[COMRAM] unsigned char 
  5571 ;; Return value:  Size  Location     Type
  5572 ;;                  1    wreg      unsigned char 
  5573 ;; Registers used:
  5574 ;;		wreg, status,2, status,0
  5575 ;; Tracked objects:
  5576 ;;		On entry : 0/0
  5577 ;;		On exit  : 0/0
  5578 ;;		Unchanged: 0/0
  5579 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5580 ;;      Params:         0       0       0       0       0       0       0       0       0
  5581 ;;      Locals:         1       0       0       0       0       0       0       0       0
  5582 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5583 ;;      Totals:         1       0       0       0       0       0       0       0       0
  5584 ;;Total ram usage:        1 bytes
  5585 ;; Hardware stack levels used:    1
  5586 ;; This function calls:
  5587 ;;		Nothing
  5588 ;; This function is called by:
  5589 ;;		_Read_char
  5590 ;;		_Read_string
  5591 ;; This function uses a non-reentrant model
  5592 ;;
  5593                           
  5594                           	psect	text32
  5595  006F58                     __ptext32:
  5596                           	opt stack 0
  5597  006F58                     _ReadUSART:
  5598                           	opt stack 27
  5599                           
  5600                           ;incstack = 0
  5601                           ;incstack = 0
  5602  006F58  0EF2               	movlw	242
  5603  006F5A  0100               	movlb	0	; () banked
  5604  006F5C  0100               	movlb	0	; () banked
  5605  006F5E  17F2               	andwf	_USART_Status& (0+255),f,b
  5606                           
  5607                           ; BSR set to: 0
  5608  006F60  ACAB               	btfss	4011,6,c	;volatile
  5609  006F62  D008               	goto	l454
  5610                           
  5611                           ; BSR set to: 0
  5612  006F64  0100               	movlb	0	; () banked
  5613  006F66  0100               	movlb	0	; () banked
  5614  006F68  91F2               	bcf	_USART_Status& (0+255),0,b
  5615  006F6A  A0AB               	btfss	4011,0,c	;volatile
  5616  006F6C  D003               	goto	l454
  5617                           
  5618                           ; BSR set to: 0
  5619  006F6E  0100               	movlb	0	; () banked
  5620  006F70  0100               	movlb	0	; () banked
  5621  006F72  81F2               	bsf	_USART_Status& (0+255),0,b
  5622  006F74                     l454:
  5623                           
  5624                           ; BSR set to: 0
  5625  006F74  A4AB               	btfss	4011,2,c	;volatile
  5626  006F76  D003               	goto	l456
  5627                           
  5628                           ; BSR set to: 0
  5629  006F78  0100               	movlb	0	; () banked
  5630  006F7A  0100               	movlb	0	; () banked
  5631  006F7C  85F2               	bsf	_USART_Status& (0+255),2,b
  5632  006F7E                     l456:
  5633                           
  5634                           ; BSR set to: 0
  5635  006F7E  A2AB               	btfss	4011,1,c	;volatile
  5636  006F80  D003               	goto	l457
  5637                           
  5638                           ; BSR set to: 0
  5639  006F82  0100               	movlb	0	; () banked
  5640  006F84  0100               	movlb	0	; () banked
  5641  006F86  87F2               	bsf	_USART_Status& (0+255),3,b
  5642  006F88                     l457:
  5643                           
  5644                           ; BSR set to: 0
  5645  006F88  CFAE F001          	movff	4014,ReadUSART@data	;volatile
  5646                           
  5647                           ; BSR set to: 0
  5648  006F8C  5001               	movf	ReadUSART@data,w,c
  5649                           
  5650                           ; BSR set to: 0
  5651                           
  5652                           ; BSR set to: 0
  5653  006F8E  0012               	return	
  5654  006F90                     __end_of_ReadUSART:
  5655                           	opt stack 0
  5656                           tblptru	equ	0xFF8
  5657                           tblptrh	equ	0xFF7
  5658                           tblptrl	equ	0xFF6
  5659                           tablat	equ	0xFF5
  5660                           prodl	equ	0xFF3
  5661                           postinc0	equ	0xFEE
  5662                           wreg	equ	0xFE8
  5663                           indf1	equ	0xFE7
  5664                           postinc1	equ	0xFE6
  5665                           postdec1	equ	0xFE5
  5666                           fsr1h	equ	0xFE2
  5667                           fsr1l	equ	0xFE1
  5668                           indf2	equ	0xFDF
  5669                           postinc2	equ	0xFDE
  5670                           fsr2h	equ	0xFDA
  5671                           fsr2l	equ	0xFD9
  5672                           status	equ	0xFD8
  5673                           
  5674 ;; *************** function _Write *****************
  5675 ;; Defined at:
  5676 ;;		line 26 in file "uart.c"
  5677 ;; Parameters:    Size  Location     Type
  5678 ;;  data            1    1[COMRAM] unsigned char 
  5679 ;; Auto vars:     Size  Location     Type
  5680 ;;		None
  5681 ;; Return value:  Size  Location     Type
  5682 ;;		None               void
  5683 ;; Registers used:
  5684 ;;		cstack
  5685 ;; Tracked objects:
  5686 ;;		On entry : 0/0
  5687 ;;		On exit  : 0/0
  5688 ;;		Unchanged: 0/0
  5689 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5690 ;;      Params:         1       0       0       0       0       0       0       0       0
  5691 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5692 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5693 ;;      Totals:         1       0       0       0       0       0       0       0       0
  5694 ;;Total ram usage:        1 bytes
  5695 ;; Hardware stack levels used:    1
  5696 ;; Hardware stack levels required when called:    1
  5697 ;; This function calls:
  5698 ;;		_WriteUSART
  5699 ;; This function is called by:
  5700 ;;		_Write_str
  5701 ;;		_Read_char
  5702 ;;		_Read_string
  5703 ;; This function uses a non-reentrant model
  5704 ;;
  5705                           
  5706                           	psect	text33
  5707  006D92                     __ptext33:
  5708                           	opt stack 0
  5709  006D92                     _Write:
  5710                           	opt stack 26
  5711                           
  5712                           ;uart.c: 27: WriteUSART(data);
  5713                           
  5714                           ; BSR set to: 0
  5715                           ;incstack = 0
  5716                           ;incstack = 0
  5717  006D92  C002  F001         	movff	Write@data,?_WriteUSART
  5718  006D96  ECED  F036         	call	_WriteUSART	;wreg free
  5719  006D9A                     l382:
  5720  006D9A  B2AC               	btfsc	4012,1,c	;volatile
  5721  006D9C  0012               	return	
  5722  006D9E  D7FD               	goto	l382
  5723  006DA0                     __end_of_Write:
  5724                           	opt stack 0
  5725                           tblptru	equ	0xFF8
  5726                           tblptrh	equ	0xFF7
  5727                           tblptrl	equ	0xFF6
  5728                           tablat	equ	0xFF5
  5729                           prodl	equ	0xFF3
  5730                           postinc0	equ	0xFEE
  5731                           wreg	equ	0xFE8
  5732                           indf1	equ	0xFE7
  5733                           postinc1	equ	0xFE6
  5734                           postdec1	equ	0xFE5
  5735                           fsr1h	equ	0xFE2
  5736                           fsr1l	equ	0xFE1
  5737                           indf2	equ	0xFDF
  5738                           postinc2	equ	0xFDE
  5739                           fsr2h	equ	0xFDA
  5740                           fsr2l	equ	0xFD9
  5741                           status	equ	0xFD8
  5742                           
  5743 ;; *************** function _WriteUSART *****************
  5744 ;; Defined at:
  5745 ;;		line 14 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\USART\uwrite.c"
  5746 ;; Parameters:    Size  Location     Type
  5747 ;;  data            1    0[COMRAM] unsigned char 
  5748 ;; Auto vars:     Size  Location     Type
  5749 ;;		None
  5750 ;; Return value:  Size  Location     Type
  5751 ;;		None               void
  5752 ;; Registers used:
  5753 ;;		None
  5754 ;; Tracked objects:
  5755 ;;		On entry : 0/0
  5756 ;;		On exit  : 0/0
  5757 ;;		Unchanged: 0/0
  5758 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5759 ;;      Params:         1       0       0       0       0       0       0       0       0
  5760 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5761 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5762 ;;      Totals:         1       0       0       0       0       0       0       0       0
  5763 ;;Total ram usage:        1 bytes
  5764 ;; Hardware stack levels used:    1
  5765 ;; This function calls:
  5766 ;;		Nothing
  5767 ;; This function is called by:
  5768 ;;		_Write
  5769 ;;		_Write_str
  5770 ;;		_Read_string
  5771 ;; This function uses a non-reentrant model
  5772 ;;
  5773                           
  5774                           	psect	text34
  5775  006DDA                     __ptext34:
  5776                           	opt stack 0
  5777  006DDA                     _WriteUSART:
  5778                           	opt stack 27
  5779                           
  5780                           ;incstack = 0
  5781                           ;incstack = 0
  5782  006DDA  ACAC               	btfss	4012,6,c	;volatile
  5783  006DDC  D005               	goto	l467
  5784  006DDE  90AC               	bcf	4012,0,c	;volatile
  5785  006DE0  0100               	movlb	0	; () banked
  5786  006DE2  0100               	movlb	0	; () banked
  5787  006DE4  B3F2               	btfsc	_USART_Status& (0+255),1,b
  5788                           
  5789                           ; BSR set to: 0
  5790  006DE6  80AC               	bsf	4012,0,c	;volatile
  5791  006DE8                     l467:
  5792  006DE8  C001  FFAD         	movff	WriteUSART@data,4013	;volatile
  5793  006DEC  0012               	return	
  5794  006DEE                     __end_of_WriteUSART:
  5795                           	opt stack 0
  5796                           tblptru	equ	0xFF8
  5797                           tblptrh	equ	0xFF7
  5798                           tblptrl	equ	0xFF6
  5799                           tablat	equ	0xFF5
  5800                           prodl	equ	0xFF3
  5801                           postinc0	equ	0xFEE
  5802                           wreg	equ	0xFE8
  5803                           indf1	equ	0xFE7
  5804                           postinc1	equ	0xFE6
  5805                           postdec1	equ	0xFE5
  5806                           fsr1h	equ	0xFE2
  5807                           fsr1l	equ	0xFE1
  5808                           indf2	equ	0xFDF
  5809                           postinc2	equ	0xFDE
  5810                           fsr2h	equ	0xFDA
  5811                           fsr2l	equ	0xFD9
  5812                           status	equ	0xFD8
  5813                           
  5814 ;; *************** function _UsartConfig *****************
  5815 ;; Defined at:
  5816 ;;		line 21 in file "uart.c"
  5817 ;; Parameters:    Size  Location     Type
  5818 ;;  config1         1    3[COMRAM] unsigned char 
  5819 ;;  config2         1    4[COMRAM] unsigned char 
  5820 ;; Auto vars:     Size  Location     Type
  5821 ;;		None
  5822 ;; Return value:  Size  Location     Type
  5823 ;;		None               void
  5824 ;; Registers used:
  5825 ;;		wreg, status,2, cstack
  5826 ;; Tracked objects:
  5827 ;;		On entry : 0/0
  5828 ;;		On exit  : 0/0
  5829 ;;		Unchanged: 0/0
  5830 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5831 ;;      Params:         2       0       0       0       0       0       0       0       0
  5832 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5833 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5834 ;;      Totals:         2       0       0       0       0       0       0       0       0
  5835 ;;Total ram usage:        2 bytes
  5836 ;; Hardware stack levels used:    1
  5837 ;; Hardware stack levels required when called:    1
  5838 ;; This function calls:
  5839 ;;		_OpenUSART
  5840 ;; This function is called by:
  5841 ;;		_main
  5842 ;; This function uses a non-reentrant model
  5843 ;;
  5844                           
  5845                           	psect	text35
  5846  006DCA                     __ptext35:
  5847                           	opt stack 0
  5848  006DCA                     _UsartConfig:
  5849                           	opt stack 29
  5850                           
  5851                           ;uart.c: 22: OpenUSART( config1, config2);
  5852                           
  5853                           ;incstack = 0
  5854                           ;incstack = 0
  5855  006DCA  C004  F001         	movff	UsartConfig@config1,?_OpenUSART
  5856  006DCE  C005  F002         	movff	UsartConfig@config2,?_OpenUSART+1
  5857  006DD2  6A03               	clrf	?_OpenUSART+2,c
  5858  006DD4  EC55  F039         	call	_OpenUSART	;wreg free
  5859  006DD8  0012               	return	
  5860  006DDA                     __end_of_UsartConfig:
  5861                           	opt stack 0
  5862                           tblptru	equ	0xFF8
  5863                           tblptrh	equ	0xFF7
  5864                           tblptrl	equ	0xFF6
  5865                           tablat	equ	0xFF5
  5866                           prodl	equ	0xFF3
  5867                           postinc0	equ	0xFEE
  5868                           wreg	equ	0xFE8
  5869                           indf1	equ	0xFE7
  5870                           postinc1	equ	0xFE6
  5871                           postdec1	equ	0xFE5
  5872                           fsr1h	equ	0xFE2
  5873                           fsr1l	equ	0xFE1
  5874                           indf2	equ	0xFDF
  5875                           postinc2	equ	0xFDE
  5876                           fsr2h	equ	0xFDA
  5877                           fsr2l	equ	0xFD9
  5878                           status	equ	0xFD8
  5879                           
  5880 ;; *************** function _OpenUSART *****************
  5881 ;; Defined at:
  5882 ;;		line 74 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\USART\uopen.c"
  5883 ;; Parameters:    Size  Location     Type
  5884 ;;  config          1    0[COMRAM] unsigned char 
  5885 ;;  spbrg           2    1[COMRAM] unsigned int 
  5886 ;; Auto vars:     Size  Location     Type
  5887 ;;		None
  5888 ;; Return value:  Size  Location     Type
  5889 ;;		None               void
  5890 ;; Registers used:
  5891 ;;		wreg, status,2
  5892 ;; Tracked objects:
  5893 ;;		On entry : 0/0
  5894 ;;		On exit  : 0/0
  5895 ;;		Unchanged: 0/0
  5896 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5897 ;;      Params:         3       0       0       0       0       0       0       0       0
  5898 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5899 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5900 ;;      Totals:         3       0       0       0       0       0       0       0       0
  5901 ;;Total ram usage:        3 bytes
  5902 ;; Hardware stack levels used:    1
  5903 ;; This function calls:
  5904 ;;		Nothing
  5905 ;; This function is called by:
  5906 ;;		_UsartConfig
  5907 ;; This function uses a non-reentrant model
  5908 ;;
  5909                           
  5910                           	psect	text36
  5911  0072AA                     __ptext36:
  5912                           	opt stack 0
  5913  0072AA                     _OpenUSART:
  5914                           	opt stack 29
  5915                           
  5916                           ;incstack = 0
  5917                           ;incstack = 0
  5918  0072AA  0E00               	movlw	0
  5919  0072AC  6EAC               	movwf	4012,c	;volatile
  5920  0072AE  0E00               	movlw	0
  5921  0072B0  6EAB               	movwf	4011,c	;volatile
  5922  0072B2  B001               	btfsc	OpenUSART@config,0,c
  5923  0072B4  88AC               	bsf	4012,4,c	;volatile
  5924  0072B6  A201               	btfss	OpenUSART@config,1,c
  5925  0072B8  D002               	goto	l434
  5926  0072BA  8CAC               	bsf	4012,6,c	;volatile
  5927  0072BC  8CAB               	bsf	4011,6,c	;volatile
  5928  0072BE                     l434:
  5929  0072BE  B401               	btfsc	OpenUSART@config,2,c
  5930  0072C0  8EAC               	bsf	4012,7,c	;volatile
  5931  0072C2  A601               	btfss	OpenUSART@config,3,c
  5932  0072C4  D002               	goto	l436
  5933  0072C6  88AB               	bsf	4011,4,c	;volatile
  5934  0072C8  D001               	goto	l437
  5935  0072CA                     l436:
  5936  0072CA  8AAB               	bsf	4011,5,c	;volatile
  5937  0072CC                     l437:
  5938  0072CC  B801               	btfsc	OpenUSART@config,4,c
  5939  0072CE  84AC               	bsf	4012,2,c	;volatile
  5940  0072D0  989E               	bcf	3998,4,c	;volatile
  5941  0072D2  BA01               	btfsc	OpenUSART@config,5,c
  5942  0072D4  86AB               	bsf	4011,3,c	;volatile
  5943  0072D6  AC01               	btfss	OpenUSART@config,6,c
  5944  0072D8  D002               	goto	l440
  5945  0072DA  8A9D               	bsf	3997,5,c	;volatile
  5946  0072DC  D001               	goto	l441
  5947  0072DE                     l440:
  5948  0072DE  9A9D               	bcf	3997,5,c	;volatile
  5949  0072E0                     l441:
  5950  0072E0  9A9E               	bcf	3998,5,c	;volatile
  5951  0072E2  AE01               	btfss	OpenUSART@config,7,c
  5952  0072E4  D002               	goto	l442
  5953  0072E6  889D               	bsf	3997,4,c	;volatile
  5954  0072E8  D001               	goto	l443
  5955  0072EA                     l442:
  5956  0072EA  989D               	bcf	3997,4,c	;volatile
  5957  0072EC                     l443:
  5958  0072EC  C002  FFAF         	movff	OpenUSART@spbrg,4015	;volatile
  5959  0072F0  5003               	movf	OpenUSART@spbrg+1,w,c
  5960  0072F2  6EB0               	movwf	4016,c	;volatile
  5961  0072F4  8AAC               	bsf	4012,5,c	;volatile
  5962  0072F6  8EAB               	bsf	4011,7,c	;volatile
  5963  0072F8  9C94               	bcf	3988,6,c	;volatile
  5964  0072FA  8E94               	bsf	3988,7,c	;volatile
  5965  0072FC  B8AC               	btfsc	4012,4,c	;volatile
  5966  0072FE  BEAC               	btfsc	4012,7,c	;volatile
  5967  007300  D001               	goto	l445
  5968  007302  8C94               	bsf	3988,6,c	;volatile
  5969  007304                     l445:
  5970  007304  0012               	return	
  5971  007306                     __end_of_OpenUSART:
  5972                           	opt stack 0
  5973                           tblptru	equ	0xFF8
  5974                           tblptrh	equ	0xFF7
  5975                           tblptrl	equ	0xFF6
  5976                           tablat	equ	0xFF5
  5977                           prodl	equ	0xFF3
  5978                           postinc0	equ	0xFEE
  5979                           wreg	equ	0xFE8
  5980                           indf1	equ	0xFE7
  5981                           postinc1	equ	0xFE6
  5982                           postdec1	equ	0xFE5
  5983                           fsr1h	equ	0xFE2
  5984                           fsr1l	equ	0xFE1
  5985                           indf2	equ	0xFDF
  5986                           postinc2	equ	0xFDE
  5987                           fsr2h	equ	0xFDA
  5988                           fsr2l	equ	0xFD9
  5989                           status	equ	0xFD8
  5990                           
  5991 ;; *************** function _IdleI2C *****************
  5992 ;; Defined at:
  5993 ;;		line 25 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\i2c\i2c_idle.c"
  5994 ;; Parameters:    Size  Location     Type
  5995 ;;		None
  5996 ;; Auto vars:     Size  Location     Type
  5997 ;;		None
  5998 ;; Return value:  Size  Location     Type
  5999 ;;		None               void
  6000 ;; Registers used:
  6001 ;;		wreg, status,2, status,0
  6002 ;; Tracked objects:
  6003 ;;		On entry : 0/0
  6004 ;;		On exit  : 0/0
  6005 ;;		Unchanged: 0/0
  6006 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6007 ;;      Params:         0       0       0       0       0       0       0       0       0
  6008 ;;      Locals:         0       0       0       0       0       0       0       0       0
  6009 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6010 ;;      Totals:         0       0       0       0       0       0       0       0       0
  6011 ;;Total ram usage:        0 bytes
  6012 ;; Hardware stack levels used:    1
  6013 ;; This function calls:
  6014 ;;		Nothing
  6015 ;; This function is called by:
  6016 ;;		_Read_time
  6017 ;;		_WriteI2C
  6018 ;; This function uses a non-reentrant model
  6019 ;;
  6020                           
  6021                           	psect	text37
  6022  006D86                     __ptext37:
  6023                           	opt stack 0
  6024  006D86                     _IdleI2C:
  6025                           	opt stack 29
  6026  006D86                     l2121:
  6027  006D86  50C5               	movf	4037,w,c	;volatile
  6028  006D88  0B1F               	andlw	31
  6029  006D8A  B4D8               	btfsc	status,2,c
  6030  006D8C  B4C7               	btfsc	4039,2,c	;volatile
  6031  006D8E  D7FB               	goto	l2121
  6032  006D90  0012               	return	
  6033  006D92                     __end_of_IdleI2C:
  6034                           	opt stack 0
  6035                           tblptru	equ	0xFF8
  6036                           tblptrh	equ	0xFF7
  6037                           tblptrl	equ	0xFF6
  6038                           tablat	equ	0xFF5
  6039                           prodl	equ	0xFF3
  6040                           postinc0	equ	0xFEE
  6041                           wreg	equ	0xFE8
  6042                           indf1	equ	0xFE7
  6043                           postinc1	equ	0xFE6
  6044                           postdec1	equ	0xFE5
  6045                           fsr1h	equ	0xFE2
  6046                           fsr1l	equ	0xFE1
  6047                           indf2	equ	0xFDF
  6048                           postinc2	equ	0xFDE
  6049                           fsr2h	equ	0xFDA
  6050                           fsr2l	equ	0xFD9
  6051                           status	equ	0xFD8
  6052                           
  6053 ;; *************** function _ReadI2C *****************
  6054 ;; Defined at:
  6055 ;;		line 12 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\i2c\i2c_read.c"
  6056 ;; Parameters:    Size  Location     Type
  6057 ;;		None
  6058 ;; Auto vars:     Size  Location     Type
  6059 ;;		None
  6060 ;; Return value:  Size  Location     Type
  6061 ;;                  1    wreg      unsigned char 
  6062 ;; Registers used:
  6063 ;;		wreg, status,2, status,0
  6064 ;; Tracked objects:
  6065 ;;		On entry : 0/0
  6066 ;;		On exit  : 0/0
  6067 ;;		Unchanged: 0/0
  6068 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6069 ;;      Params:         0       0       0       0       0       0       0       0       0
  6070 ;;      Locals:         0       0       0       0       0       0       0       0       0
  6071 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6072 ;;      Totals:         0       0       0       0       0       0       0       0       0
  6073 ;;Total ram usage:        0 bytes
  6074 ;; Hardware stack levels used:    1
  6075 ;; This function calls:
  6076 ;;		Nothing
  6077 ;; This function is called by:
  6078 ;;		_Read
  6079 ;;		_Read_From_Addr
  6080 ;; This function uses a non-reentrant model
  6081 ;;
  6082                           
  6083                           	psect	text38
  6084  006E04                     __ptext38:
  6085                           	opt stack 0
  6086  006E04                     _ReadI2C:
  6087                           	opt stack 27
  6088                           
  6089                           ;incstack = 0
  6090                           ;incstack = 0
  6091  006E04  50C6               	movf	4038,w,c	;volatile
  6092  006E06  0B0F               	andlw	15
  6093  006E08  0A08               	xorlw	8
  6094  006E0A  B4D8               	btfsc	status,2,c
  6095  006E0C  D004               	goto	l508
  6096  006E0E  50C6               	movf	4038,w,c	;volatile
  6097  006E10  0B0F               	andlw	15
  6098  006E12  0A0B               	xorlw	11
  6099  006E14  B4D8               	btfsc	status,2,c
  6100  006E16                     l508:
  6101  006E16  86C5               	bsf	4037,3,c	;volatile
  6102  006E18                     l509:
  6103  006E18  A0C7               	btfss	4039,0,c	;volatile
  6104  006E1A  D7FE               	goto	l509
  6105  006E1C  50C9               	movf	4041,w,c	;volatile
  6106  006E1E  0012               	return	
  6107  006E20                     __end_of_ReadI2C:
  6108                           	opt stack 0
  6109                           tblptru	equ	0xFF8
  6110                           tblptrh	equ	0xFF7
  6111                           tblptrl	equ	0xFF6
  6112                           tablat	equ	0xFF5
  6113                           prodl	equ	0xFF3
  6114                           postinc0	equ	0xFEE
  6115                           wreg	equ	0xFE8
  6116                           indf1	equ	0xFE7
  6117                           postinc1	equ	0xFE6
  6118                           postdec1	equ	0xFE5
  6119                           fsr1h	equ	0xFE2
  6120                           fsr1l	equ	0xFE1
  6121                           indf2	equ	0xFDF
  6122                           postinc2	equ	0xFDE
  6123                           fsr2h	equ	0xFDA
  6124                           fsr2l	equ	0xFD9
  6125                           status	equ	0xFD8
  6126                           
  6127 ;; *************** function _WriteI2C *****************
  6128 ;; Defined at:
  6129 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\i2c\i2c_writ.c"
  6130 ;; Parameters:    Size  Location     Type
  6131 ;;  data_out        1    0[COMRAM] unsigned char 
  6132 ;; Auto vars:     Size  Location     Type
  6133 ;;		None
  6134 ;; Return value:  Size  Location     Type
  6135 ;;                  1    wreg      char 
  6136 ;; Registers used:
  6137 ;;		wreg, status,2, status,0, cstack
  6138 ;; Tracked objects:
  6139 ;;		On entry : 0/0
  6140 ;;		On exit  : 0/0
  6141 ;;		Unchanged: 0/0
  6142 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6143 ;;      Params:         1       0       0       0       0       0       0       0       0
  6144 ;;      Locals:         0       0       0       0       0       0       0       0       0
  6145 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6146 ;;      Totals:         1       0       0       0       0       0       0       0       0
  6147 ;;Total ram usage:        1 bytes
  6148 ;; Hardware stack levels used:    1
  6149 ;; Hardware stack levels required when called:    1
  6150 ;; This function calls:
  6151 ;;		_IdleI2C
  6152 ;; This function is called by:
  6153 ;;		_Write_I2C
  6154 ;; This function uses a non-reentrant model
  6155 ;;
  6156                           
  6157                           	psect	text39
  6158  006FD4                     __ptext39:
  6159                           	opt stack 0
  6160  006FD4                     _WriteI2C:
  6161                           	opt stack 27
  6162                           
  6163                           ;incstack = 0
  6164                           ;incstack = 0
  6165  006FD4  C001  FFC9         	movff	WriteI2C@data_out,4041	;volatile
  6166  006FD8  BEC6               	btfsc	4038,7,c	;volatile
  6167  006FDA  D020               	goto	l530
  6168                           
  6169                           ;	Return value of _WriteI2C is never used
  6170  006FDC  50C6               	movf	4038,w,c	;volatile
  6171  006FDE  0B0F               	andlw	15
  6172  006FE0  0A08               	xorlw	8
  6173  006FE2  B4D8               	btfsc	status,2,c
  6174  006FE4  D00C               	goto	l2255
  6175  006FE6  50C6               	movf	4038,w,c	;volatile
  6176  006FE8  0B0F               	andlw	15
  6177  006FEA  0A0B               	xorlw	11
  6178  006FEC  B4D8               	btfsc	status,2,c
  6179  006FEE  D007               	goto	l2255
  6180  006FF0  88C6               	bsf	4038,4,c	;volatile
  6181  006FF2                     l533:
  6182  006FF2  A69E               	btfss	3998,3,c	;volatile
  6183  006FF4  D7FE               	goto	l533
  6184  006FF6  B4C7               	btfsc	4039,2,c	;volatile
  6185  006FF8  D011               	goto	l530
  6186  006FFA  50C7               	movf	4039,w,c	;volatile
  6187  006FFC  D00F               	goto	l530
  6188  006FFE                     l2255:
  6189  006FFE  50C6               	movf	4038,w,c	;volatile
  6190  007000  0B0F               	andlw	15
  6191  007002  0A08               	xorlw	8
  6192  007004  B4D8               	btfsc	status,2,c
  6193  007006  D005               	goto	l542
  6194  007008  50C6               	movf	4038,w,c	;volatile
  6195  00700A  0B0F               	andlw	15
  6196  00700C  0A0B               	xorlw	11
  6197  00700E  A4D8               	btfss	status,2,c
  6198  007010  D005               	goto	l530
  6199  007012                     l542:
  6200  007012  B0C7               	btfsc	4039,0,c	;volatile
  6201  007014  D7FE               	goto	l542
  6202  007016  ECC3  F036         	call	_IdleI2C	;wreg free
  6203  00701A  50C5               	movf	4037,w,c	;volatile
  6204  00701C                     l530:
  6205  00701C  0012               	return	
  6206  00701E                     __end_of_WriteI2C:
  6207                           	opt stack 0
  6208  0000                     tblptru	equ	0xFF8
  6209                           tblptrh	equ	0xFF7
  6210                           tblptrl	equ	0xFF6
  6211                           tablat	equ	0xFF5
  6212                           prodl	equ	0xFF3
  6213                           postinc0	equ	0xFEE
  6214                           wreg	equ	0xFE8
  6215                           indf1	equ	0xFE7
  6216                           postinc1	equ	0xFE6
  6217                           postdec1	equ	0xFE5
  6218                           fsr1h	equ	0xFE2
  6219                           fsr1l	equ	0xFE1
  6220                           indf2	equ	0xFDF
  6221                           postinc2	equ	0xFDE
  6222                           fsr2h	equ	0xFDA
  6223                           fsr2l	equ	0xFD9
  6224                           status	equ	0xFD8
  6225                           tblptru	equ	0xFF8
  6226                           tblptrh	equ	0xFF7
  6227                           tblptrl	equ	0xFF6
  6228                           tablat	equ	0xFF5
  6229                           prodl	equ	0xFF3
  6230                           postinc0	equ	0xFEE
  6231                           wreg	equ	0xFE8
  6232                           indf1	equ	0xFE7
  6233                           postinc1	equ	0xFE6
  6234                           postdec1	equ	0xFE5
  6235                           fsr1h	equ	0xFE2
  6236                           fsr1l	equ	0xFE1
  6237                           indf2	equ	0xFDF
  6238                           postinc2	equ	0xFDE
  6239                           fsr2h	equ	0xFDA
  6240                           fsr2l	equ	0xFD9
  6241                           status	equ	0xFD8
  6242                           
  6243                           	psect	rparam
  6244  0000                     tblptru	equ	0xFF8
  6245                           tblptrh	equ	0xFF7
  6246                           tblptrl	equ	0xFF6
  6247                           tablat	equ	0xFF5
  6248                           prodl	equ	0xFF3
  6249                           postinc0	equ	0xFEE
  6250                           wreg	equ	0xFE8
  6251                           indf1	equ	0xFE7
  6252                           postinc1	equ	0xFE6
  6253                           postdec1	equ	0xFE5
  6254                           fsr1h	equ	0xFE2
  6255                           fsr1l	equ	0xFE1
  6256                           indf2	equ	0xFDF
  6257                           postinc2	equ	0xFDE
  6258                           fsr2h	equ	0xFDA
  6259                           fsr2l	equ	0xFD9
  6260                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    0
    Data        349
    BSS         14
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     95      95
    BANK0           160    146     160
    BANK1           256      0     245
    BANK2           256      0     104
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    ?_strcmp	int  size(2) Largest target is 0

    strcmp@s2	PTR const unsigned char  size(2) Largest target is 3
		 -> Get_data@s_6(BANK0[3]), Get_data@s_5(BANK0[3]), Get_data@s_4(BANK0[3]), Get_data@s_3(BANK0[3]), 
		 -> Get_data@s_2(BANK0[3]), Get_data@s_1(BANK0[3]), 

    strcmp@s1	PTR const unsigned char  size(2) Largest target is 11
		 -> str(BANK0[11]), 

    Read_string@buffer	PTR unsigned char  size(2) Largest target is 11
		 -> str(BANK0[11]), 

    Write_str@c	PTR unsigned char  size(2) Largest target is 67
		 -> Get_data@error(BANK0[18]), Get_data@str8(BANK0[14]), Get_data@str2(BANK0[19]), Set_date@error(COMRAM[18]), 
		 -> Set_date@str6(COMRAM[30]), Set_day@str5(COMRAM[67]), Set_day@error(COMRAM[18]), str(BANK0[11]), 
		 -> Set_time@error(COMRAM[18]), Set_time@str3(COMRAM[37]), time(BANK0[2]), main@str8(BANK0[29]), 
		 -> main@str7(BANK0[35]), 

    Read_year@e	PTR unsigned char  size(2) Largest target is 2
		 -> time(BANK0[2]), 

    Read_month@e	PTR unsigned char  size(2) Largest target is 2
		 -> time(BANK0[2]), 

    Read_date@e	PTR unsigned char  size(2) Largest target is 2
		 -> time(BANK0[2]), 

    Write_ARR@c	PTR unsigned char  size(2) Largest target is 4
		 -> write_DAY@day_7(COMRAM[4]), write_DAY@day_6(COMRAM[4]), write_DAY@day_5(COMRAM[4]), write_DAY@day_4(COMRAM[4]), 
		 -> write_DAY@day_3(COMRAM[4]), write_DAY@day_2(COMRAM[4]), write_DAY@day_1(COMRAM[4]), 

    Write_ARR@e	PTR unsigned char  size(2) Largest target is 2
		 -> time(BANK0[2]), 

    Read_hour@e	PTR unsigned char  size(2) Largest target is 2
		 -> time(BANK0[2]), 

    Read_min@e	PTR unsigned char  size(2) Largest target is 2
		 -> time(BANK0[2]), 

    Read_sec@e	PTR unsigned char  size(2) Largest target is 2
		 -> time(BANK0[2]), 

    Set_date@year	PTR unsigned char  size(2) Largest target is 1
		 -> Get_data@year(BANK0[1]), 

    Set_date@month	PTR unsigned char  size(2) Largest target is 1
		 -> Get_data@month(BANK0[1]), 

    Set_date@date	PTR unsigned char  size(2) Largest target is 1
		 -> Get_data@date(BANK0[1]), 

    Set_time@hour	PTR unsigned char  size(2) Largest target is 1
		 -> Get_data@h(BANK0[1]), 

    Set_time@min	PTR unsigned char  size(2) Largest target is 1
		 -> Get_data@m(BANK0[1]), 

    Set_time@sec	PTR unsigned char  size(2) Largest target is 1
		 -> Get_data@s(BANK0[1]), 

    Clear_array@e	PTR unsigned char  size(2) Largest target is 11
		 -> str(BANK0[11]), time(BANK0[2]), 

    BCD_format@str	PTR unsigned char  size(2) Largest target is 11
		 -> str(BANK0[11]), 


Critical Paths under _main in COMRAM

    _Read_time->_Read_hour
    _Read_year->_Read
    _Read_month->_Read
    _Read_date->_Read
    _Read_day->_Read
    _write_DAY->_Write_ARR
    _Read_hour->_Read
    _Read_min->_Read
    _Read_sec->_Read
    _Read->_delay_ms
    _delay_us->_Delay1KTCYx
    _Get_data->_Set_day
    _Write_time->_delay_ms
    _Write_time_->_delay_ms
    _Write_I2C->_write_DAY
    _delay_ms->_write_DAY
    _Set_date->_Read_string
    _Set_day->_Read_string
    _Set_time->_Read_string
    _Read_string->_Write
    _Write_str->_Write
    _Read_char->_Write
    _Write->_WriteUSART
    _UsartConfig->_OpenUSART

Critical Paths under _main in BANK0

    _main->_Get_data

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                68    68      0    7869
                                             78 BANK0     68    68      0
                           _delay_ms
                        _UsartConfig
                          _Write_str
                          _Read_char
                           _Get_data
                          _Read_time
 ---------------------------------------------------------------------------------
 (1) _Read_time                                            3     2      1    2686
                                             45 COMRAM     3     2      1
                           _delay_ms
                           _delay_us
                        _Clear_array
                           _Read_sec
                           _Read_min
                          _Read_hour
                           _Read_day
                          _Read_date
                         _Read_month
                          _Read_year
                          _Write_I2C
                            _OpenI2C
                           _CloseI2C
                            _IdleI2C
 ---------------------------------------------------------------------------------
 (2) _Read_year                                            3     1      2     298
                                             38 COMRAM     3     1      2
                               _Read
 ---------------------------------------------------------------------------------
 (2) _Read_month                                           3     1      2     275
                                             38 COMRAM     3     1      2
                               _Read
 ---------------------------------------------------------------------------------
 (2) _Read_date                                            3     1      2     298
                                             38 COMRAM     3     1      2
                               _Read
 ---------------------------------------------------------------------------------
 (2) _Read_day                                             0     0      0     472
                               _Read
                          _write_DAY
 ---------------------------------------------------------------------------------
 (3) _write_DAY                                           29    28      1     333
                                              4 COMRAM    29    28      1
                        _Delay1KTCYx (ARG)
                          _Write_ARR
                            _ReadBUF (ARG)
                           _WriteI2C (ARG)
                            _ReadI2C (ARG)
 ---------------------------------------------------------------------------------
 (4) _Write_ARR                                            4     0      4     136
                                              0 COMRAM     4     0      4
 ---------------------------------------------------------------------------------
 (2) _Read_hour                                            7     4      3     476
                                             38 COMRAM     7     4      3
                               _Read
 ---------------------------------------------------------------------------------
 (2) _Read_min                                             3     1      2     275
                                             38 COMRAM     3     1      2
                               _Read
 ---------------------------------------------------------------------------------
 (2) _Read_sec                                             3     1      2     275
                                             38 COMRAM     3     1      2
                               _Read
 ---------------------------------------------------------------------------------
 (3) _Read                                                 2     2      0     139
                                             36 COMRAM     2     2      0
                           _delay_ms
                          _write_DAY (ARG)
                            _ReadBUF
                          _Write_I2C
                            _ReadI2C
 ---------------------------------------------------------------------------------
 (2) _delay_us                                             3     2      1      68
                                              1 COMRAM     3     2      1
                        _Delay1KTCYx
 ---------------------------------------------------------------------------------
 (5) _Delay1KTCYx                                          1     0      1      22
                                              0 COMRAM     1     0      1
 ---------------------------------------------------------------------------------
 (1) _Get_data                                            78    78      0    4354
                                              0 BANK0     78    78      0
                          _Write_str
                           _Set_time
                        _Read_string
                            _Set_day
                           _Set_date
                             _strcmp
                        _Write_time_
                         _Write_time
 ---------------------------------------------------------------------------------
 (2) _Write_time                                           5     1      4     204
                                             36 COMRAM     5     1      4
                           _delay_ms
                            _ReadBUF
                          _Write_I2C
                           _CloseI2C
 ---------------------------------------------------------------------------------
 (2) _CloseI2C                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Write_time_                                          5     2      3     226
                                             36 COMRAM     5     2      3
                           _delay_ms
                            _ReadBUF
                          _Write_I2C
                            _OpenI2C
 ---------------------------------------------------------------------------------
 (2) _OpenI2C                                              2     0      2      44
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (2) _Write_I2C                                            1     0      1      46
                                             33 COMRAM     1     0      1
                          _write_DAY (ARG)
                            _ReadBUF
                           _WriteI2C
 ---------------------------------------------------------------------------------
 (3) _ReadBUF                                              1     1      0       2
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (4) _delay_ms                                             3     2      1      68
                                             33 COMRAM     3     2      1
                        _Delay1KTCYx
                          _write_DAY (ARG)
 ---------------------------------------------------------------------------------
 (2) _strcmp                                               6     2      4      91
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) _Set_date                                            58    52      6     897
                                              8 COMRAM    58    52      6
                          _Write_str
                         _BCD_format
                         _BCD_to_DEC
                        _Read_string
 ---------------------------------------------------------------------------------
 (2) _Set_day                                             87    87      0     612
                                              8 COMRAM    87    87      0
                          _Write_str
                         _BCD_format
                        _Clear_array
                        _Read_string
 ---------------------------------------------------------------------------------
 (2) _Clear_array                                          5     2      3      69
                                              0 COMRAM     5     2      3
 ---------------------------------------------------------------------------------
 (2) _Set_time                                            69    62      7    1303
                                              8 COMRAM    69    62      7
                          _Write_str
                         _BCD_format
                         _BCD_to_DEC
                        _Read_string
 ---------------------------------------------------------------------------------
 (3) _Read_string                                          6     3      3     203
                                              2 COMRAM     6     3      3
                              _Write
                         _WriteUSART
                          _ReadUSART
 ---------------------------------------------------------------------------------
 (3) _BCD_to_DEC                                           2     1      1      44
                                              0 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (3) _BCD_format                                           4     2      2      68
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (3) _Write_str                                            3     1      2     111
                                              2 COMRAM     3     1      2
                              _Write
                         _WriteUSART
 ---------------------------------------------------------------------------------
 (1) _Read_char                                            2     2      0     112
                                              2 COMRAM     2     2      0
                              _Write
                          _ReadUSART
 ---------------------------------------------------------------------------------
 (4) _ReadUSART                                            1     1      0      23
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (4) _Write                                                1     0      1      44
                                              1 COMRAM     1     0      1
                         _WriteUSART
 ---------------------------------------------------------------------------------
 (4) _WriteUSART                                           1     0      1      22
                                              0 COMRAM     1     0      1
 ---------------------------------------------------------------------------------
 (1) _UsartConfig                                          2     0      2     264
                                              3 COMRAM     2     0      2
                          _OpenUSART
 ---------------------------------------------------------------------------------
 (2) _OpenUSART                                            3     0      3     220
                                              0 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (2) _IdleI2C                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _ReadI2C                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _WriteI2C                                             1     0      1      22
                                              0 COMRAM     1     0      1
                            _IdleI2C
 ---------------------------------------------------------------------------------
 (2) _IdleI2C                                              0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _delay_ms
     _Delay1KTCYx
     _write_DAY (ARG)
       _Delay1KTCYx (ARG)
       _Write_ARR (ARG)
       _ReadBUF (ARG)
       _WriteI2C (ARG)
         _IdleI2C
       _ReadI2C (ARG)
   _UsartConfig
     _OpenUSART
   _Write_str
     _Write
       _WriteUSART
     _WriteUSART
   _Read_char
     _Write
       _WriteUSART
     _ReadUSART
   _Get_data
     _Write_str
       _Write
         _WriteUSART
       _WriteUSART
     _Set_time
       _Write_str
         _Write
           _WriteUSART
         _WriteUSART
       _BCD_format
       _BCD_to_DEC
       _Read_string
         _Write
           _WriteUSART
         _WriteUSART
         _ReadUSART
     _Read_string
       _Write
         _WriteUSART
       _WriteUSART
       _ReadUSART
     _Set_day
       _Write_str
         _Write
           _WriteUSART
         _WriteUSART
       _BCD_format
       _Clear_array
       _Read_string
         _Write
           _WriteUSART
         _WriteUSART
         _ReadUSART
     _Set_date
       _Write_str
         _Write
           _WriteUSART
         _WriteUSART
       _BCD_format
       _BCD_to_DEC
       _Read_string
         _Write
           _WriteUSART
         _WriteUSART
         _ReadUSART
     _strcmp
     _Write_time_
       _delay_ms
         _Delay1KTCYx
         _write_DAY (ARG)
           _Delay1KTCYx (ARG)
           _Write_ARR (ARG)
           _ReadBUF (ARG)
           _WriteI2C (ARG)
             _IdleI2C
           _ReadI2C (ARG)
       _ReadBUF
       _Write_I2C
         _write_DAY (ARG)
           _Delay1KTCYx (ARG)
           _Write_ARR (ARG)
           _ReadBUF (ARG)
           _WriteI2C (ARG)
             _IdleI2C
           _ReadI2C (ARG)
         _ReadBUF (ARG)
         _WriteI2C (ARG)
           _IdleI2C
       _OpenI2C
     _Write_time
       _delay_ms
         _Delay1KTCYx
         _write_DAY (ARG)
           _Delay1KTCYx (ARG)
           _Write_ARR (ARG)
           _ReadBUF (ARG)
           _WriteI2C (ARG)
             _IdleI2C
           _ReadI2C (ARG)
       _ReadBUF
       _Write_I2C
         _write_DAY (ARG)
           _Delay1KTCYx (ARG)
           _Write_ARR (ARG)
           _ReadBUF (ARG)
           _WriteI2C (ARG)
             _IdleI2C
           _ReadI2C (ARG)
         _ReadBUF (ARG)
         _WriteI2C (ARG)
           _IdleI2C
       _CloseI2C
   _Read_time
     _delay_ms
       _Delay1KTCYx
       _write_DAY (ARG)
         _Delay1KTCYx (ARG)
         _Write_ARR (ARG)
         _ReadBUF (ARG)
         _WriteI2C (ARG)
           _IdleI2C
         _ReadI2C (ARG)
     _delay_us
       _Delay1KTCYx
     _Clear_array
     _Read_sec
       _Read
         _delay_ms
           _Delay1KTCYx
           _write_DAY (ARG)
             _Delay1KTCYx (ARG)
             _Write_ARR (ARG)
             _ReadBUF (ARG)
             _WriteI2C (ARG)
               _IdleI2C
             _ReadI2C (ARG)
         _write_DAY (ARG)
           _Delay1KTCYx (ARG)
           _Write_ARR (ARG)
           _ReadBUF (ARG)
           _WriteI2C (ARG)
             _IdleI2C
           _ReadI2C (ARG)
         _ReadBUF (ARG)
         _Write_I2C (ARG)
           _write_DAY (ARG)
             _Delay1KTCYx (ARG)
             _Write_ARR (ARG)
             _ReadBUF (ARG)
             _WriteI2C (ARG)
               _IdleI2C
             _ReadI2C (ARG)
           _ReadBUF (ARG)
           _WriteI2C (ARG)
             _IdleI2C
         _ReadI2C (ARG)
     _Read_min
       _Read
         _delay_ms
           _Delay1KTCYx
           _write_DAY (ARG)
             _Delay1KTCYx (ARG)
             _Write_ARR (ARG)
             _ReadBUF (ARG)
             _WriteI2C (ARG)
               _IdleI2C
             _ReadI2C (ARG)
         _write_DAY (ARG)
           _Delay1KTCYx (ARG)
           _Write_ARR (ARG)
           _ReadBUF (ARG)
           _WriteI2C (ARG)
             _IdleI2C
           _ReadI2C (ARG)
         _ReadBUF (ARG)
         _Write_I2C (ARG)
           _write_DAY (ARG)
             _Delay1KTCYx (ARG)
             _Write_ARR (ARG)
             _ReadBUF (ARG)
             _WriteI2C (ARG)
               _IdleI2C
             _ReadI2C (ARG)
           _ReadBUF (ARG)
           _WriteI2C (ARG)
             _IdleI2C
         _ReadI2C (ARG)
     _Read_hour
       _Read
         _delay_ms
           _Delay1KTCYx
           _write_DAY (ARG)
             _Delay1KTCYx (ARG)
             _Write_ARR (ARG)
             _ReadBUF (ARG)
             _WriteI2C (ARG)
               _IdleI2C
             _ReadI2C (ARG)
         _write_DAY (ARG)
           _Delay1KTCYx (ARG)
           _Write_ARR (ARG)
           _ReadBUF (ARG)
           _WriteI2C (ARG)
             _IdleI2C
           _ReadI2C (ARG)
         _ReadBUF (ARG)
         _Write_I2C (ARG)
           _write_DAY (ARG)
             _Delay1KTCYx (ARG)
             _Write_ARR (ARG)
             _ReadBUF (ARG)
             _WriteI2C (ARG)
               _IdleI2C
             _ReadI2C (ARG)
           _ReadBUF (ARG)
           _WriteI2C (ARG)
             _IdleI2C
         _ReadI2C (ARG)
     _Read_day
       _Read
         _delay_ms
           _Delay1KTCYx
           _write_DAY (ARG)
             _Delay1KTCYx (ARG)
             _Write_ARR (ARG)
             _ReadBUF (ARG)
             _WriteI2C (ARG)
               _IdleI2C
             _ReadI2C (ARG)
         _write_DAY (ARG)
           _Delay1KTCYx (ARG)
           _Write_ARR (ARG)
           _ReadBUF (ARG)
           _WriteI2C (ARG)
             _IdleI2C
           _ReadI2C (ARG)
         _ReadBUF (ARG)
         _Write_I2C (ARG)
           _write_DAY (ARG)
             _Delay1KTCYx (ARG)
             _Write_ARR (ARG)
             _ReadBUF (ARG)
             _WriteI2C (ARG)
               _IdleI2C
             _ReadI2C (ARG)
           _ReadBUF (ARG)
           _WriteI2C (ARG)
             _IdleI2C
         _ReadI2C (ARG)
       _write_DAY
         _Delay1KTCYx (ARG)
         _Write_ARR (ARG)
         _ReadBUF (ARG)
         _WriteI2C (ARG)
           _IdleI2C
         _ReadI2C (ARG)
     _Read_date
       _Read
         _delay_ms
           _Delay1KTCYx
           _write_DAY (ARG)
             _Delay1KTCYx (ARG)
             _Write_ARR (ARG)
             _ReadBUF (ARG)
             _WriteI2C (ARG)
               _IdleI2C
             _ReadI2C (ARG)
         _write_DAY (ARG)
           _Delay1KTCYx (ARG)
           _Write_ARR (ARG)
           _ReadBUF (ARG)
           _WriteI2C (ARG)
             _IdleI2C
           _ReadI2C (ARG)
         _ReadBUF (ARG)
         _Write_I2C (ARG)
           _write_DAY (ARG)
             _Delay1KTCYx (ARG)
             _Write_ARR (ARG)
             _ReadBUF (ARG)
             _WriteI2C (ARG)
               _IdleI2C
             _ReadI2C (ARG)
           _ReadBUF (ARG)
           _WriteI2C (ARG)
             _IdleI2C
         _ReadI2C (ARG)
     _Read_month
       _Read
         _delay_ms
           _Delay1KTCYx
           _write_DAY (ARG)
             _Delay1KTCYx (ARG)
             _Write_ARR (ARG)
             _ReadBUF (ARG)
             _WriteI2C (ARG)
               _IdleI2C
             _ReadI2C (ARG)
         _write_DAY (ARG)
           _Delay1KTCYx (ARG)
           _Write_ARR (ARG)
           _ReadBUF (ARG)
           _WriteI2C (ARG)
             _IdleI2C
           _ReadI2C (ARG)
         _ReadBUF (ARG)
         _Write_I2C (ARG)
           _write_DAY (ARG)
             _Delay1KTCYx (ARG)
             _Write_ARR (ARG)
             _ReadBUF (ARG)
             _WriteI2C (ARG)
               _IdleI2C
             _ReadI2C (ARG)
           _ReadBUF (ARG)
           _WriteI2C (ARG)
             _IdleI2C
         _ReadI2C (ARG)
     _Read_year
       _Read
         _delay_ms
           _Delay1KTCYx
           _write_DAY (ARG)
             _Delay1KTCYx (ARG)
             _Write_ARR (ARG)
             _ReadBUF (ARG)
             _WriteI2C (ARG)
               _IdleI2C
             _ReadI2C (ARG)
         _write_DAY (ARG)
           _Delay1KTCYx (ARG)
           _Write_ARR (ARG)
           _ReadBUF (ARG)
           _WriteI2C (ARG)
             _IdleI2C
           _ReadI2C (ARG)
         _ReadBUF (ARG)
         _Write_I2C (ARG)
           _write_DAY (ARG)
             _Delay1KTCYx (ARG)
             _Write_ARR (ARG)
             _ReadBUF (ARG)
             _WriteI2C (ARG)
               _IdleI2C
             _ReadI2C (ARG)
           _ReadBUF (ARG)
           _WriteI2C (ARG)
             _IdleI2C
         _ReadI2C (ARG)
     _Write_I2C
       _write_DAY (ARG)
         _Delay1KTCYx (ARG)
         _Write_ARR (ARG)
         _ReadBUF (ARG)
         _WriteI2C (ARG)
           _IdleI2C
         _ReadI2C (ARG)
       _ReadBUF (ARG)
       _WriteI2C (ARG)
         _IdleI2C
     _OpenI2C
     _CloseI2C
     _IdleI2C

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      21        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0      68       9       40.6%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      F5       7       95.7%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     92      A0       5      100.0%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     5F      5F       1      100.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       6       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     25C      20        0.0%
DATA                 0      0     262       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.21 build 54009 
Symbol Table                                                                                   Thu Jun 05 11:25:46 2014

    __end_of_Clear_array 6EC8              _SSPSTATbits 000FC7              __CFG_BOR$ON 000000  
            __CFG_BORV$3 000000                      l312 6ECA                      l321 7406  
                    l146 7558                      l330 7498                      l219 7612  
                    l251 7BB6                      l405 7170                      l318 7390  
                    l342 77FE                      l327 740E                      l440 72DE  
                    l408 718E                      l336 772C                      l441 72E0  
                    l530 701C                      l442 72EA                      l434 72BE  
                    l443 72EC                      l339 77F4                      l508 6E16  
                    l436 72CA                      l533 6FF2                      l509 6E18  
                    l445 7304                      l437 72CC                      l542 7012  
                    l382 6D9A                      l454 6F74                      l390 6F40  
                    l456 6F7E                      l457 6F88                      l467 6DE8  
                    l397 6EF4                      l771 6DAE                      _str 00F3  
                    wreg 000FE8             __CFG_FOSC$HS 000000     __size_of_Write_time_ 009E  
           __CFG_LVP$OFF 000000              main@config1 00F0             __CFG_WDT$OFF 000000  
                   l2121 6D86                     l2061 6EAC                     l2311 7198  
                   l2071 6F92                     l2073 6F9A                     l2225 6E46  
                   l2321 7B22                     l2067 6EBE                     l2083 710A  
                   l2323 7B3C                     l2315 7AD4                     l2331 7B8A  
                   l2077 6FC8                     l2229 6E54                     l2325 7B56  
                   l2317 7AEE                     l2255 6FFE                     l2407 7D10  
                   l2431 7540                     l2415 74F6                     l2271 6E66  
                   l2327 7B70                     l2319 7B08                     l2089 7126  
                   l2283 6F48                     l2339 7BDC                     l2275 6E74  
                   l2373 7C94                     l2605 7F76                     l2279 6F30  
                   l2391 7CDE                     l2359 7C60                     l2471 7A4E  
                   l2439 7948                     l2377 7CA2                     l2379 7CB0  
                   l2803 78FA                     l2389 7CD2                     l2469 7A42  
                   l2581 7E90                     l2399 7CF6                     l2575 7E14  
                   l2655 7574                     l2585 7ED8                     l2593 7F10  
                   l2569 7DC4                     l2665 75B4                     l2657 757C  
                   l2587 7EEA                     l2579 7E88                     l2675 75F6  
                   l2667 75BA                     l2597 7F46                     l2589 7EFA  
                   l2599 7F56                     l2785 7896                     l2777 7864  
                   l2795 78CA                     l2787 78A2      __size_of_BCD_format 0026  
                   u2131 792E                     u2141 7940                     u2301 7D62  
                   u2071 74B8                     u2311 7D74                     u2081 74CA  
    __size_of_BCD_to_DEC 0016                     u2291 7D50                     u2531 7812  
                   u2541 7824                     u2465 75CA                     u1851 7BC2  
                   u1861 7BD4                     u2637 6DB0                     u2485 75DE  
                   u1980 7CCA                     _Read 6EC8                     _main 7808  
                   _time 00FE                     fsr1h 000FE2                     fsr2h 000FDA  
                   indf1 000FE7                     fsr1l 000FE1                     indf2 000FDF  
                   fsr2l 000FD9                     prodl 000FF3                     start 0000  
          __CFG_IESO$OFF 000000          __end_of_IdleI2C 6D92            __CFG_MCLRE$ON 000000  
        __end_of_ReadI2C 6E20          __end_of_ReadBUF 6D86               Read_char@c 0004  
             Read_date@c 0029               Read_date@e 0027          __end_of_OpenI2C 6E3C  
             Read_hour@c 002D               Read_hour@e 0027               Read_hour@i 002C  
        __end_of_Set_day 755A              _Delay1KTCYx 6DAE            __CFG_PLLDIV$5 000000  
             Read_year@c 0029               Read_year@e 0027                    ?_Read 0001  
                  ?_main 0001                    _RCREG 000FAE                    _RCSTA 000FAB  
                  _SPBRG 000FAF            __CFG_USBDIV$1 000000                    _TXREG 000FAD  
                  Read@c 0026                    _TXSTA 000FAC            __CFG_PWRT$OFF 000000  
         __CFG_FCMEN$OFF 000000            ??_Read_string 0006                    _Write 6D92  
                  main@c 00F1                    tablat 000FF5                    status 000FD8  
            _Clear_array 6EA2         __end_of_CloseI2C 6D7C           WriteUSART@data 0001  
       __end_of_Get_data 8000          __initialization 71A2             __end_of_Read 6EF4  
           __end_of_main 7924         __end_of_Read_day 6DCA         __end_of_Read_min 70B2  
       __end_of_Read_sec 7068               _Read_month 70B2                   ??_Read 0025  
                 ??_main 00AE            __activetblptr 000002         __end_of_Set_date 7A62  
       __end_of_Set_time 7D36              Read_month@c 0029              Read_month@e 0027  
             Set_day@day 005F          __CFG_CCP2MX$OFF 000000                   ?_Write 0002  
       __end_of_WriteI2C 701E            BCD_format@str 0001              OpenI2C@slew 0002  
              ??_IdleI2C 0001       __size_of_ReadUSART 0038      __end_of_Read_string 71A2  
                 _SPBRGH 000FB0                   _SSPADD 000FC8                   _SSPBUF 000FC9  
              ??_ReadI2C 0001                ??_ReadBUF 0001       __size_of_Read_char 002E  
     __size_of_Read_date 005A       __size_of_Read_hour 00BA         __end_of_delay_ms 6E5C  
       __end_of_delay_us 6E7C       __size_of_Read_time 00FE       __size_of_Read_year 0058  
              ??_OpenI2C 0003                ??_Set_day 0009       __size_of_OpenUSART 005C  
           ??_BCD_format 0003             ??_BCD_to_DEC 0002           __CFG_STVREN$ON 000000  
                 clear_0 71A8                   _strcmp 6F90                   tblptrh 000FF7  
                 tblptrl 000FF6                   tblptru 000FF8       __end_of_BCD_format 6EA2  
     __end_of_BCD_to_DEC 6E04               __accesstop 0060  __end_of__initialization 71EE  
        __CFG_PBADEN$OFF 000000       __size_of_Write_I2C 000E       __size_of_Write_ARR 0052  
     __size_of_Write_str 0036               _WriteUSART 6DDA           __pcstackCOMRAM 0001  
           __pidataBANK1 7615             __pidataBANK2 7306            __end_of_Write 6DA0  
             _Write_time 740C              ?_Read_month 0027        __end_of_ReadUSART 6F90  
      __end_of_Read_char 6F22        __end_of_Read_date 72AA            ??_UsartConfig 0006  
      __end_of_Read_hour 7614        __end_of_Read_time 7808        __end_of_Read_year 7250  
            _Read_string 714E                  ??_Write 0003            ReadUSART@data 0001  
              ?_CloseI2C 0001        __end_of_OpenUSART 7306                ?_Get_data 0001  
             __pbssBANK0 00F2            Set_date@error 002E            Set_date@month 000B  
            Set_day@F203 0195              Set_day@F205 0200                ?_Read_day 0001  
              ?_Read_min 0027                ?_Read_sec 0027               Write_I2C@c 0022  
             Write_ARR@c 0001               Write_ARR@e 0003              Set_day@str5 000A  
              ?_Set_date 0009                ?_Set_time 0009             Read_string@i 0007  
             Write_str@c 0003             ?_Delay1KTCYx 0001                ?_WriteI2C 0001  
                ?_strcmp 0001        __end_of_Write_I2C 6DAE        __end_of_Write_ARR 714E  
          ??_Write_time_ 0028        __end_of_Write_str 6F58                ?_delay_ms 0022  
              ?_delay_us 0002              Set_time@min 000B              Set_time@sec 0009  
             ??_CloseI2C 0001             Write_time_@h 0027             Write_time_@m 0026  
           Write_time_@s 0025               ??_Get_data 0060           Read_string@len 0005  
                _SSPCON1 000FC6                  _SSPCON2 000FC5                  _SSPSTAT 000FC7  
    __end_of_UsartConfig 6DDA                  _IdleI2C 6D86          __CFG_VREGEN$OFF 000000  
             ??_Read_day 0027      __size_of_Read_month 004A               ??_Read_min 0029  
             ??_Read_sec 0029             ?_Clear_array 0001       __size_of_write_DAY 0156  
                _ReadI2C 6E04                  _ReadBUF 6D7C                  _OpenI2C 6E20  
                __Hparam 0000               ??_Set_date 000F                  __Lparam 0000  
                _Set_day 74AE               ??_Set_time 0010              ?_WriteUSART 0001  
            ?_Write_time 0025                  __pcinit 71A2               ??_WriteI2C 0002  
                __ramtop 0800                  __ptext0 7808                  __ptext1 770A  
                __ptext2 71F8                  __ptext3 70B2                  __ptext4 7250  
                __ptext5 6DBC                  __ptext6 7A62                  __ptext7 70FC  
                __ptext8 755A                  __ptext9 7068          __size_of_strcmp 0044  
             ??_delay_ms 0023               ??_delay_us 0003      __end_of_Write_time_ 740C  
   end_of_initialization 71EE            __Lmediumconst 0000             write_DAY@day 0005  
          Set_time@error 0036                _RCSTAbits 000FAB                  postdec1 000FE5  
                postinc0 000FEE                  postinc1 000FE6                  postinc2 000FDE  
         Write_time@date 0026           Write_time@year 0028                  strcmp@r 0006  
              Get_data@h 00A9                Get_data@m 00A8                Get_data@s 00A7  
      __end_of_write_DAY 7BB8       UsartConfig@config1 0004       UsartConfig@config2 0005  
            _UsartConfig 6DCA                _TRISBbits 000F93                _TRISCbits 000F94  
    __size_of_WriteUSART 0014      __size_of_Write_time 00A2                _TXSTAbits 000FAC  
              Read_min@c 0029                Read_min@e 0027                Read_sec@c 0029  
              Read_sec@e 0027             ??_Read_month 0029     __size_of_Delay1KTCYx 000E  
            _Write_time_ 736E           __end_of_strcmp 6FD4      start_initialization 71A2  
              _ReadUSART 6F58             ?_Read_string 0003                _Read_char 6EF4  
              _Read_date 7250                _Read_hour 755A                _Read_time 770A  
       WriteI2C@data_out 0001                _Read_year 71F8        __size_of_CloseI2C 0004  
      __size_of_Get_data 02CA                Set_date@x 0040                Set_date@y 0041  
              Set_date@z 0042                _OpenUSART 72AA       __end_of_Read_month 70FC  
              Set_time@h 004D                Set_time@m 0049                Set_time@s 0048  
              Set_time@x 004A                Set_time@y 004B                Set_time@z 004C  
      __size_of_Read_day 000E        __size_of_Read_min 004A        __size_of_Read_sec 004A  
   __size_of_Clear_array 0026        __size_of_Set_date 013E        __size_of_Set_time 017E  
            __pdataBANK1 0100              __pdataBANK2 0200         __CFG_LPT1OSC$OFF 000000  
               ??_strcmp 0005        __size_of_WriteI2C 004A             Clear_array@e 0001  
           Clear_array@i 0005             Clear_array@n 0003            Read_hour@mode 0029  
             ?_ReadUSART 0001            __pcstackBANK0 0060                _Write_I2C 6DA0  
              _Write_ARR 70FC               ?_Read_char 0001               ?_Read_date 0027  
              _Write_str 6F22               ?_Read_hour 0027               ?_Read_time 002E  
             ?_Read_year 0027        __size_of_delay_ms 0020        __size_of_delay_us 0020  
        Delay1KTCYx@unit 0001             Set_date@F214 0123             Set_date@F216 0183  
               ?_IdleI2C 0001               ?_OpenUSART 0001            Read_time@mode 002E  
           Set_day@error 004D             Set_date@date 0009                 ?_ReadI2C 0001  
               ?_ReadBUF 0001             Set_date@str6 0010             Set_date@year 000D  
              Write@data 0002                 ?_OpenI2C 0001                 ?_Set_day 0001  
           ??_WriteUSART 0002             ??_Write_time 0029            Get_data@error 0082  
          Get_data@month 00AC               ?_Write_I2C 0022               ?_Write_ARR 0001  
         __size_of_Write 000E               ?_Write_str 0003       __end_of_WriteUSART 6DEE  
     __end_of_Write_time 74AE                delay_ms@i 0024                delay_ms@t 0022  
           Set_time@F200 01A7                delay_us@i 0004             Set_time@F198 0243  
              delay_us@t 0002                 _PIE1bits 000F9D                 _PIR1bits 000F9E  
           Set_time@mode 000F             Set_time@hour 000D             Set_time@str3 0011  
          Write_time@day 0025                main@F4663 0100                main@F4665 0141  
        Read_string@data 0008                 ReadBUF@c 0001             ?_UsartConfig 0004  
            ??_ReadUSART 0001                 _CloseI2C 6D78                _write_DAY 7A62  
            ??_Read_char 0003              ??_Read_date 0029                 _Get_data 7D36  
            ??_Read_hour 002A              ??_Read_time 002F              ??_Read_year 0029  
              copy_data0 71C2                copy_data1 71E2     __size_of_Read_string 0054  
       OpenI2C@sync_mode 0001              ??_OpenUSART 0004                 _Read_day 6DBC  
               _Read_min 7068                 _Read_sec 701E         __size_of_IdleI2C 000C  
        OpenUSART@config 0001         __size_of_ReadI2C 001C              BCD_format@a 0004  
       __size_of_ReadBUF 000A                 __Hrparam 0000              BCD_to_DEC@c 0001  
               _Set_date 7924         __size_of_OpenI2C 001C                 _Set_time 7BB8  
               __Lrparam 0000         __size_of_Set_day 00AC               _BCD_format 6E7C  
             _BCD_to_DEC 6DEE                 _WriteI2C 6FD4           write_DAY@day_1 0006  
           ?_Write_time_ 0025           write_DAY@day_2 000A           write_DAY@day_3 000E  
         write_DAY@day_4 0012           write_DAY@day_5 0016           write_DAY@day_6 001A  
         write_DAY@day_7 001E             Get_data@F231 0171             Get_data@F241 01EF  
           Get_data@F233 01E3             Get_data@F243 01F2             Get_data@F235 01E6  
           Get_data@F227 015E             Get_data@F237 01E9             Get_data@F229 01B9  
           Get_data@F239 01EC                 _delay_ms 6E3C                 _delay_us 6E5C  
            ??_Write_I2C 0023              ??_Write_ARR 0005               ?_write_DAY 0005  
               __ptext10 701E                 __ptext11 6EC8                 __ptext20 6D7C  
               __ptext12 6E5C                 __ptext21 6E3C                 __ptext13 6DAE  
               __ptext30 6F22                 __ptext22 6F90                 __ptext14 7D36  
               __ptext31 6EF4                 __ptext23 7924                 __ptext15 740C  
               __ptext32 6F58                 __ptext24 74AE                 __ptext16 6D78  
               __ptext33 6D92                 __ptext25 6EA2                 __ptext17 736E  
               __ptext34 6DDA                 __ptext26 7BB8                 __ptext18 6E20  
               __ptext35 6DCA                 __ptext27 714E                 __ptext19 6DA0  
               __ptext36 72AA                 __ptext28 6DEE                 __ptext37 6D86  
               __ptext29 6E7C                 __ptext38 6E04                 __ptext39 6FD4  
            ??_Write_str 0005             Get_data@date 00AB             Get_data@mode 00AD  
           Get_data@str2 0061             Get_data@str8 0074             Get_data@year 00AA  
          __size_of_Read 002C            __size_of_main 011C            ??_Delay1KTCYx 0002  
               main@mode 00EF                 main@str7 00AF                 main@str8 00D2  
  __CFG_CPUDIV$OSC1_PLL2 000000           OpenUSART@spbrg 0002            write_DAY@F260 01CF  
          write_DAY@F262 01D3            write_DAY@F264 01D7            write_DAY@F256 01C7  
          write_DAY@F266 01DB            write_DAY@F258 01CB            write_DAY@F268 01DF  
            Get_data@s_1 0094              Get_data@s_2 0097              Get_data@s_3 009A  
            Get_data@s_4 009D              Get_data@s_5 00A0              Get_data@s_6 00A3  
          ??_Clear_array 0004              Get_data@day 00A6              ?_BCD_format 0001  
            ?_BCD_to_DEC 0001          Write_time@month 0027                 strcmp@s1 0001  
               strcmp@s2 0003      __end_of_Delay1KTCYx 6DBC              _SSPCON1bits 000FC6  
            _SSPCON2bits 000FC5              ??_write_DAY 0006     __size_of_UsartConfig 0010  
      Read_string@buffer 0003             _USART_Status 00F2  
